"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * mbed Cloud Connect REST API
 * mbed Cloud Connect REST API allows web applications to communicate with devices.
 *
 * OpenAPI spec version: 2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var superagent = require("superagent");
var defaultBasePath = 'https://api.mbedcloud.com';
function request(options, callback) {
    var url = options.uri;
    var request = superagent(options.method, url);
    if (options.auth && (options.auth.username || options.auth.password)) {
        request.auth(options.auth.username || '', options.auth.password || '');
    }
    // set query parameters
    request.query(normalizeParams(options.qs));
    // set header parameters
    request.set(normalizeParams(options.headers));
    // set request timeout
    request.timeout(60000);
    if (options.json) {
        request.type("application/json");
        request.accept("application/json");
    }
    if (options.form) {
        request.type("application/x-www-form-urlencoded");
        request.send(normalizeParams(options.form));
    }
    else if (options.formData) {
        request.type("multipart/form-data");
        var formParams = normalizeParams(options.formData);
        for (var key in formParams) {
            if (formParams.hasOwnProperty(key)) {
                if (isFileParam(formParams[key])) {
                    // file field
                    request.attach(key, formParams[key]);
                }
                else {
                    request.field(key, formParams[key]);
                }
            }
        }
    }
    else if (options.body) {
        request.send(options.body);
    }
    request.end(function (error, response) {
        if (callback) {
            callback(error, response);
        }
    });
    return request;
}
exports.request = request;
/**
* Normalizes parameter values:
* <ul>
* <li>remove nils</li>
* <li>keep files and arrays</li>
* <li>format to string with `paramToString` for other cases</li>
* </ul>
* @param {Object.<String, Object>} params The parameters as object properties.
* @returns {Object.<String, Object>} normalized parameters.
*/
function normalizeParams(params) {
    var newParams = {};
    for (var key in params) {
        if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
            var value = params[key];
            if (isFileParam(value) || Array.isArray(value)) {
                newParams[key] = value;
            }
            else {
                newParams[key] = paramToString(value);
            }
        }
    }
    return newParams;
}
exports.normalizeParams = normalizeParams;
/**
* Checks whether the given parameter value represents file-like content.
* @param param The parameter to check.
* @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
*/
function isFileParam(param) {
    // fs.ReadStream in Node.js (but not in runtime like browserify)
    if (typeof window === 'undefined' &&
        typeof require === 'function' &&
        require('fs') &&
        param instanceof require('fs').ReadStream) {
        return true;
    }
    // Buffer in Node.js
    if (typeof Buffer === 'function' && param instanceof Buffer) {
        return true;
    }
    // Blob in browser
    if (typeof Blob === 'function' && param instanceof Blob) {
        return true;
    }
    // File in browser (it seems File object is also instance of Blob, but keep this for safe)
    if (typeof File === 'function' && param instanceof File) {
        return true;
    }
    return false;
}
exports.isFileParam = isFileParam;
/**
* Returns a string representation for an actual parameter.
* @param param The actual parameter.
* @returns {String} The string representation of <code>param</code>.
*/
function paramToString(param) {
    if (param == undefined || param == null) {
        return '';
    }
    if (param instanceof Date) {
        return param.toJSON();
    }
    return param.toString();
}
exports.paramToString = paramToString;
var AsyncID = (function () {
    function AsyncID() {
    }
    return AsyncID;
}());
exports.AsyncID = AsyncID;
var AsyncIDResponse = (function () {
    function AsyncIDResponse() {
    }
    return AsyncIDResponse;
}());
exports.AsyncIDResponse = AsyncIDResponse;
var Endpoint = (function () {
    function Endpoint() {
    }
    return Endpoint;
}());
exports.Endpoint = Endpoint;
var EndpointData = (function () {
    function EndpointData() {
    }
    return EndpointData;
}());
exports.EndpointData = EndpointData;
var NotificationData = (function () {
    function NotificationData() {
    }
    return NotificationData;
}());
exports.NotificationData = NotificationData;
var NotificationMessage = (function () {
    function NotificationMessage() {
    }
    return NotificationMessage;
}());
exports.NotificationMessage = NotificationMessage;
var Presubscription = (function () {
    function Presubscription() {
    }
    return Presubscription;
}());
exports.Presubscription = Presubscription;
var PresubscriptionArray = (function (_super) {
    __extends(PresubscriptionArray, _super);
    function PresubscriptionArray() {
        return _super.apply(this, arguments) || this;
    }
    return PresubscriptionArray;
}(Array));
exports.PresubscriptionArray = PresubscriptionArray;
var Resource = (function () {
    function Resource() {
    }
    return Resource;
}());
exports.Resource = Resource;
var ResourcePath = (function () {
    function ResourcePath() {
    }
    return ResourcePath;
}());
exports.ResourcePath = ResourcePath;
var ResourcesData = (function () {
    function ResourcesData() {
    }
    return ResourcesData;
}());
exports.ResourcesData = ResourcesData;
var Webhook = (function () {
    function Webhook() {
    }
    return Webhook;
}());
exports.Webhook = Webhook;
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (_) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
(function (DefaultApiApiKeys) {
    DefaultApiApiKeys[DefaultApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.DefaultApiApiKeys || (exports.DefaultApiApiKeys = {}));
var DefaultApiApiKeys = exports.DefaultApiApiKeys;
var DefaultApi = (function () {
    function DefaultApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DefaultApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    DefaultApi.prototype.setApiKey = function (key, value) {
        this.authentications[key].apiKey = value;
    };
    DefaultApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Delete callback URL
     * Deletes the callback URL.
     */
    DefaultApi.prototype.v2NotificationCallbackDelete = function (callback) {
        var localVarPath = this.basePath + '/v2/notification/callback';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Check callback URL
     * Shows the current callback URL if exists.
     */
    DefaultApi.prototype.v2NotificationCallbackGet = function (callback) {
        var localVarPath = this.basePath + '/v2/notification/callback';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    return DefaultApi;
}());
exports.DefaultApi = DefaultApi;
(function (EndpointsApiApiKeys) {
    EndpointsApiApiKeys[EndpointsApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.EndpointsApiApiKeys || (exports.EndpointsApiApiKeys = {}));
var EndpointsApiApiKeys = exports.EndpointsApiApiKeys;
var EndpointsApi = (function () {
    function EndpointsApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(EndpointsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    EndpointsApi.prototype.setApiKey = function (key, value) {
        this.authentications[key].apiKey = value;
    };
    EndpointsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * List the resources on an endpoint
     * The list of resources is cached by mbed Cloud Connect, so this call does not create a message to the device.
     * @param endpointName A unique identifier for an endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.
     */
    EndpointsApi.prototype.v2EndpointsEndpointNameGet = function (endpointName, callback) {
        var localVarPath = this.basePath + '/v2/endpoints/{endpointName}'
            .replace('{' + 'endpointName' + '}', String(endpointName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2EndpointsEndpointNameGet.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * List all endpoints
     * Endpoints are physical devices running mbed Cloud Client.
     * @param type Filter endpoints by endpoint-type.
     */
    EndpointsApi.prototype.v2EndpointsGet = function (type, callback) {
        var localVarPath = this.basePath + '/v2/endpoints';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (type !== undefined) {
            queryParameters['type'] = type;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    return EndpointsApi;
}());
exports.EndpointsApi = EndpointsApi;
(function (NotificationsApiApiKeys) {
    NotificationsApiApiKeys[NotificationsApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.NotificationsApiApiKeys || (exports.NotificationsApiApiKeys = {}));
var NotificationsApiApiKeys = exports.NotificationsApiApiKeys;
var NotificationsApi = (function () {
    function NotificationsApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(NotificationsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    NotificationsApi.prototype.setApiKey = function (key, value) {
        this.authentications[key].apiKey = value;
    };
    NotificationsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Register a callback URL
     * Register a URL to which the server should deliver notifications of the subscribed resource changes. To get notifications pushed you need to also place the subscriptions.  Notifications are delivered as PUT messages to the HTTP server defined by the client with a subscription server message. The given URL should be accessible and respond to the PUT request with response code of 200 or 204. mbed Cloud Connect tests the callback URL with empty payload when the URL is registered. For more information on callback notification, see NotificationData.  **Note**: Only one callback URL per access-key can be active. If you register a new URL when another one is already active, the old URL is replaced by the new.
     * @param webhook A json object that contains the URL to which notifications need to be sent, and the optional headers.
     */
    NotificationsApi.prototype.v2NotificationCallbackPut = function (webhook, callback) {
        var localVarPath = this.basePath + '/v2/notification/callback';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'webhook' is not null or undefined
        if (webhook === null || webhook === undefined) {
            throw new Error('Required parameter webhook was null or undefined when calling v2NotificationCallbackPut.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: webhook,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Get notifications using Long Poll
     * In this case, notifications are delivered through HTTP long-poll requests. The HTTP request is kept open until an event notification or a batch of event notifications are delivered to the client or the request times out (response code 204). In both cases, the client should open a new polling connection after the previous one closes. You must have a persistent connection (Connection keep-alive header in the request) to avoid excess TLS handshakes.  **Note:** If it is not possible to have a public facing callback URL, for example when developing on your local machine, you can use long polling to check for new messages. However, to reduce network traffic and to increase performance we recommend that you use callback URLs (webhooks) whenever possible.
     */
    NotificationsApi.prototype.v2NotificationPullGet = function (callback) {
        var localVarPath = this.basePath + '/v2/notification/pull';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    return NotificationsApi;
}());
exports.NotificationsApi = NotificationsApi;
(function (ResourcesApiApiKeys) {
    ResourcesApiApiKeys[ResourcesApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.ResourcesApiApiKeys || (exports.ResourcesApiApiKeys = {}));
var ResourcesApiApiKeys = exports.ResourcesApiApiKeys;
var ResourcesApi = (function () {
    function ResourcesApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ResourcesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    ResourcesApi.prototype.setApiKey = function (key, value) {
        this.authentications[key].apiKey = value;
    };
    ResourcesApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Delete a resource
     * A request to delete a resource must be handled by both mbed Cloud Client and mbed Cloud Connect. The resource is not deleted from mbed Cloud Connect until the delete is handled by mbed Cloud Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     * @param noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.
     */
    ResourcesApi.prototype.v2EndpointsEndpointNameResourcePathDelete = function (endpointName, resourcePath, noResp, callback) {
        var localVarPath = this.basePath + '/v2/endpoints/{endpointName}/{resourcePath}'
            .replace('{' + 'endpointName' + '}', String(endpointName))
            .replace('{' + 'resourcePath' + '}', String(resourcePath));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2EndpointsEndpointNameResourcePathDelete.');
        }
        // verify required parameter 'resourcePath' is not null or undefined
        if (resourcePath === null || resourcePath === undefined) {
            throw new Error('Required parameter resourcePath was null or undefined when calling v2EndpointsEndpointNameResourcePathDelete.');
        }
        if (noResp !== undefined) {
            queryParameters['noResp'] = noResp;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Read from a resource
     * Requests the resource value and when the response is available, a json AsycResponse object (AsyncIDResponse object) is received in the notification channel. Note that you can also receive notifications when a resource changes. The preferred way to get resource values is to use subscribe and callback methods.  All resource APIs are asynchronous. Note that these APIs will only respond if the device is turned on and connected to mbed Cloud Connect.
     * @param endpointName Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     * @param cacheOnly If true, the response comes only from the cache. Default: false.
     * @param noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If a request is made with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.
     */
    ResourcesApi.prototype.v2EndpointsEndpointNameResourcePathGet = function (endpointName, resourcePath, cacheOnly, noResp, callback) {
        var localVarPath = this.basePath + '/v2/endpoints/{endpointName}/{resourcePath}'
            .replace('{' + 'endpointName' + '}', String(endpointName))
            .replace('{' + 'resourcePath' + '}', String(resourcePath));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2EndpointsEndpointNameResourcePathGet.');
        }
        // verify required parameter 'resourcePath' is not null or undefined
        if (resourcePath === null || resourcePath === undefined) {
            throw new Error('Required parameter resourcePath was null or undefined when calling v2EndpointsEndpointNameResourcePathGet.');
        }
        if (cacheOnly !== undefined) {
            queryParameters['cacheOnly'] = cacheOnly;
        }
        if (noResp !== undefined) {
            queryParameters['noResp'] = noResp;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Execute a function on a resource
     * With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     * @param resourceFunction This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Cloud Client.
     * @param noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.
     */
    ResourcesApi.prototype.v2EndpointsEndpointNameResourcePathPost = function (endpointName, resourcePath, resourceFunction, noResp, callback) {
        var localVarPath = this.basePath + '/v2/endpoints/{endpointName}/{resourcePath}'
            .replace('{' + 'endpointName' + '}', String(endpointName))
            .replace('{' + 'resourcePath' + '}', String(resourcePath));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2EndpointsEndpointNameResourcePathPost.');
        }
        // verify required parameter 'resourcePath' is not null or undefined
        if (resourcePath === null || resourcePath === undefined) {
            throw new Error('Required parameter resourcePath was null or undefined when calling v2EndpointsEndpointNameResourcePathPost.');
        }
        if (noResp !== undefined) {
            queryParameters['noResp'] = noResp;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: resourceFunction,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Write to a resource
     * With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     * @param resourceValue Value to be set to the resource. (Check accceptable content-types)
     * @param noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.
     */
    ResourcesApi.prototype.v2EndpointsEndpointNameResourcePathPut = function (endpointName, resourcePath, resourceValue, noResp, callback) {
        var localVarPath = this.basePath + '/v2/endpoints/{endpointName}/{resourcePath}'
            .replace('{' + 'endpointName' + '}', String(endpointName))
            .replace('{' + 'resourcePath' + '}', String(resourcePath));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2EndpointsEndpointNameResourcePathPut.');
        }
        // verify required parameter 'resourcePath' is not null or undefined
        if (resourcePath === null || resourcePath === undefined) {
            throw new Error('Required parameter resourcePath was null or undefined when calling v2EndpointsEndpointNameResourcePathPut.');
        }
        // verify required parameter 'resourceValue' is not null or undefined
        if (resourceValue === null || resourceValue === undefined) {
            throw new Error('Required parameter resourceValue was null or undefined when calling v2EndpointsEndpointNameResourcePathPut.');
        }
        if (noResp !== undefined) {
            queryParameters['noResp'] = noResp;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: resourceValue,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    return ResourcesApi;
}());
exports.ResourcesApi = ResourcesApi;
(function (SubscriptionsApiApiKeys) {
    SubscriptionsApiApiKeys[SubscriptionsApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.SubscriptionsApiApiKeys || (exports.SubscriptionsApiApiKeys = {}));
var SubscriptionsApiApiKeys = exports.SubscriptionsApiApiKeys;
var SubscriptionsApi = (function () {
    function SubscriptionsApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SubscriptionsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    SubscriptionsApi.prototype.setApiKey = function (key, value) {
        this.authentications[key].apiKey = value;
    };
    SubscriptionsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Remove all subscriptions
     * Removes subscriptions from every endpoint and resource. Note that this does not remove pre-subscriptions.
     */
    SubscriptionsApi.prototype.v2SubscriptionsDelete = function (callback) {
        var localVarPath = this.basePath + '/v2/subscriptions';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Delete subscriptions from an endpoint
     * Deletes all resource subscriptions in a single endpoint.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameDelete = function (endpointName, callback) {
        var localVarPath = this.basePath + '/v2/subscriptions/{endpointName}'
            .replace('{' + 'endpointName' + '}', String(endpointName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2SubscriptionsEndpointNameDelete.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Read endpoints subscriptions
     * Lists all subscribed resources from a single endpoint.
     * @param endpointName A unique identifier for the endpoint. Note that endpoint name must be an exact match. You cannot use wildcards here.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameGet = function (endpointName, callback) {
        var localVarPath = this.basePath + '/v2/subscriptions/{endpointName}'
            .replace('{' + 'endpointName' + '}', String(endpointName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2SubscriptionsEndpointNameGet.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Remove a subscription
     * To remove an existing subscription from a resource path.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameResourcePathDelete = function (endpointName, resourcePath, callback) {
        var localVarPath = this.basePath + '/v2/subscriptions/{endpointName}/{resourcePath}'
            .replace('{' + 'endpointName' + '}', String(endpointName))
            .replace('{' + 'resourcePath' + '}', String(resourcePath));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2SubscriptionsEndpointNameResourcePathDelete.');
        }
        // verify required parameter 'resourcePath' is not null or undefined
        if (resourcePath === null || resourcePath === undefined) {
            throw new Error('Required parameter resourcePath was null or undefined when calling v2SubscriptionsEndpointNameResourcePathDelete.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Read subscription status
     *
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameResourcePathGet = function (endpointName, resourcePath, callback) {
        var localVarPath = this.basePath + '/v2/subscriptions/{endpointName}/{resourcePath}'
            .replace('{' + 'endpointName' + '}', String(endpointName))
            .replace('{' + 'resourcePath' + '}', String(resourcePath));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2SubscriptionsEndpointNameResourcePathGet.');
        }
        // verify required parameter 'resourcePath' is not null or undefined
        if (resourcePath === null || resourcePath === undefined) {
            throw new Error('Required parameter resourcePath was null or undefined when calling v2SubscriptionsEndpointNameResourcePathGet.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Subscribe to a resource path
     * The mbed Cloud Connect eventing model consists of observable resources.  This means that endpoints can deliver updated resource content, periodically or with a more sophisticated solution-dependent logic. The OMA LWM2M resource model including objects, object instances, resources and resource instances is also supported.  Applications can subscribe to objects, object instances or individual resources to make the device to provide value change notifications to mbed Cloud Connect service. An application needs to call a /notification/callback method to get mbed Cloud Connect to push a notification of the resource changes. You can also use /subscriptions to set a pre-subscription.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s URL.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameResourcePathPut = function (endpointName, resourcePath, callback) {
        var localVarPath = this.basePath + '/v2/subscriptions/{endpointName}/{resourcePath}'
            .replace('{' + 'endpointName' + '}', String(endpointName))
            .replace('{' + 'resourcePath' + '}', String(resourcePath));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'endpointName' is not null or undefined
        if (endpointName === null || endpointName === undefined) {
            throw new Error('Required parameter endpointName was null or undefined when calling v2SubscriptionsEndpointNameResourcePathPut.');
        }
        // verify required parameter 'resourcePath' is not null or undefined
        if (resourcePath === null || resourcePath === undefined) {
            throw new Error('Required parameter resourcePath was null or undefined when calling v2SubscriptionsEndpointNameResourcePathPut.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Get pre-subscriptions
     * You can retrieve the pre-subscription data by using a GET operation. The server returns with the same JSON structure as described above. If there are no pre-subscribed resources, it returns with an empty array.
     */
    SubscriptionsApi.prototype.v2SubscriptionsGet = function (callback) {
        var localVarPath = this.basePath + '/v2/subscriptions';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     * Set pre-subscriptions
     * Pre-subscription is a set of rules and patterns put by the application. When an endpoint registers and its name, type and registered resources match the pre-subscription data, mbed Cloud Connect sends subscription requests to the device automatically. The pattern may include the endpoint name (optionally having an \\* character at the end), endpoint type, a list of resources or expressions with an \\* character at the end. The pre-subscription concerns all the endpoints that are already registered and the server sends subscription requests to the devices immediately when the patterns are set. There is only one pre-subscribe array, so changing the pre-subscription data removes all the previous subscriptions. To remove the pre-subscription data, put an empty array as a rule.
     * @param presubsription Array of pre-subscriptions.
     */
    SubscriptionsApi.prototype.v2SubscriptionsPut = function (presubsription, callback) {
        var localVarPath = this.basePath + '/v2/subscriptions';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'presubsription' is not null or undefined
        if (presubsription === null || presubsription === undefined) {
            throw new Error('Required parameter presubsription was null or undefined when calling v2SubscriptionsPut.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: presubsription,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    return SubscriptionsApi;
}());
exports.SubscriptionsApi = SubscriptionsApi;
