"use strict";
/**
 * Provisioning endpoints - production line certificates.
 * A producton line certificate is used to associate a specific installation of the Factory Tool with an mbed Cloud account.  The production line certificate is generated by the Factory Tool, and needs to be uploaded using these APIs.
 *
 * OpenAPI spec version: 0.8
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var superagent = require("superagent");
var defaultBasePath = 'https://api.mbedcloud.com';
function request(options, callback) {
    var url = options.uri;
    var request = superagent(options.method, url);
    if (options.auth && (options.auth.username || options.auth.password)) {
        request.auth(options.auth.username || '', options.auth.password || '');
    }
    // set query parameters
    request.query(normalizeParams(options.qs));
    // set header parameters
    request.set(normalizeParams(options.headers));
    // set request timeout
    request.timeout(60000);
    if (options.json) {
        request.type("application/json");
        request.accept("application/json");
    }
    if (options.form) {
        request.type("application/x-www-form-urlencoded");
        request.send(normalizeParams(options.form));
    }
    else if (options.formData) {
        request.type("multipart/form-data");
        var formParams = normalizeParams(options.formData);
        for (var key in formParams) {
            if (formParams.hasOwnProperty(key)) {
                if (isFileParam(formParams[key])) {
                    // file field
                    request.attach(key, formParams[key]);
                }
                else {
                    request.field(key, formParams[key]);
                }
            }
        }
    }
    else if (options.body) {
        request.send(options.body);
    }
    request.end(function (error, response) {
        if (callback) {
            callback(error, response);
        }
    });
    return request;
}
exports.request = request;
/**
* Normalizes parameter values:
* <ul>
* <li>remove nils</li>
* <li>keep files and arrays</li>
* <li>format to string with `paramToString` for other cases</li>
* </ul>
* @param {Object.<String, Object>} params The parameters as object properties.
* @returns {Object.<String, Object>} normalized parameters.
*/
function normalizeParams(params) {
    var newParams = {};
    for (var key in params) {
        if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
            var value = params[key];
            if (isFileParam(value) || Array.isArray(value)) {
                newParams[key] = value;
            }
            else {
                newParams[key] = paramToString(value);
            }
        }
    }
    return newParams;
}
exports.normalizeParams = normalizeParams;
/**
* Checks whether the given parameter value represents file-like content.
* @param param The parameter to check.
* @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
*/
function isFileParam(param) {
    // fs.ReadStream in Node.js (but not in runtime like browserify)
    if (typeof window === 'undefined' &&
        typeof require === 'function' &&
        require('fs') &&
        param instanceof require('fs').ReadStream) {
        return true;
    }
    // Buffer in Node.js
    if (typeof Buffer === 'function' && param instanceof Buffer) {
        return true;
    }
    // Blob in browser
    if (typeof Blob === 'function' && param instanceof Blob) {
        return true;
    }
    // File in browser (it seems File object is also instance of Blob, but keep this for safe)
    if (typeof File === 'function' && param instanceof File) {
        return true;
    }
    return false;
}
exports.isFileParam = isFileParam;
/**
* Returns a string representation for an actual parameter.
* @param param The actual parameter.
* @returns {String} The string representation of <code>param</code>.
*/
function paramToString(param) {
    if (param == undefined || param == null) {
        return '';
    }
    if (param instanceof Date) {
        return param.toJSON();
    }
    return param.toString();
}
exports.paramToString = paramToString;
var AListOfProductionLineCertificates_ = (function () {
    function AListOfProductionLineCertificates_() {
    }
    return AListOfProductionLineCertificates_;
}());
exports.AListOfProductionLineCertificates_ = AListOfProductionLineCertificates_;
var Body = (function () {
    function Body() {
    }
    return Body;
}());
exports.Body = Body;
var Body1 = (function () {
    function Body1() {
    }
    return Body1;
}());
exports.Body1 = Body1;
var ProductionLineCertificate = (function () {
    function ProductionLineCertificate() {
    }
    return ProductionLineCertificate;
}());
exports.ProductionLineCertificate = ProductionLineCertificate;
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (_) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
(function (DefaultApiApiKeys) {
    DefaultApiApiKeys[DefaultApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.DefaultApiApiKeys || (exports.DefaultApiApiKeys = {}));
var DefaultApiApiKeys = exports.DefaultApiApiKeys;
var DefaultApi = (function () {
    function DefaultApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DefaultApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    DefaultApi.prototype.setApiKey = function (key, value) {
        this.authentications[DefaultApiApiKeys[key]].apiKey = value;
    };
    DefaultApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Gets the list of production line certificates associated with the account.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     */
    DefaultApi.prototype.v3ProductionLineCertificatesGet = function (authorization, callback) {
        var localVarPath = this.basePath + '/v3/production-line-certificates';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v3ProductionLineCertificatesGet.');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     *
     * Deactivates the production line certificate.  There is no way to reactivate it.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID
     */
    DefaultApi.prototype.v3ProductionLineCertificatesMUUIDDelete = function (authorization, mUUID, callback) {
        var localVarPath = this.basePath + '/v3/production-line-certificates/{mUUID}'
            .replace('{' + 'mUUID' + '}', String(mUUID));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v3ProductionLineCertificatesMUUIDDelete.');
        }
        // verify required parameter 'mUUID' is not null or undefined
        if (mUUID === null || mUUID === undefined) {
            throw new Error('Required parameter mUUID was null or undefined when calling v3ProductionLineCertificatesMUUIDDelete.');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     *
     * Gets a single production line certificate by its mUUID.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID.
     */
    DefaultApi.prototype.v3ProductionLineCertificatesMUUIDGet = function (authorization, mUUID, callback) {
        var localVarPath = this.basePath + '/v3/production-line-certificates/{mUUID}'
            .replace('{' + 'mUUID' + '}', String(mUUID));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v3ProductionLineCertificatesMUUIDGet.');
        }
        // verify required parameter 'mUUID' is not null or undefined
        if (mUUID === null || mUUID === undefined) {
            throw new Error('Required parameter mUUID was null or undefined when calling v3ProductionLineCertificatesMUUIDGet.');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     *
     * Updates the comment on a production line certificate.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID
     * @param body
     */
    DefaultApi.prototype.v3ProductionLineCertificatesMUUIDPut = function (authorization, mUUID, body, callback) {
        var localVarPath = this.basePath + '/v3/production-line-certificates/{mUUID}'
            .replace('{' + 'mUUID' + '}', String(mUUID));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v3ProductionLineCertificatesMUUIDPut.');
        }
        // verify required parameter 'mUUID' is not null or undefined
        if (mUUID === null || mUUID === undefined) {
            throw new Error('Required parameter mUUID was null or undefined when calling v3ProductionLineCertificatesMUUIDPut.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v3ProductionLineCertificatesMUUIDPut.');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    /**
     *
     * Adds a new production line certificate to the account.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param body
     */
    DefaultApi.prototype.v3ProductionLineCertificatesPost = function (authorization, body, callback) {
        var localVarPath = this.basePath + '/v3/production-line-certificates';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v3ProductionLineCertificatesPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v3ProductionLineCertificatesPost.');
        }
        headerParams['Authorization'] = authorization;
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response) {
            if (callback) {
                if (error) {
                    return callback(error);
                }
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }
                callback(response);
            }
        });
    };
    return DefaultApi;
}());
exports.DefaultApi = DefaultApi;
