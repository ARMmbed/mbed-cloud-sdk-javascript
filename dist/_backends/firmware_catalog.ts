/**
 * Firmware Catalog API
 * This is the API Documentation for the mbed firmware catalog service which is part of the update service.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import request = require('request');
import http = require('http');

let defaultBasePath = 'http://api.mbedcloud.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class FirmwareImageSerializer {
    /**
    * API Resource name
    */
    'object': string;
    /**
    * Whether there are more results to display
    */
    'hasMore': boolean;
    /**
    * Total number of records
    */
    'totalCount': number;
    /**
    * Entity id for fetch after it
    */
    'after': string;
    /**
    * The number of results to return
    */
    'limit': number;
    'data': Array<FirmwareImageSerializerData>;
    /**
    * Order of returned records
    */
    'order': string;
}

export class FirmwareImageSerializerData {
    /**
    * The binary file of firmware image
    */
    'datafile': string;
    /**
    * The description of the object
    */
    'description': string;
    /**
    * The time the object was created
    */
    'createdAt': Date;
    /**
    * The API resource entity
    */
    'object': string;
    /**
    * The time the object was updated
    */
    'updatedAt': Date;
    /**
    * DEPRECATED: The ID of the firmware image
    */
    'imageId': string;
    /**
    * The entity instance signature
    */
    'etag': Date;
    /**
    * Checksum generated for the datafile
    */
    'datafileChecksum': string;
    /**
    * The ID of the firmware image
    */
    'id': string;
    /**
    * The name of the object
    */
    'name': string;
}

export class FirmwareManifestSerializerData {
    'datafile': string;
    /**
    * DEPRECATED: The ID of the firmware manifest
    */
    'manifestId': string;
    /**
    * The description of the object
    */
    'description': string;
    /**
    * The version of the firmware manifest (as a timestamp)
    */
    'timestamp': Date;
    /**
    * The time the object was created
    */
    'createdAt': Date;
    /**
    * The API resource entity
    */
    'object': string;
    /**
    * The time the object was updated
    */
    'updatedAt': Date;
    /**
    * The contents of the manifest
    */
    'manifestContents': string;
    /**
    * The entity instance signature
    */
    'etag': Date;
    /**
    * The class of device
    */
    'deviceClass': string;
    /**
    * The ID of the firmware manifest
    */
    'id': string;
    /**
    * The name of the object
    */
    'name': string;
}

export class ManifestSerializer {
    /**
    * API Resource name
    */
    'object': string;
    /**
    * Whether there are more results to display
    */
    'hasMore': boolean;
    /**
    * Total number of records
    */
    'totalCount': number;
    /**
    * Entity id for fetch after it
    */
    'after': string;
    /**
    * The number of results to return
    */
    'limit': number;
    'data': Array<ManifestSerializerData>;
    /**
    * Order of returned records
    */
    'order': string;
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: request.Options): void {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        // Do nothing
    }
}

export enum DefaultApiApiKeys {
    Bearer,
}

export class DefaultApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'Bearer': new ApiKeyAuth('header', 'Authorization'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        this.authentications[DefaultApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * 
     * &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
     */
    public deployInfoGET () : Promise<{ response: http.IncomingMessage; body: any;  }> {
        const localVarPath = this.basePath + '/v3/fc_deploy_info';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: any;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Create firmware image&lt;/p&gt;&lt;pre&gt;YAMLError:  while scanning a simple key   in \&quot;&lt;unicode string&gt;\&quot;, line 16, column 9:             Cannot validate the data used to ...              ^ could not find expected &#39;:&#39;   in \&quot;&lt;unicode string&gt;\&quot;, line 17, column 5:         - code: 401         ^&lt;/pre&gt;
     * @param datafile The binary file of firmware image
     * @param name The name of the object
     * @param description The description of the object
     * @param updatingRequestId 
     * @param updatingIpAddress 
     * @param name2 
     * @param description2 
     * @param createdAt 
     * @param updatedAt 
     * @param datafileChecksum 
     * @param etag 
     * @param imageId 
     * @param object 
     */
    public firmwareImageCreate (datafile: string, name: string, description?: string, updatingRequestId?: string, updatingIpAddress?: string, name2?: string, description2?: string, createdAt?: string, updatedAt?: string, datafileChecksum?: string, etag?: string, imageId?: string, object?: string) : Promise<{ response: http.IncomingMessage; body: FirmwareImageSerializer;  }> {
        const localVarPath = this.basePath + '/v3/firmware/images/';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'datafile' is not null or undefined
        if (datafile === null || datafile === undefined) {
            throw new Error('Required parameter datafile was null or undefined when calling firmwareImageCreate.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling firmwareImageCreate.');
        }

        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }

        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }

        if (name2 !== undefined) {
            queryParameters['name'] = name2;
        }

        if (description2 !== undefined) {
            queryParameters['description'] = description2;
        }

        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }

        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }

        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }

        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }

        if (imageId !== undefined) {
            queryParameters['image_id'] = imageId;
        }

        if (object !== undefined) {
            queryParameters['object'] = object;
        }

        let useFormData = false;

        if (datafile !== undefined) {
            formParams['datafile'] = datafile;
        }

        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: FirmwareImageSerializer;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Delete firmware image&lt;/p&gt;
     * @param imageId The ID of the firmware image
     * @param updatingRequestId 
     * @param updatingIpAddress 
     * @param name 
     * @param description 
     * @param createdAt 
     * @param updatedAt 
     * @param datafileChecksum 
     * @param etag 
     * @param object 
     */
    public firmwareImageDestroy (imageId: number, updatingRequestId?: string, updatingIpAddress?: string, name?: string, description?: string, createdAt?: string, updatedAt?: string, datafileChecksum?: string, etag?: string, object?: string) : Promise<{ response: http.IncomingMessage; body: FirmwareImageSerializer;  }> {
        const localVarPath = this.basePath + '/v3/firmware/images/{image_id}/'
            .replace('{' + 'image_id' + '}', String(imageId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'imageId' is not null or undefined
        if (imageId === null || imageId === undefined) {
            throw new Error('Required parameter imageId was null or undefined when calling firmwareImageDestroy.');
        }

        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }

        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }

        if (name !== undefined) {
            queryParameters['name'] = name;
        }

        if (description !== undefined) {
            queryParameters['description'] = description;
        }

        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }

        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }

        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }

        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }

        if (object !== undefined) {
            queryParameters['object'] = object;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: FirmwareImageSerializer;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;List all firmware images. The result will be paged into pages of 100.&lt;/p&gt;
     * @param limit 
     * @param order 
     * @param after 
     * @param include 
     */
    public firmwareImageList (limit?: number, order?: string, after?: string, include?: string) : Promise<{ response: http.IncomingMessage; body: FirmwareImageSerializer;  }> {
        const localVarPath = this.basePath + '/v3/firmware/images/';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (after !== undefined) {
            queryParameters['after'] = after;
        }

        if (include !== undefined) {
            queryParameters['include'] = include;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: FirmwareImageSerializer;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Retrieve firmware image&lt;/p&gt;
     * @param imageId The ID of the firmware image
     * @param updatingRequestId 
     * @param updatingIpAddress 
     * @param name 
     * @param description 
     * @param createdAt 
     * @param updatedAt 
     * @param datafileChecksum 
     * @param etag 
     * @param object 
     */
    public firmwareImageRetrieve (imageId: number, updatingRequestId?: string, updatingIpAddress?: string, name?: string, description?: string, createdAt?: string, updatedAt?: string, datafileChecksum?: string, etag?: string, object?: string) : Promise<{ response: http.IncomingMessage; body: FirmwareImageSerializer;  }> {
        const localVarPath = this.basePath + '/v3/firmware/images/{image_id}/'
            .replace('{' + 'image_id' + '}', String(imageId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'imageId' is not null or undefined
        if (imageId === null || imageId === undefined) {
            throw new Error('Required parameter imageId was null or undefined when calling firmwareImageRetrieve.');
        }

        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }

        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }

        if (name !== undefined) {
            queryParameters['name'] = name;
        }

        if (description !== undefined) {
            queryParameters['description'] = description;
        }

        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }

        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }

        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }

        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }

        if (object !== undefined) {
            queryParameters['object'] = object;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: FirmwareImageSerializer;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Create firmware manifest&lt;/p&gt;
     * @param datafile The manifest file to create
     * @param name The name of the object
     * @param description The description of the object
     */
    public firmwareManifestCreate (datafile: any, name: string, description?: string) : Promise<{ response: http.IncomingMessage; body: ManifestSerializerData;  }> {
        const localVarPath = this.basePath + '/v3/firmware/manifests/';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'datafile' is not null or undefined
        if (datafile === null || datafile === undefined) {
            throw new Error('Required parameter datafile was null or undefined when calling firmwareManifestCreate.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling firmwareManifestCreate.');
        }

        let useFormData = false;

        if (datafile !== undefined) {
            formParams['datafile'] = datafile;
        }
        useFormData = true;

        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: ManifestSerializerData;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Delete firmware manifest&lt;/p&gt;
     * @param manifestId The ID of the firmware manifest
     */
    public firmwareManifestDestroy (manifestId: number) : Promise<{ response: http.IncomingMessage; body: ManifestSerializerData;  }> {
        const localVarPath = this.basePath + '/v3/firmware/manifests/{manifest_id}/'
            .replace('{' + 'manifest_id' + '}', String(manifestId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'manifestId' is not null or undefined
        if (manifestId === null || manifestId === undefined) {
            throw new Error('Required parameter manifestId was null or undefined when calling firmwareManifestDestroy.');
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: ManifestSerializerData;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;List all firmware manifests&lt;/p&gt;
     * @param limit 
     * @param order 
     * @param after 
     * @param include 
     */
    public firmwareManifestList (limit?: number, order?: string, after?: string, include?: string) : Promise<{ response: http.IncomingMessage; body: ManifestSerializer;  }> {
        const localVarPath = this.basePath + '/v3/firmware/manifests/';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (after !== undefined) {
            queryParameters['after'] = after;
        }

        if (include !== undefined) {
            queryParameters['include'] = include;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: ManifestSerializer;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Retrieve firmware manifest&lt;/p&gt;
     * @param manifestId The ID of the firmware manifest
     * @param updatingRequestId 
     * @param updatingIpAddress 
     * @param name 
     * @param description 
     * @param createdAt 
     * @param updatedAt 
     * @param datafileChecksum 
     * @param deviceClass 
     * @param etag 
     * @param object 
     * @param timestamp 
     */
    public firmwareManifestRetrieve (manifestId: number, updatingRequestId?: string, updatingIpAddress?: string, name?: string, description?: string, createdAt?: string, updatedAt?: string, datafileChecksum?: string, deviceClass?: string, etag?: string, object?: string, timestamp?: string) : Promise<{ response: http.IncomingMessage; body: ManifestSerializerData;  }> {
        const localVarPath = this.basePath + '/v3/firmware/manifests/{manifest_id}/';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'manifestId' is not null or undefined
        if (manifestId === null || manifestId === undefined) {
            throw new Error('Required parameter manifestId was null or undefined when calling firmwareManifestRetrieve.');
        }

        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }

        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }

        if (name !== undefined) {
            queryParameters['name'] = name;
        }

        if (description !== undefined) {
            queryParameters['description'] = description;
        }

        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }

        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }

        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }

        if (deviceClass !== undefined) {
            queryParameters['device_class'] = deviceClass;
        }

        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }

        if (object !== undefined) {
            queryParameters['object'] = object;
        }

        if (timestamp !== undefined) {
            queryParameters['timestamp'] = timestamp;
        }

        let useFormData = false;

        if (manifestId !== undefined) {
            formParams['manifest_id'] = manifestId;
        }

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: ManifestSerializerData;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
