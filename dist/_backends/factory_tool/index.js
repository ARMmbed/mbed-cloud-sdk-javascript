/**
 * Provisioning endpoints - the factory provisioning package.
 * The factory provisioning package needs to be installed in factories to enroll devices onto the mbed Cloud ecosystem.  These APIs allow downloading the most recent version of the factory provisioning package for various operating systems. 
 *
 * OpenAPI spec version: 0.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AListOfDownloadableFactoryToolVersions_', 'model/FactoryToolDownload', 'api/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AListOfDownloadableFactoryToolVersions_'), require('./model/FactoryToolDownload'), require('./api/DefaultApi'));
  }
}(function(ApiClient, AListOfDownloadableFactoryToolVersions_, FactoryToolDownload, DefaultApi) {
  'use strict';

  /**
   * The_factory_provisioning_package_needs_to_be_installed_in_factories_to_enrolldevices_onto_the_mbed_Cloud_ecosystem_These_APIs_allow_downloading_the_most_recent_version_of_the_factory_provisioning_packagefor_various_operating_systems_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ProvisioningEndpointsTheFactoryProvisioningPackage = require('index'); // See note below*.
   * var xxxSvc = new ProvisioningEndpointsTheFactoryProvisioningPackage.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ProvisioningEndpointsTheFactoryProvisioningPackage.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ProvisioningEndpointsTheFactoryProvisioningPackage.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ProvisioningEndpointsTheFactoryProvisioningPackage.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.8
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AListOfDownloadableFactoryToolVersions_ model constructor.
     * @property {module:model/AListOfDownloadableFactoryToolVersions_}
     */
    AListOfDownloadableFactoryToolVersions_: AListOfDownloadableFactoryToolVersions_,
    /**
     * The FactoryToolDownload model constructor.
     * @property {module:model/FactoryToolDownload}
     */
    FactoryToolDownload: FactoryToolDownload,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
