/**
 * Provisioning endpoints - production line certificates.
 * A producton line certificate is used to associate a specific installation of the Factory Tool with an mbed Cloud account.  The production line certificate is generated by the Factory Tool, and needs to be uploaded using these APIs. 
 *
 * OpenAPI spec version: 0.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AListOfProductionLineCertificates_', 'model/ProductionLineCertificate', 'model/Body1', 'model/Body'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AListOfProductionLineCertificates_'), require('../model/ProductionLineCertificate'), require('../model/Body1'), require('../model/Body'));
  } else {
    // Browser globals (root is window)
    if (!root.ProvisioningEndpointsProductionLineCertificates) {
      root.ProvisioningEndpointsProductionLineCertificates = {};
    }
    root.ProvisioningEndpointsProductionLineCertificates.DefaultApi = factory(root.ProvisioningEndpointsProductionLineCertificates.ApiClient, root.ProvisioningEndpointsProductionLineCertificates.AListOfProductionLineCertificates_, root.ProvisioningEndpointsProductionLineCertificates.ProductionLineCertificate, root.ProvisioningEndpointsProductionLineCertificates.Body1, root.ProvisioningEndpointsProductionLineCertificates.Body);
  }
}(this, function(ApiClient, AListOfProductionLineCertificates_, ProductionLineCertificate, Body1, Body) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.8
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v3ProductionLineCertificatesGet operation.
     * @callback module:api/DefaultApi~v3ProductionLineCertificatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AListOfProductionLineCertificates_} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of production line certificates associated with the account. 
     * @param {String} authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param {module:api/DefaultApi~v3ProductionLineCertificatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AListOfProductionLineCertificates_}
     */
    this.v3ProductionLineCertificatesGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling v3ProductionLineCertificatesGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = AListOfProductionLineCertificates_;

      return this.apiClient.callApi(
        '/v3/production-line-certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v3ProductionLineCertificatesMUUIDDelete operation.
     * @callback module:api/DefaultApi~v3ProductionLineCertificatesMUUIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductionLineCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates the production line certificate.  There is no way to reactivate it. 
     * @param {String} authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param {String} mUUID Certificate mUUID
     * @param {module:api/DefaultApi~v3ProductionLineCertificatesMUUIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductionLineCertificate}
     */
    this.v3ProductionLineCertificatesMUUIDDelete = function(authorization, mUUID, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling v3ProductionLineCertificatesMUUIDDelete";
      }

      // verify the required parameter 'mUUID' is set
      if (mUUID == undefined || mUUID == null) {
        throw "Missing the required parameter 'mUUID' when calling v3ProductionLineCertificatesMUUIDDelete";
      }


      var pathParams = {
        'mUUID': mUUID
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ProductionLineCertificate;

      return this.apiClient.callApi(
        '/v3/production-line-certificates/{mUUID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v3ProductionLineCertificatesMUUIDGet operation.
     * @callback module:api/DefaultApi~v3ProductionLineCertificatesMUUIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductionLineCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single production line certificate by its mUUID. 
     * @param {String} authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param {String} mUUID Certificate mUUID.
     * @param {module:api/DefaultApi~v3ProductionLineCertificatesMUUIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductionLineCertificate}
     */
    this.v3ProductionLineCertificatesMUUIDGet = function(authorization, mUUID, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling v3ProductionLineCertificatesMUUIDGet";
      }

      // verify the required parameter 'mUUID' is set
      if (mUUID == undefined || mUUID == null) {
        throw "Missing the required parameter 'mUUID' when calling v3ProductionLineCertificatesMUUIDGet";
      }


      var pathParams = {
        'mUUID': mUUID
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ProductionLineCertificate;

      return this.apiClient.callApi(
        '/v3/production-line-certificates/{mUUID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v3ProductionLineCertificatesMUUIDPut operation.
     * @callback module:api/DefaultApi~v3ProductionLineCertificatesMUUIDPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductionLineCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the comment on a production line certificate. 
     * @param {String} authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param {String} mUUID Certificate mUUID
     * @param {module:model/Body1} body 
     * @param {module:api/DefaultApi~v3ProductionLineCertificatesMUUIDPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductionLineCertificate}
     */
    this.v3ProductionLineCertificatesMUUIDPut = function(authorization, mUUID, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling v3ProductionLineCertificatesMUUIDPut";
      }

      // verify the required parameter 'mUUID' is set
      if (mUUID == undefined || mUUID == null) {
        throw "Missing the required parameter 'mUUID' when calling v3ProductionLineCertificatesMUUIDPut";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling v3ProductionLineCertificatesMUUIDPut";
      }


      var pathParams = {
        'mUUID': mUUID
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ProductionLineCertificate;

      return this.apiClient.callApi(
        '/v3/production-line-certificates/{mUUID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v3ProductionLineCertificatesPost operation.
     * @callback module:api/DefaultApi~v3ProductionLineCertificatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductionLineCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new production line certificate to the account. 
     * @param {String} authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param {module:model/Body} body 
     * @param {module:api/DefaultApi~v3ProductionLineCertificatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductionLineCertificate}
     */
    this.v3ProductionLineCertificatesPost = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling v3ProductionLineCertificatesPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling v3ProductionLineCertificatesPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = ProductionLineCertificate;

      return this.apiClient.callApi(
        '/v3/production-line-certificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
