/**
 * IAM Identities REST API
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.IamIdentitiesRestApi) {
      root.IamIdentitiesRestApi = {};
    }
    root.IamIdentitiesRestApi.CACertificateResp = factory(root.IamIdentitiesRestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The CACertificateResp model module.
   * @module model/CACertificateResp
   * @version v3
   */

  /**
   * Constructs a new <code>CACertificateResp</code>.
   * This object represents an CA Certificate in responses.
   * @alias module:model/CACertificateResp
   * @class
   * @param accountId {String} The UUID of the account.
   * @param service {module:model/CACertificateResp.ServiceEnum} Service name where the certificate is to be used.
   * @param _object {module:model/CACertificateResp.ObjectEnum} entity name: 'user', 'apikey', 'group', 'account' or error
   * @param subject {String} Subject of the certificate.
   * @param validity {String} Expiration time in UTC formatted as RFC3339.
   * @param etag {String} API resource entity version.
   * @param issuer {String} Issuer of the certificate.
   * @param certData {String} X509.v3 CA certificate in PEM or base64 encoded DER format.
   * @param id {String} Entity ID.
   * @param name {String} Certificate name.
   */
  var exports = function(accountId, service, _object, subject, validity, etag, issuer, certData, id, name) {
    var _this = this;

    _this['account_id'] = accountId;
    _this['service'] = service;

    _this['object'] = _object;
    _this['subject'] = subject;
    _this['validity'] = validity;
    _this['etag'] = etag;

    _this['issuer'] = issuer;
    _this['cert_data'] = certData;
    _this['id'] = id;
    _this['name'] = name;
  };

  /**
   * Constructs a <code>CACertificateResp</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CACertificateResp} obj Optional instance to populate.
   * @return {module:model/CACertificateResp} The populated <code>CACertificateResp</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('account_id')) {
        obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
      }
      if (data.hasOwnProperty('service')) {
        obj['service'] = ApiClient.convertToType(data['service'], 'String');
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
      }
      if (data.hasOwnProperty('object')) {
        obj['object'] = ApiClient.convertToType(data['object'], 'String');
      }
      if (data.hasOwnProperty('subject')) {
        obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
      }
      if (data.hasOwnProperty('validity')) {
        obj['validity'] = ApiClient.convertToType(data['validity'], 'String');
      }
      if (data.hasOwnProperty('etag')) {
        obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
      }
      if (data.hasOwnProperty('creationTimeMillis')) {
        obj['creationTimeMillis'] = ApiClient.convertToType(data['creationTimeMillis'], 'Integer');
      }
      if (data.hasOwnProperty('issuer')) {
        obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
      }
      if (data.hasOwnProperty('cert_data')) {
        obj['cert_data'] = ApiClient.convertToType(data['cert_data'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
    }
    return obj;
  }

  /**
   * The UUID of the account.
   * @member {String} account_id
   */
  exports.prototype['account_id'] = undefined;
  /**
   * Service name where the certificate is to be used.
   * @member {module:model/CACertificateResp.ServiceEnum} service
   */
  exports.prototype['service'] = undefined;
  /**
   * Creation UTC time RFC3339.
   * @member {String} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * entity name: 'user', 'apikey', 'group', 'account' or error
   * @member {module:model/CACertificateResp.ObjectEnum} object
   */
  exports.prototype['object'] = undefined;
  /**
   * Subject of the certificate.
   * @member {String} subject
   */
  exports.prototype['subject'] = undefined;
  /**
   * Expiration time in UTC formatted as RFC3339.
   * @member {String} validity
   */
  exports.prototype['validity'] = undefined;
  /**
   * API resource entity version.
   * @member {String} etag
   */
  exports.prototype['etag'] = undefined;
  /**
   * @member {Integer} creationTimeMillis
   */
  exports.prototype['creationTimeMillis'] = undefined;
  /**
   * Issuer of the certificate.
   * @member {String} issuer
   */
  exports.prototype['issuer'] = undefined;
  /**
   * X509.v3 CA certificate in PEM or base64 encoded DER format.
   * @member {String} cert_data
   */
  exports.prototype['cert_data'] = undefined;
  /**
   * Entity ID.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Certificate name.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;


  /**
   * Allowed values for the <code>service</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ServiceEnum = {
    /**
     * value: "lwm2m"
     * @const
     */
    "lwm2m": "lwm2m",
    /**
     * value: "bootstrap"
     * @const
     */
    "bootstrap": "bootstrap",
    /**
     * value: "provisioning"
     * @const
     */
    "provisioning": "provisioning"  };

  /**
   * Allowed values for the <code>object</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ObjectEnum = {
    /**
     * value: "user"
     * @const
     */
    "user": "user",
    /**
     * value: "apikey"
     * @const
     */
    "apikey": "apikey",
    /**
     * value: "group"
     * @const
     */
    "group": "group",
    /**
     * value: "account"
     * @const
     */
    "account": "account",
    /**
     * value: "account_template"
     * @const
     */
    "account_template": "account_template",
    /**
     * value: "ca_cert"
     * @const
     */
    "ca_cert": "ca_cert",
    /**
     * value: "list"
     * @const
     */
    "list": "list",
    /**
     * value: "error"
     * @const
     */
    "error": "error"  };


  return exports;
}));


