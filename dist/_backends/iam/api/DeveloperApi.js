/**
 * IAM Identities REST API
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiKeyInfoReq', 'model/ApiKeyInfoResp', 'model/ErrorResponse', 'model/ApiKeyInfoRespList', 'model/GroupSummaryList', 'model/AccountInfo', 'model/UserInfoResp', 'model/ApiKeyUpdateReq', 'model/UserInfoReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiKeyInfoReq'), require('../model/ApiKeyInfoResp'), require('../model/ErrorResponse'), require('../model/ApiKeyInfoRespList'), require('../model/GroupSummaryList'), require('../model/AccountInfo'), require('../model/UserInfoResp'), require('../model/ApiKeyUpdateReq'), require('../model/UserInfoReq'));
  } else {
    // Browser globals (root is window)
    if (!root.IamIdentitiesRestApi) {
      root.IamIdentitiesRestApi = {};
    }
    root.IamIdentitiesRestApi.DeveloperApi = factory(root.IamIdentitiesRestApi.ApiClient, root.IamIdentitiesRestApi.ApiKeyInfoReq, root.IamIdentitiesRestApi.ApiKeyInfoResp, root.IamIdentitiesRestApi.ErrorResponse, root.IamIdentitiesRestApi.ApiKeyInfoRespList, root.IamIdentitiesRestApi.GroupSummaryList, root.IamIdentitiesRestApi.AccountInfo, root.IamIdentitiesRestApi.UserInfoResp, root.IamIdentitiesRestApi.ApiKeyUpdateReq, root.IamIdentitiesRestApi.UserInfoReq);
  }
}(this, function(ApiClient, ApiKeyInfoReq, ApiKeyInfoResp, ErrorResponse, ApiKeyInfoRespList, GroupSummaryList, AccountInfo, UserInfoResp, ApiKeyUpdateReq, UserInfoReq) {
  'use strict';

  /**
   * Developer service.
   * @module api/DeveloperApi
   * @version v3
   */

  /**
   * Constructs a new DeveloperApi. 
   * @alias module:api/DeveloperApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createApiKey operation.
     * @callback module:api/DeveloperApi~createApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new API key.
     * An endpoint for creating a new API key.
     * @param {module:model/ApiKeyInfoReq} body The details of the API key to be created.
     * @param {module:api/DeveloperApi~createApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyInfoResp}
     */
    this.createApiKey = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createApiKey";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKeyInfoResp;

      return this.apiClient.callApi(
        '/v3/api-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiKey operation.
     * @callback module:api/DeveloperApi~deleteApiKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete API key.
     * An endpoint for deleting the API key.
     * @param {String} apiKey The ID of the API key to be deleted.
     * @param {module:api/DeveloperApi~deleteApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiKey = function(apiKey, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling deleteApiKey";
      }


      var pathParams = {
        'apiKey': apiKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3/api-keys/{apiKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllApiKeys operation.
     * @callback module:api/DeveloperApi~getAllApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyInfoRespList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all API keys
     * An endpoint for retrieving API keys in an array, optionally filtered by the owner.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.limit The number of results to return (2-1000), default is 50. (default to 50)
     * @param {String} opts.after The entity ID to fetch after the given one.
     * @param {String} opts.order The order of the records, ASC or DESC; by default ASC (default to ASC)
     * @param {String} opts.include Comma separated additional data to return. Currently supported: total_count
     * @param {String} opts.filter A filter for the query, for example filter&#x3D;owner%3Duuid.
     * @param {String} opts.owner Owner name filter.
     * @param {module:api/DeveloperApi~getAllApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyInfoRespList}
     */
    this.getAllApiKeys = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'order': opts['order'],
        'include': opts['include'],
        'filter': opts['filter'],
        'owner': opts['owner']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiKeyInfoRespList;

      return this.apiClient.callApi(
        '/v3/api-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllGroups operation.
     * @callback module:api/DeveloperApi~getAllGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupSummaryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all group information.
     * An endpoint for retrieving all group information.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.limit The number of results to return (2-1000), default is 50. (default to 50)
     * @param {String} opts.after The entity ID to fetch after the given one.
     * @param {String} opts.order The order of the records, ASC or DESC; by default ASC (default to ASC)
     * @param {String} opts.include Comma separated additional data to return. Currently supported: total_count
     * @param {module:api/DeveloperApi~getAllGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupSummaryList}
     */
    this.getAllGroups = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'order': opts['order'],
        'include': opts['include']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GroupSummaryList;

      return this.apiClient.callApi(
        '/v3/policy-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKey operation.
     * @callback module:api/DeveloperApi~getApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get API key details.
     * An endpoint for retrieving API key details.
     * @param {String} apiKey The ID of the API key to be retrieved.
     * @param {module:api/DeveloperApi~getApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyInfoResp}
     */
    this.getApiKey = function(apiKey, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling getApiKey";
      }


      var pathParams = {
        'apiKey': apiKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiKeyInfoResp;

      return this.apiClient.callApi(
        '/v3/api-keys/{apiKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyAccountInfo operation.
     * @callback module:api/DeveloperApi~getMyAccountInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account info.
     * Returns detailed information about the account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated additional data to return. Currently supported: limits
     * @param {module:api/DeveloperApi~getMyAccountInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountInfo}
     */
    this.getMyAccountInfo = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'include': opts['include']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountInfo;

      return this.apiClient.callApi(
        '/v3/accounts/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyApiKey operation.
     * @callback module:api/DeveloperApi~getMyApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get API key details.
     * An endpoint for retrieving API key details.
     * @param {module:api/DeveloperApi~getMyApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyInfoResp}
     */
    this.getMyApiKey = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiKeyInfoResp;

      return this.apiClient.callApi(
        '/v3/api-keys/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyUser operation.
     * @callback module:api/DeveloperApi~getMyUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details of the current user.
     * An endpoint for retrieving the details of the logged in user.
     * @param {module:api/DeveloperApi~getMyUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfoResp}
     */
    this.getMyUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserInfoResp;

      return this.apiClient.callApi(
        '/v3/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiKey operation.
     * @callback module:api/DeveloperApi~updateApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update API key details.
     * An endpoint for updating API key details.
     * @param {String} apiKey The ID of the API key to be updated.
     * @param {module:model/ApiKeyUpdateReq} body New API key attributes to be stored.
     * @param {module:api/DeveloperApi~updateApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyInfoResp}
     */
    this.updateApiKey = function(apiKey, body, callback) {
      var postBody = body;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling updateApiKey";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateApiKey";
      }


      var pathParams = {
        'apiKey': apiKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiKeyInfoResp;

      return this.apiClient.callApi(
        '/v3/api-keys/{apiKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMyApiKey operation.
     * @callback module:api/DeveloperApi~updateMyApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update API key details.
     * An endpoint for updating API key details.
     * @param {module:model/ApiKeyUpdateReq} body New API key attributes to be stored.
     * @param {module:api/DeveloperApi~updateMyApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyInfoResp}
     */
    this.updateMyApiKey = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateMyApiKey";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiKeyInfoResp;

      return this.apiClient.callApi(
        '/v3/api-keys/me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMyUser operation.
     * @callback module:api/DeveloperApi~updateMyUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user details.
     * An endpoint for updating the details of the logged in user.
     * @param {module:model/UserInfoReq} body New attributes for the logged in user.
     * @param {module:api/DeveloperApi~updateMyUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfoResp}
     */
    this.updateMyUser = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateMyUser";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserInfoResp;

      return this.apiClient.callApi(
        '/v3/users/me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
