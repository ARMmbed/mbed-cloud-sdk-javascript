/**
 * IAM Identities REST API
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UserInfoResp', 'model/UserInfoReq', 'model/ErrorResponse', 'model/PasswordRecoveryReq', 'model/AccountSignupResp', 'model/AccountEnrollmentResp', 'model/AccountEnrollmentReq', 'model/PasswordResetReq', 'model/AccountSignupReq', 'model/AccountSignupVerify'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UserInfoResp'), require('../model/UserInfoReq'), require('../model/ErrorResponse'), require('../model/PasswordRecoveryReq'), require('../model/AccountSignupResp'), require('../model/AccountEnrollmentResp'), require('../model/AccountEnrollmentReq'), require('../model/PasswordResetReq'), require('../model/AccountSignupReq'), require('../model/AccountSignupVerify'));
  } else {
    // Browser globals (root is window)
    if (!root.IamIdentitiesRestApi) {
      root.IamIdentitiesRestApi = {};
    }
    root.IamIdentitiesRestApi.DefaultApi = factory(root.IamIdentitiesRestApi.ApiClient, root.IamIdentitiesRestApi.UserInfoResp, root.IamIdentitiesRestApi.UserInfoReq, root.IamIdentitiesRestApi.ErrorResponse, root.IamIdentitiesRestApi.PasswordRecoveryReq, root.IamIdentitiesRestApi.AccountSignupResp, root.IamIdentitiesRestApi.AccountEnrollmentResp, root.IamIdentitiesRestApi.AccountEnrollmentReq, root.IamIdentitiesRestApi.PasswordResetReq, root.IamIdentitiesRestApi.AccountSignupReq, root.IamIdentitiesRestApi.AccountSignupVerify);
  }
}(this, function(ApiClient, UserInfoResp, UserInfoReq, ErrorResponse, PasswordRecoveryReq, AccountSignupResp, AccountEnrollmentResp, AccountEnrollmentReq, PasswordResetReq, AccountSignupReq, AccountSignupVerify) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version v3
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the activateUser operation.
     * @callback module:api/DefaultApi~activateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept invitation.
     * Accepting pending invitation and providing missing details.
     * @param {String} invitationId Invitation ID received in email.
     * @param {module:model/UserInfoReq} body Details of the user accepting the invitation.
     * @param {module:api/DefaultApi~activateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfoResp}
     */
    this.activateUser = function(invitationId, body, callback) {
      var postBody = body;

      // verify the required parameter 'invitationId' is set
      if (invitationId == undefined || invitationId == null) {
        throw "Missing the required parameter 'invitationId' when calling activateUser";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling activateUser";
      }


      var pathParams = {
        'invitation-id': invitationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserInfoResp;

      return this.apiClient.callApi(
        '/auth/invitations/{invitation-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applyPasswordRecovery operation.
     * @callback module:api/DefaultApi~applyPasswordRecoveryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply password recovery.
     * Applying password recovery by providing a secret hash code.
     * @param {module:model/PasswordRecoveryReq} body Hash received by email and new password.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xForwardedFor 
     * @param {module:api/DefaultApi~applyPasswordRecoveryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.applyPasswordRecovery = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling applyPasswordRecovery";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'X-Forwarded-For': opts['xForwardedFor']
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/recover', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvitedUser operation.
     * @callback module:api/DefaultApi~getInvitedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invited user.
     * Returns information about the user being invited.
     * @param {String} invitationId Invitation ID received in email.
     * @param {module:api/DefaultApi~getInvitedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfoResp}
     */
    this.getInvitedUser = function(invitationId, callback) {
      var postBody = null;

      // verify the required parameter 'invitationId' is set
      if (invitationId == undefined || invitationId == null) {
        throw "Missing the required parameter 'invitationId' when calling getInvitedUser";
      }


      var pathParams = {
        'invitation-id': invitationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserInfoResp;

      return this.apiClient.callApi(
        '/auth/invitations/{invitation-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfEnrollingUser operation.
     * @callback module:api/DefaultApi~getSelfEnrollingUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountSignupResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registering user.
     * Retrieving the details of a user to register.
     * @param {String} signupId ID received while signing up.
     * @param {module:api/DefaultApi~getSelfEnrollingUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountSignupResp}
     */
    this.getSelfEnrollingUser = function(signupId, callback) {
      var postBody = null;

      // verify the required parameter 'signupId' is set
      if (signupId == undefined || signupId == null) {
        throw "Missing the required parameter 'signupId' when calling getSelfEnrollingUser";
      }


      var pathParams = {
        'signup-id': signupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountSignupResp;

      return this.apiClient.callApi(
        '/auth/register/{signup-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerAccount operation.
     * @callback module:api/DefaultApi~registerAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountEnrollmentResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new account.
     * An endpoint for registering a new account.
     * @param {String} signupId ID received while signing up.
     * @param {module:model/AccountEnrollmentReq} body Details of the account to be created.
     * @param {module:api/DefaultApi~registerAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountEnrollmentResp}
     */
    this.registerAccount = function(signupId, body, callback) {
      var postBody = body;

      // verify the required parameter 'signupId' is set
      if (signupId == undefined || signupId == null) {
        throw "Missing the required parameter 'signupId' when calling registerAccount";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling registerAccount";
      }


      var pathParams = {
        'signup-id': signupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountEnrollmentResp;

      return this.apiClient.callApi(
        '/auth/register/{signup-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordRecovery operation.
     * @callback module:api/DefaultApi~requestPasswordRecoveryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request password recovery.
     * Requesting password recovery by email address.
     * @param {module:model/PasswordResetReq} body Email address of the user whose password needs to be recovered.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xForwardedFor 
     * @param {module:api/DefaultApi~requestPasswordRecoveryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.requestPasswordRecovery = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling requestPasswordRecovery";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'X-Forwarded-For': opts['xForwardedFor']
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the signup operation.
     * @callback module:api/DefaultApi~signupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountSignupResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign up for a new account.
     * Signing up for a new free tier account with email address.
     * @param {module:model/AccountSignupReq} body Email address of the user to be signed up.
     * @param {module:api/DefaultApi~signupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountSignupResp}
     */
    this.signup = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling signup";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountSignupResp;

      return this.apiClient.callApi(
        '/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifySelfEnrollment operation.
     * @callback module:api/DefaultApi~verifySelfEnrollmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify self-enrollment code and aliases.
     * Verifying whether the code received by email is valid. Optionally, it also verifies whether account with the given aliases exists.
     * @param {String} signupId ID received while signing up.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountSignupVerify} opts.body Verification code received by email and aliases to be checked.
     * @param {module:api/DefaultApi~verifySelfEnrollmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.verifySelfEnrollment = function(signupId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'signupId' is set
      if (signupId == undefined || signupId == null) {
        throw "Missing the required parameter 'signupId' when calling verifySelfEnrollment";
      }


      var pathParams = {
        'signup-id': signupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/register/{signup-id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
