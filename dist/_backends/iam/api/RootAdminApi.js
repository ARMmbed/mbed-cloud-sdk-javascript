/**
 * IAM Identities REST API
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountTemplateReq', 'model/AccountTemplateResp', 'model/ErrorResponse', 'model/AccountTemplateRespList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountTemplateReq'), require('../model/AccountTemplateResp'), require('../model/ErrorResponse'), require('../model/AccountTemplateRespList'));
  } else {
    // Browser globals (root is window)
    if (!root.IamIdentitiesRestApi) {
      root.IamIdentitiesRestApi = {};
    }
    root.IamIdentitiesRestApi.RootAdminApi = factory(root.IamIdentitiesRestApi.ApiClient, root.IamIdentitiesRestApi.AccountTemplateReq, root.IamIdentitiesRestApi.AccountTemplateResp, root.IamIdentitiesRestApi.ErrorResponse, root.IamIdentitiesRestApi.AccountTemplateRespList);
  }
}(this, function(ApiClient, AccountTemplateReq, AccountTemplateResp, ErrorResponse, AccountTemplateRespList) {
  'use strict';

  /**
   * RootAdmin service.
   * @module api/RootAdminApi
   * @version v3
   */

  /**
   * Constructs a new RootAdminApi. 
   * @alias module:api/RootAdminApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAccountTemplate operation.
     * @callback module:api/RootAdminApi~createAccountTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTemplateResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new account template.
     * Endpoint for creating a new account template.
     * @param {module:model/AccountTemplateReq} body Details of the account template to be created.
     * @param {module:api/RootAdminApi~createAccountTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTemplateResp}
     */
    this.createAccountTemplate = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createAccountTemplate";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountTemplateResp;

      return this.apiClient.callApi(
        '/admin/v3/account-templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountTemplate operation.
     * @callback module:api/RootAdminApi~deleteAccountTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete account template by ID.
     * Endpoint for deleting a account template by ID.
     * @param {String} templateId The ID of the account template to be deleted.
     * @param {module:api/RootAdminApi~deleteAccountTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountTemplate = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling deleteAccountTemplate";
      }


      var pathParams = {
        'template-id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/admin/v3/account-templates/{template-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountTemplate operation.
     * @callback module:api/RootAdminApi~getAccountTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTemplateResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account template by ID.
     * Endpoint for retrieving a account template by ID.
     * @param {String} templateId The ID of the account template to be retrieved.
     * @param {module:api/RootAdminApi~getAccountTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTemplateResp}
     */
    this.getAccountTemplate = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling getAccountTemplate";
      }


      var pathParams = {
        'template-id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountTemplateResp;

      return this.apiClient.callApi(
        '/admin/v3/account-templates/{template-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAccountTemplates operation.
     * @callback module:api/RootAdminApi~getAllAccountTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTemplateRespList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all account templates.
     * Endpoint for retrieving account templates in an array.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.limit The number of results to return (2-1000), default is 50. (default to 50)
     * @param {String} opts.after The entity id to fetch after it
     * @param {String} opts.order The order of the records, ASC or DESC. Default value is ASC (default to ASC)
     * @param {String} opts.include Comma separate additional data to return. Currently supported: total_count
     * @param {module:api/RootAdminApi~getAllAccountTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTemplateRespList}
     */
    this.getAllAccountTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'order': opts['order'],
        'include': opts['include']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountTemplateRespList;

      return this.apiClient.callApi(
        '/admin/v3/account-templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountTemplate operation.
     * @callback module:api/RootAdminApi~updateAccountTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTemplateResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing account template.
     * Endpoint for updating an existing account template.
     * @param {String} templateId The ID of the account template to be updated.
     * @param {module:model/AccountTemplateReq} body Details of the account template to be updated.
     * @param {module:api/RootAdminApi~updateAccountTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTemplateResp}
     */
    this.updateAccountTemplate = function(templateId, body, callback) {
      var postBody = body;

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling updateAccountTemplate";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateAccountTemplate";
      }


      var pathParams = {
        'template-id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountTemplateResp;

      return this.apiClient.callApi(
        '/admin/v3/account-templates/{template-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
