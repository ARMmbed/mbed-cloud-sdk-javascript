/**
 * IAM Identities REST API
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UserInfoResp', 'model/UserInfoReq', 'model/ErrorResponse', 'model/UserInfoRespList', 'model/AccountUpdateReq', 'model/AccountInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UserInfoResp'), require('../model/UserInfoReq'), require('../model/ErrorResponse'), require('../model/UserInfoRespList'), require('../model/AccountUpdateReq'), require('../model/AccountInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.IamIdentitiesRestApi) {
      root.IamIdentitiesRestApi = {};
    }
    root.IamIdentitiesRestApi.AccountAdminApi = factory(root.IamIdentitiesRestApi.ApiClient, root.IamIdentitiesRestApi.UserInfoResp, root.IamIdentitiesRestApi.UserInfoReq, root.IamIdentitiesRestApi.ErrorResponse, root.IamIdentitiesRestApi.UserInfoRespList, root.IamIdentitiesRestApi.AccountUpdateReq, root.IamIdentitiesRestApi.AccountInfo);
  }
}(this, function(ApiClient, UserInfoResp, UserInfoReq, ErrorResponse, UserInfoRespList, AccountUpdateReq, AccountInfo) {
  'use strict';

  /**
   * AccountAdmin service.
   * @module api/AccountAdminApi
   * @version v3
   */

  /**
   * Constructs a new AccountAdminApi. 
   * @alias module:api/AccountAdminApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/AccountAdminApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user.
     * An endpoint for creating a new user.
     * @param {module:model/UserInfoReq} body A user object with attributes.
     * @param {Object} opts Optional parameters
     * @param {String} opts.action Action, either &#39;create&#39; or &#39;invite&#39;. (default to create)
     * @param {module:api/AccountAdminApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfoResp}
     */
    this.createUser = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createUser";
      }


      var pathParams = {
      };
      var queryParams = {
        'action': opts['action']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserInfoResp;

      return this.apiClient.callApi(
        '/v3/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/AccountAdminApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user.
     * An endpoint for deleting a user.
     * @param {String} userId The ID of the user to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} opts.force Flag indicating that user is forced to be deleted.
     * @param {module:api/AccountAdminApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUser = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling deleteUser";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3/users/{user-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsers operation.
     * @callback module:api/AccountAdminApi~getAllUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfoRespList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of all users.
     * An endpoint for retrieving the details of all users.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.limit The number of results to return (2-1000), default is 50. (default to 50)
     * @param {String} opts.after The entity ID to fetch after the given one.
     * @param {String} opts.order The order of the records, ASC or DESC; by default ASC (default to ASC)
     * @param {String} opts.include Comma separated additional data to return. Currently supported: total_count
     * @param {String} opts.filter Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset.
     * @param {module:api/AccountAdminApi~getAllUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfoRespList}
     */
    this.getAllUsers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'order': opts['order'],
        'include': opts['include'],
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserInfoRespList;

      return this.apiClient.callApi(
        '/v3/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/AccountAdminApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details of a user.
     * An endpoint for retrieving the details of a user.
     * @param {String} userId The ID or name of the user whose details are retrieved.
     * @param {module:api/AccountAdminApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfoResp}
     */
    this.getUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getUser";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserInfoResp;

      return this.apiClient.callApi(
        '/v3/users/{user-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMyAccount operation.
     * @callback module:api/AccountAdminApi~updateMyAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates attributes of the account.
     * An endpoint for updating the account.
     * @param {module:model/AccountUpdateReq} body Details of the account to be updated.
     * @param {module:api/AccountAdminApi~updateMyAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountInfo}
     */
    this.updateMyAccount = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateMyAccount";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountInfo;

      return this.apiClient.callApi(
        '/v3/accounts/me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/AccountAdminApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user details.
     * An endpoint for updating user details.
     * @param {String} userId The ID of the user whose details are updated.
     * @param {module:model/UserInfoReq} body A user object with attributes.
     * @param {module:api/AccountAdminApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfoResp}
     */
    this.updateUser = function(userId, body, callback) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling updateUser";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateUser";
      }


      var pathParams = {
        'user-id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserInfoResp;

      return this.apiClient.callApi(
        '/v3/users/{user-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
