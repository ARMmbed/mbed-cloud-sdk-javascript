/**
 * Provisioning endpoints - developer certificates.
 * A developer certificate is used during development to allow quick association of the device with the mbed Cloud account of the developer. It is used instead of the Factory Tool.  The developer should generate a key-pair (NIST P-256 Elliptic Curve), add the public key to the mbed Cloud account using these APIs, and use the private key on the device (typically in a file named identity_dev_security.c). This creates an association between the device and the cloud.  Only one developer certificate per account is allowed.  As an example, a developer certificate can be created using OpenSSL as follows:  ``` openssl ecparam -out key.pem -name prime256v1 -genkey openssl ec -text -in key.pem -pubout ```  The output is:  ``` read EC key Private-Key: (256 bit) priv:     4e:50:25:1c:c0:70:29:05:dc:1d:7b:58:ba:a1:27:     c3:6f:aa:92:22:ca:0f:f1:af:74:cb:15:a4:cb:36:     98:3f pub:     04:35:54:40:80:f8:fb:45:ad:8a:fc:1a:9e:8c:88:     58:fa:84:91:ca:51:d2:09:d5:7b:35:9f:72:10:31:     a2:7c:d6:18:8b:49:d9:56:91:f0:99:b7:a9:a0:c6:     c1:5b:b8:d3:24:a8:cd:0c:76:9f:f0:c8:41:b0:a3:     dd:d3:2c:88:e1 ASN1 OID: prime256v1 NIST CURVE: P-256 writing EC key -----BEGIN PUBLIC KEY----- MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAENVRAgPj7Ra2K/BqejIhY+oSRylHS CdV7NZ9yEDGifNYYi0nZVpHwmbepoMbBW7jTJKjNDHaf8MhBsKPd0yyI4Q== -----END PUBLIC KEY----- ```  The bytes under \"priv\" are the 32 private key bytes. They should be placed on the device (in the identity_dev_security.c file), as a byte array.  The text starting with \"BEGIN PUBLIC KEY\" is the public key in PEM format, which should be uploaded using the POST API.  Another example, using Python:  ``` from ecdsa import SigningKey, NIST256p private_key = SigningKey.generate(curve=NIST256p) public_key = private_key.get_verifying_key() print \"Public key:\" print public_key.to_pem() bytes = bytearray(private_key.to_string()) for byte in bytes:   print hex(byte) + \",\", ``` 
 *
 * OpenAPI spec version: 0.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeveloperCertificate', 'model/Body'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeveloperCertificate'), require('../model/Body'));
  } else {
    // Browser globals (root is window)
    if (!root.ProvisioningEndpointsDeveloperCertificates) {
      root.ProvisioningEndpointsDeveloperCertificates = {};
    }
    root.ProvisioningEndpointsDeveloperCertificates.DefaultApi = factory(root.ProvisioningEndpointsDeveloperCertificates.ApiClient, root.ProvisioningEndpointsDeveloperCertificates.DeveloperCertificate, root.ProvisioningEndpointsDeveloperCertificates.Body);
  }
}(this, function(ApiClient, DeveloperCertificate, Body) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.8
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v3DeveloperCertificateDelete operation.
     * @callback module:api/DefaultApi~v3DeveloperCertificateDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the account&#39;s developer certificate (only one per account allowed).
     * @param {String} authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param {module:api/DefaultApi~v3DeveloperCertificateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v3DeveloperCertificateDelete = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling v3DeveloperCertificateDelete";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3/developer-certificate', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v3DeveloperCertificateGet operation.
     * @callback module:api/DefaultApi~v3DeveloperCertificateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeveloperCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the developer certificate of the account.
     * @param {String} authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param {module:api/DefaultApi~v3DeveloperCertificateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeveloperCertificate}
     */
    this.v3DeveloperCertificateGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling v3DeveloperCertificateGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeveloperCertificate;

      return this.apiClient.callApi(
        '/v3/developer-certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v3DeveloperCertificatePost operation.
     * @callback module:api/DefaultApi~v3DeveloperCertificatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeveloperCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a developer certificate to the account (only one per account allowed).
     * @param {String} authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param {module:model/Body} body 
     * @param {module:api/DefaultApi~v3DeveloperCertificatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeveloperCertificate}
     */
    this.v3DeveloperCertificatePost = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling v3DeveloperCertificatePost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling v3DeveloperCertificatePost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = DeveloperCertificate;

      return this.apiClient.callApi(
        '/v3/developer-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
