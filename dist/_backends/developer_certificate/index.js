/**
 * Provisioning endpoints - developer certificates.
 * A developer certificate is used during development to allow quick association of the device with the mbed Cloud account of the developer. It is used instead of the Factory Tool.  The developer should generate a key-pair (NIST P-256 Elliptic Curve), add the public key to the mbed Cloud account using these APIs, and use the private key on the device (typically in a file named identity_dev_security.c). This creates an association between the device and the cloud.  Only one developer certificate per account is allowed.  As an example, a developer certificate can be created using OpenSSL as follows:  ``` openssl ecparam -out key.pem -name prime256v1 -genkey openssl ec -text -in key.pem -pubout ```  The output is:  ``` read EC key Private-Key: (256 bit) priv:     4e:50:25:1c:c0:70:29:05:dc:1d:7b:58:ba:a1:27:     c3:6f:aa:92:22:ca:0f:f1:af:74:cb:15:a4:cb:36:     98:3f pub:     04:35:54:40:80:f8:fb:45:ad:8a:fc:1a:9e:8c:88:     58:fa:84:91:ca:51:d2:09:d5:7b:35:9f:72:10:31:     a2:7c:d6:18:8b:49:d9:56:91:f0:99:b7:a9:a0:c6:     c1:5b:b8:d3:24:a8:cd:0c:76:9f:f0:c8:41:b0:a3:     dd:d3:2c:88:e1 ASN1 OID: prime256v1 NIST CURVE: P-256 writing EC key -----BEGIN PUBLIC KEY----- MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAENVRAgPj7Ra2K/BqejIhY+oSRylHS CdV7NZ9yEDGifNYYi0nZVpHwmbepoMbBW7jTJKjNDHaf8MhBsKPd0yyI4Q== -----END PUBLIC KEY----- ```  The bytes under \"priv\" are the 32 private key bytes. They should be placed on the device (in the identity_dev_security.c file), as a byte array.  The text starting with \"BEGIN PUBLIC KEY\" is the public key in PEM format, which should be uploaded using the POST API.  Another example, using Python:  ``` from ecdsa import SigningKey, NIST256p private_key = SigningKey.generate(curve=NIST256p) public_key = private_key.get_verifying_key() print \"Public key:\" print public_key.to_pem() bytes = bytearray(private_key.to_string()) for byte in bytes:   print hex(byte) + \",\", ``` 
 *
 * OpenAPI spec version: 0.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/DeveloperCertificate', 'api/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Body'), require('./model/DeveloperCertificate'), require('./api/DefaultApi'));
  }
}(function(ApiClient, Body, DeveloperCertificate, DefaultApi) {
  'use strict';

  /**
   * A_developer_certificate_is_used_during_development_to_allow_quick_association_of_the_device_with_thembed_Cloud_account_of_the_developer__It_is_used_instead_of_the_Factory_Tool_The_developer_should_generate_a_key_pair__NIST_P_256_Elliptic_Curve_add_the_public_keyto_the_mbed_Cloud_account_using_these_APIs_and_use_the_private_key_on_the_device__typicallyin_a_file_named_identity_dev_security_c__This_creates_an_association_between_the_device_and_thecloud_Only_one_developer_certificate_per_account_is_allowed_As_an_example_a_developer_certificate_can_be_created_using_OpenSSL_as_followsopenssl_ecparam__out_key_pem__name_prime256v1__genkeyopenssl_ec__text__in_key_pem__puboutThe_output_isread_EC_keyPrivate_Key__256_bitpriv____4e50251cc0702905dc1d7b58baa127____c36faa9222ca0ff1af74cb15a4cb36____983fpub____0435544080f8fb45ad8afc1a9e8c88____58fa8491ca51d209d57b359f721031____a27cd6188b49d95691f099b7a9a0c6____c15bb8d324a8cd0c769ff0c841b0a3____ddd32c88e1ASN1_OID_prime256v1NIST_CURVE_P_256writing_EC_key_____BEGIN_PUBLIC_KEY_____MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAENVRAgPj7Ra2KBqejIhYoSRylHSCdV7NZ9yEDGifNYYi0nZVpHwmbepoMbBW7jTJKjNDHaf8MhBsKPd0yyI4Q_____END_PUBLIC_KEY_____The_bytes_under_priv_are_the_32_private_key_bytes__They_should_be_placed_on_the_device__in_the_identity_dev_security_c_fileas_a_byte_array_The_text_starting_with_BEGIN_PUBLIC_KEY_is_the_public_key_in_PEM_format_which_should_be_uploaded_using_the_POST_API_Another_example_using_Pythonfrom_ecdsa_import_SigningKey_NIST256pprivate_key__SigningKey_generate_curveNIST256ppublic_key__private_key_get_verifying_key_print_Public_keyprint_public_key_to_pem_bytes__bytearray_private_key_to_string_for_byte_in_bytes__print_hex_byte__.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ProvisioningEndpointsDeveloperCertificates = require('index'); // See note below*.
   * var xxxSvc = new ProvisioningEndpointsDeveloperCertificates.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ProvisioningEndpointsDeveloperCertificates.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ProvisioningEndpointsDeveloperCertificates.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ProvisioningEndpointsDeveloperCertificates.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.8
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Body model constructor.
     * @property {module:model/Body}
     */
    Body: Body,
    /**
     * The DeveloperCertificate model constructor.
     * @property {module:model/DeveloperCertificate}
     */
    DeveloperCertificate: DeveloperCertificate,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
