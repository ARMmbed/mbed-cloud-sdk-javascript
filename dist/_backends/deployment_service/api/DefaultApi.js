/**
 * Deployment Service API
 * This is the API Documentation for the mbed deployment service which is part of the update service.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UpdateCampaignSerializer', 'model/UpdateCampaignStatusSerializer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UpdateCampaignSerializer'), require('../model/UpdateCampaignStatusSerializer'));
  } else {
    // Browser globals (root is window)
    if (!root.DeploymentServiceApi) {
      root.DeploymentServiceApi = {};
    }
    root.DeploymentServiceApi.DefaultApi = factory(root.DeploymentServiceApi.ApiClient, root.DeploymentServiceApi.UpdateCampaignSerializer, root.DeploymentServiceApi.UpdateCampaignStatusSerializer);
  }
}(this, function(ApiClient, UpdateCampaignSerializer, UpdateCampaignStatusSerializer) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.1
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deployInfoGET operation.
     * @callback module:api/DefaultApi~deployInfoGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
     * @param {module:api/DefaultApi~deployInfoGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deployInfoGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v3/ds_deploy_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignCreate operation.
     * @callback module:api/DefaultApi~updateCampaignCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCampaignSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
     * @param {String} name A name for this campaign
     * @param {Object} opts Optional parameters
     * @param {String} opts.campaignId DEPRECATED: The ID of the campaign
     * @param {String} opts.description An optional description of the campaign
     * @param {String} opts.deviceFilter The filter for the devices the campaign will target
     * @param {Date} opts.finished The timestamp when the update campaign finished
     * @param {String} opts._object The API resource entity
     * @param {String} opts.rootManifestId 
     * @param {module:model/String} opts.state The state of the campaign
     * @param {Date} opts.when The timestamp at which update campaign scheduled to start
     * @param {module:api/DefaultApi~updateCampaignCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCampaignSerializer}
     */
    this.updateCampaignCreate = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling updateCampaignCreate";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'campaign_id': opts['campaignId'],
        'description': opts['description'],
        'device_filter': opts['deviceFilter'],
        'finished': opts['finished'],
        'name': name,
        'object': opts['_object'],
        'root_manifest_id': opts['rootManifestId'],
        'state': opts['state'],
        'when': opts['when']
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = UpdateCampaignSerializer;

      return this.apiClient.callApi(
        '/v3/update-campaigns/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignDestroy operation.
     * @callback module:api/DefaultApi~updateCampaignDestroyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCampaignSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
     * @param {String} campaignId The ID of the update campaign
     * @param {Object} opts Optional parameters
     * @param {String} opts.updatingRequestId 
     * @param {String} opts.updatingIpAddress 
     * @param {String} opts.createdAt 
     * @param {String} opts.updatedAt 
     * @param {String} opts.attempts 
     * @param {String} opts.description 
     * @param {String} opts.deviceFilter 
     * @param {String} opts.etag 
     * @param {String} opts.finished 
     * @param {String} opts.name 
     * @param {String} opts._object 
     * @param {String} opts.rootManifestId 
     * @param {module:model/String} opts.state 
     * @param {String} opts.when 
     * @param {module:api/DefaultApi~updateCampaignDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCampaignSerializer}
     */
    this.updateCampaignDestroy = function(campaignId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId == undefined || campaignId == null) {
        throw "Missing the required parameter 'campaignId' when calling updateCampaignDestroy";
      }


      var pathParams = {
        'campaign_id': campaignId
      };
      var queryParams = {
        'updating_request_id': opts['updatingRequestId'],
        'updating_ip_address': opts['updatingIpAddress'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'attempts': opts['attempts'],
        'description': opts['description'],
        'device_filter': opts['deviceFilter'],
        'etag': opts['etag'],
        'finished': opts['finished'],
        'name': opts['name'],
        'object': opts['_object'],
        'root_manifest_id': opts['rootManifestId'],
        'state': opts['state'],
        'when': opts['when']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = UpdateCampaignSerializer;

      return this.apiClient.callApi(
        '/v3/update-campaigns/{campaign_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignList operation.
     * @callback module:api/DefaultApi~updateCampaignListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateCampaignSerializer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.updatingRequestId 
     * @param {String} opts.updatingIpAddress 
     * @param {String} opts.createdAt 
     * @param {String} opts.updatedAt 
     * @param {String} opts.attempts 
     * @param {String} opts.campaignId 
     * @param {String} opts.description 
     * @param {String} opts.deviceFilter 
     * @param {String} opts.etag 
     * @param {String} opts.finished 
     * @param {String} opts.name 
     * @param {String} opts._object 
     * @param {String} opts.rootManifestId 
     * @param {module:model/String} opts.state 
     * @param {String} opts.when 
     * @param {Integer} opts.page The page number to retrieve. If not given, then defaults to first page.
     * @param {String} opts.rootManifestUrl The firmware catalog URL for the manifest that will be sent to the device as part of the campaign
     * @param {module:api/DefaultApi~updateCampaignListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateCampaignSerializer>}
     */
    this.updateCampaignList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'updating_request_id': opts['updatingRequestId'],
        'updating_ip_address': opts['updatingIpAddress'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'attempts': opts['attempts'],
        'campaign_id': opts['campaignId'],
        'description': opts['description'],
        'device_filter': opts['deviceFilter'],
        'etag': opts['etag'],
        'finished': opts['finished'],
        'name': opts['name'],
        'object': opts['_object'],
        'root_manifest_id': opts['rootManifestId'],
        'state': opts['state'],
        'when': opts['when'],
        'page': opts['page'],
        'root_manifest_url': opts['rootManifestUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [UpdateCampaignSerializer];

      return this.apiClient.callApi(
        '/v3/update-campaigns/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignPartialUpdate operation.
     * @callback module:api/DefaultApi~updateCampaignPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCampaignSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.campaignId DEPRECATED: The ID of the campaign
     * @param {String} opts.description An optional description of the campaign
     * @param {String} opts.deviceFilter The filter for the devices the campaign will target
     * @param {Date} opts.finished The timestamp when the update campaign finished
     * @param {String} opts.name A name for this campaign
     * @param {String} opts._object The API resource entity
     * @param {String} opts.rootManifestId 
     * @param {module:model/String} opts.state The state of the campaign
     * @param {Date} opts.when The timestamp at which update campaign scheduled to start
     * @param {module:api/DefaultApi~updateCampaignPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCampaignSerializer}
     */
    this.updateCampaignPartialUpdate = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'campaign_id': opts['campaignId'],
        'description': opts['description'],
        'device_filter': opts['deviceFilter'],
        'finished': opts['finished'],
        'name': opts['name'],
        'object': opts['_object'],
        'root_manifest_id': opts['rootManifestId'],
        'state': opts['state'],
        'when': opts['when']
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = UpdateCampaignSerializer;

      return this.apiClient.callApi(
        '/v3/update-campaigns/{campaign_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignRetrieve operation.
     * @callback module:api/DefaultApi~updateCampaignRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCampaignSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
     * @param {String} campaignId The ID of the campaign
     * @param {Object} opts Optional parameters
     * @param {String} opts.updatingRequestId 
     * @param {String} opts.updatingIpAddress 
     * @param {String} opts.createdAt 
     * @param {String} opts.updatedAt 
     * @param {String} opts.attempts 
     * @param {String} opts.description 
     * @param {String} opts.deviceFilter 
     * @param {String} opts.etag 
     * @param {String} opts.finished 
     * @param {String} opts.name 
     * @param {String} opts._object 
     * @param {String} opts.rootManifestId 
     * @param {module:model/String} opts.state 
     * @param {String} opts.when 
     * @param {String} opts.rootManifestUrl The firmware catalog URL for the manifest that will be sent to the device as part of the campaign
     * @param {module:api/DefaultApi~updateCampaignRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCampaignSerializer}
     */
    this.updateCampaignRetrieve = function(campaignId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId == undefined || campaignId == null) {
        throw "Missing the required parameter 'campaignId' when calling updateCampaignRetrieve";
      }


      var pathParams = {
      };
      var queryParams = {
        'updating_request_id': opts['updatingRequestId'],
        'updating_ip_address': opts['updatingIpAddress'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'attempts': opts['attempts'],
        'description': opts['description'],
        'device_filter': opts['deviceFilter'],
        'etag': opts['etag'],
        'finished': opts['finished'],
        'name': opts['name'],
        'object': opts['_object'],
        'root_manifest_id': opts['rootManifestId'],
        'state': opts['state'],
        'when': opts['when'],
        'root_manifest_url': opts['rootManifestUrl']
      };
      var headerParams = {
      };
      var formParams = {
        'campaign_id': campaignId
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = UpdateCampaignSerializer;

      return this.apiClient.callApi(
        '/v3/update-campaigns/{campaign_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignStatus operation.
     * @callback module:api/DefaultApi~updateCampaignStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCampaignStatusSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
     * @param {String} campaignId The ID of the update campaign
     * @param {Object} opts Optional parameters
     * @param {String} opts.updatingRequestId 
     * @param {String} opts.updatingIpAddress 
     * @param {String} opts.createdAt 
     * @param {String} opts.updatedAt 
     * @param {String} opts.attempts 
     * @param {String} opts.description 
     * @param {String} opts.deviceFilter 
     * @param {String} opts.etag 
     * @param {String} opts.finished 
     * @param {String} opts.name 
     * @param {String} opts._object 
     * @param {String} opts.rootManifestId 
     * @param {module:model/String} opts.state 
     * @param {String} opts.when 
     * @param {module:api/DefaultApi~updateCampaignStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCampaignStatusSerializer}
     */
    this.updateCampaignStatus = function(campaignId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId == undefined || campaignId == null) {
        throw "Missing the required parameter 'campaignId' when calling updateCampaignStatus";
      }


      var pathParams = {
        'campaign_id': campaignId
      };
      var queryParams = {
        'updating_request_id': opts['updatingRequestId'],
        'updating_ip_address': opts['updatingIpAddress'],
        'created_at': opts['createdAt'],
        'updated_at': opts['updatedAt'],
        'attempts': opts['attempts'],
        'description': opts['description'],
        'device_filter': opts['deviceFilter'],
        'etag': opts['etag'],
        'finished': opts['finished'],
        'name': opts['name'],
        'object': opts['_object'],
        'root_manifest_id': opts['rootManifestId'],
        'state': opts['state'],
        'when': opts['when']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = UpdateCampaignStatusSerializer;

      return this.apiClient.callApi(
        '/v3/update-campaigns/{campaign_id}/status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignUpdate operation.
     * @callback module:api/DefaultApi~updateCampaignUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCampaignSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
     * @param {String} name A name for this campaign
     * @param {Object} opts Optional parameters
     * @param {String} opts.campaignId DEPRECATED: The ID of the campaign
     * @param {String} opts.description An optional description of the campaign
     * @param {String} opts.deviceFilter The filter for the devices the campaign will target
     * @param {Date} opts.finished The timestamp when the update campaign finished
     * @param {String} opts._object The API resource entity
     * @param {String} opts.rootManifestId 
     * @param {module:model/String} opts.state The state of the campaign
     * @param {Date} opts.when The timestamp at which update campaign scheduled to start
     * @param {module:api/DefaultApi~updateCampaignUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCampaignSerializer}
     */
    this.updateCampaignUpdate = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling updateCampaignUpdate";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'campaign_id': opts['campaignId'],
        'description': opts['description'],
        'device_filter': opts['deviceFilter'],
        'finished': opts['finished'],
        'name': name,
        'object': opts['_object'],
        'root_manifest_id': opts['rootManifestId'],
        'state': opts['state'],
        'when': opts['when']
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = UpdateCampaignSerializer;

      return this.apiClient.callApi(
        '/v3/update-campaigns/{campaign_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
