/**
 * mbed Cloud Connect REST API
 * mbed Cloud Connect REST API allows web applications to communicate with devices.
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncID', 'model/PresubscriptionArray'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncID'), require('../model/PresubscriptionArray'));
  } else {
    // Browser globals (root is window)
    if (!root.MbedCloudConnectRestApi) {
      root.MbedCloudConnectRestApi = {};
    }
    root.MbedCloudConnectRestApi.SubscriptionsApi = factory(root.MbedCloudConnectRestApi.ApiClient, root.MbedCloudConnectRestApi.AsyncID, root.MbedCloudConnectRestApi.PresubscriptionArray);
  }
}(this, function(ApiClient, AsyncID, PresubscriptionArray) {
  'use strict';

  /**
   * Subscriptions service.
   * @module api/SubscriptionsApi
   * @version 2
   */

  /**
   * Constructs a new SubscriptionsApi. 
   * @alias module:api/SubscriptionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v2SubscriptionsDelete operation.
     * @callback module:api/SubscriptionsApi~v2SubscriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all subscriptions
     * Removes subscriptions from every endpoint and resource. Note that this does not remove pre-subscriptions.
     * @param {module:api/SubscriptionsApi~v2SubscriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v2SubscriptionsDelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/subscriptions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SubscriptionsEndpointNameDelete operation.
     * @callback module:api/SubscriptionsApi~v2SubscriptionsEndpointNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete subscriptions from an endpoint
     * Deletes all resource subscriptions in a single endpoint.
     * @param {String} endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here. 
     * @param {module:api/SubscriptionsApi~v2SubscriptionsEndpointNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v2SubscriptionsEndpointNameDelete = function(endpointName, callback) {
      var postBody = null;

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2SubscriptionsEndpointNameDelete";
      }


      var pathParams = {
        'endpointName': endpointName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/subscriptions/{endpointName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SubscriptionsEndpointNameGet operation.
     * @callback module:api/SubscriptionsApi~v2SubscriptionsEndpointNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read endpoints subscriptions
     * Lists all subscribed resources from a single endpoint.
     * @param {String} endpointName A unique identifier for the endpoint. Note that endpoint name must be an exact match. You cannot use wildcards here. 
     * @param {module:api/SubscriptionsApi~v2SubscriptionsEndpointNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v2SubscriptionsEndpointNameGet = function(endpointName, callback) {
      var postBody = null;

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2SubscriptionsEndpointNameGet";
      }


      var pathParams = {
        'endpointName': endpointName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['text/uri-list'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/subscriptions/{endpointName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SubscriptionsEndpointNameResourcePathDelete operation.
     * @callback module:api/SubscriptionsApi~v2SubscriptionsEndpointNameResourcePathDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a subscription
     * To remove an existing subscription from a resource path. 
     * @param {String} endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here. 
     * @param {String} resourcePath Resource&#39;s url. 
     * @param {module:api/SubscriptionsApi~v2SubscriptionsEndpointNameResourcePathDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v2SubscriptionsEndpointNameResourcePathDelete = function(endpointName, resourcePath, callback) {
      var postBody = null;

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2SubscriptionsEndpointNameResourcePathDelete";
      }

      // verify the required parameter 'resourcePath' is set
      if (resourcePath == undefined || resourcePath == null) {
        throw "Missing the required parameter 'resourcePath' when calling v2SubscriptionsEndpointNameResourcePathDelete";
      }


      var pathParams = {
        'endpointName': endpointName,
        'resourcePath': resourcePath
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/subscriptions/{endpointName}/{resourcePath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SubscriptionsEndpointNameResourcePathGet operation.
     * @callback module:api/SubscriptionsApi~v2SubscriptionsEndpointNameResourcePathGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read subscription status
     * @param {String} endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here. 
     * @param {String} resourcePath Resource&#39;s url. 
     * @param {module:api/SubscriptionsApi~v2SubscriptionsEndpointNameResourcePathGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v2SubscriptionsEndpointNameResourcePathGet = function(endpointName, resourcePath, callback) {
      var postBody = null;

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2SubscriptionsEndpointNameResourcePathGet";
      }

      // verify the required parameter 'resourcePath' is set
      if (resourcePath == undefined || resourcePath == null) {
        throw "Missing the required parameter 'resourcePath' when calling v2SubscriptionsEndpointNameResourcePathGet";
      }


      var pathParams = {
        'endpointName': endpointName,
        'resourcePath': resourcePath
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/subscriptions/{endpointName}/{resourcePath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SubscriptionsEndpointNameResourcePathPut operation.
     * @callback module:api/SubscriptionsApi~v2SubscriptionsEndpointNameResourcePathPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to a resource path
     * The mbed Cloud Connect eventing model consists of observable resources.  This means that endpoints can deliver updated resource content, periodically or with a more sophisticated solution-dependent logic. The OMA LWM2M resource model including objects, object instances, resources and resource instances is also supported.  Applications can subscribe to objects, object instances or individual resources to make the device to provide value change notifications to mbed Cloud Connect service. An application needs to call a /notification/callback method to get mbed Cloud Connect to push a notification of the resource changes. You can also use /subscriptions to set a pre-subscription. 
     * @param {String} endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here. 
     * @param {String} resourcePath Resource&#39;s URL. 
     * @param {module:api/SubscriptionsApi~v2SubscriptionsEndpointNameResourcePathPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v2SubscriptionsEndpointNameResourcePathPut = function(endpointName, resourcePath, callback) {
      var postBody = null;

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2SubscriptionsEndpointNameResourcePathPut";
      }

      // verify the required parameter 'resourcePath' is set
      if (resourcePath == undefined || resourcePath == null) {
        throw "Missing the required parameter 'resourcePath' when calling v2SubscriptionsEndpointNameResourcePathPut";
      }


      var pathParams = {
        'endpointName': endpointName,
        'resourcePath': resourcePath
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/subscriptions/{endpointName}/{resourcePath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SubscriptionsGet operation.
     * @callback module:api/SubscriptionsApi~v2SubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pre-subscriptions
     * You can retrieve the pre-subscription data by using a GET operation. The server returns with the same JSON structure as described above. If there are no pre-subscribed resources, it returns with an empty array. 
     * @param {module:api/SubscriptionsApi~v2SubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v2SubscriptionsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SubscriptionsPut operation.
     * @callback module:api/SubscriptionsApi~v2SubscriptionsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set pre-subscriptions
     * Pre-subscription is a set of rules and patterns put by the application. When an endpoint registers and its name, type and registered resources match the pre-subscription data, mbed Cloud Connect sends subscription requests to the device automatically. The pattern may include the endpoint name (optionally having an \\* character at the end), endpoint type, a list of resources or expressions with an \\* character at the end. The pre-subscription concerns all the endpoints that are already registered and the server sends subscription requests to the devices immediately when the patterns are set. There is only one pre-subscribe array, so changing the pre-subscription data removes all the previous subscriptions. To remove the pre-subscription data, put an empty array as a rule. 
     * @param {module:model/PresubscriptionArray} presubsription Array of pre-subscriptions.
     * @param {module:api/SubscriptionsApi~v2SubscriptionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.v2SubscriptionsPut = function(presubsription, callback) {
      var postBody = presubsription;

      // verify the required parameter 'presubsription' is set
      if (presubsription == undefined || presubsription == null) {
        throw "Missing the required parameter 'presubsription' when calling v2SubscriptionsPut";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/subscriptions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
