/**
 * mbed Cloud Connect REST API
 * mbed Cloud Connect REST API allows web applications to communicate with devices.
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncID'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncID'));
  } else {
    // Browser globals (root is window)
    if (!root.MbedCloudConnectRestApi) {
      root.MbedCloudConnectRestApi = {};
    }
    root.MbedCloudConnectRestApi.ResourcesApi = factory(root.MbedCloudConnectRestApi.ApiClient, root.MbedCloudConnectRestApi.AsyncID);
  }
}(this, function(ApiClient, AsyncID) {
  'use strict';

  /**
   * Resources service.
   * @module api/ResourcesApi
   * @version 2
   */

  /**
   * Constructs a new ResourcesApi. 
   * @alias module:api/ResourcesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v2EndpointsEndpointNameResourcePathDelete operation.
     * @callback module:api/ResourcesApi~v2EndpointsEndpointNameResourcePathDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a resource
     * A request to delete a resource must be handled by both mbed Cloud Client and mbed Cloud Connect. The resource is not deleted from mbed Cloud Connect until the delete  is handled by mbed Cloud Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect. 
     * @param {String} endpointName A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. 
     * @param {String} resourcePath Resource&#39;s url. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noResp **Non-confirmable requests**   All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device.  Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code  204 No Content. If the underlying protocol does not support non-confirmable requests,  or if the endpoint is registered in queue mode, the response is status code 409 Conflict. 
     * @param {module:api/ResourcesApi~v2EndpointsEndpointNameResourcePathDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncID}
     */
    this.v2EndpointsEndpointNameResourcePathDelete = function(endpointName, resourcePath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2EndpointsEndpointNameResourcePathDelete";
      }

      // verify the required parameter 'resourcePath' is set
      if (resourcePath == undefined || resourcePath == null) {
        throw "Missing the required parameter 'resourcePath' when calling v2EndpointsEndpointNameResourcePathDelete";
      }


      var pathParams = {
        'endpointName': endpointName,
        'resourcePath': resourcePath
      };
      var queryParams = {
        'noResp': opts['noResp']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AsyncID;

      return this.apiClient.callApi(
        '/v2/endpoints/{endpointName}/{resourcePath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2EndpointsEndpointNameResourcePathGet operation.
     * @callback module:api/ResourcesApi~v2EndpointsEndpointNameResourcePathGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read from a resource
     * Requests the resource value and when the response is available, a json AsycResponse  object (AsyncIDResponse object) is received in the notification channel. Note that you can also  receive notifications when a resource changes. The preferred way to get resource values is to use subscribe  and callback methods.  All resource APIs are asynchronous. Note that these APIs will only respond  if the device is turned on and connected to mbed Cloud Connect. 
     * @param {String} endpointName Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here. 
     * @param {String} resourcePath Resource&#39;s url. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cacheOnly If true, the response comes only from the cache. Default: false. 
     * @param {Boolean} opts.noResp **Non-confirmable requests**   All resource APIs have the parameter noResp. If a request is made with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device.  Such requests are not guaranteed to arrive in the device,  and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code  204 No Content. If the underlying protocol does not support non-confirmable requests,  or if the endpoint is registered in queue mode, the response is status code 409 Conflict. 
     * @param {module:api/ResourcesApi~v2EndpointsEndpointNameResourcePathGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncID}
     */
    this.v2EndpointsEndpointNameResourcePathGet = function(endpointName, resourcePath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2EndpointsEndpointNameResourcePathGet";
      }

      // verify the required parameter 'resourcePath' is set
      if (resourcePath == undefined || resourcePath == null) {
        throw "Missing the required parameter 'resourcePath' when calling v2EndpointsEndpointNameResourcePathGet";
      }


      var pathParams = {
        'endpointName': endpointName,
        'resourcePath': resourcePath
      };
      var queryParams = {
        'cacheOnly': opts['cacheOnly'],
        'noResp': opts['noResp']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AsyncID;

      return this.apiClient.callApi(
        '/v2/endpoints/{endpointName}/{resourcePath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2EndpointsEndpointNameResourcePathPost operation.
     * @callback module:api/ResourcesApi~v2EndpointsEndpointNameResourcePathPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a function on a resource
     * With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect. 
     * @param {String} endpointName A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. 
     * @param {String} resourcePath Resource&#39;s url.
     * @param {Object} opts Optional parameters
     * @param {String} opts.resourceFunction This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Cloud Client. 
     * @param {Boolean} opts.noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device.  Such requests are not guaranteed to arrive in the device,  and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code  204 No Content. If the underlying protocol does not support non-confirmable requests,  or if the endpoint is registered in queue mode, the response is status code 409 Conflict. 
     * @param {module:api/ResourcesApi~v2EndpointsEndpointNameResourcePathPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncID}
     */
    this.v2EndpointsEndpointNameResourcePathPost = function(endpointName, resourcePath, opts, callback) {
      opts = opts || {};
      var postBody = opts['resourceFunction'];

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2EndpointsEndpointNameResourcePathPost";
      }

      // verify the required parameter 'resourcePath' is set
      if (resourcePath == undefined || resourcePath == null) {
        throw "Missing the required parameter 'resourcePath' when calling v2EndpointsEndpointNameResourcePathPost";
      }


      var pathParams = {
        'endpointName': endpointName,
        'resourcePath': resourcePath
      };
      var queryParams = {
        'noResp': opts['noResp']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['text/plain', 'application/xml', 'application/octet-stream', 'application/exi', 'application/json', 'application/link-format', 'application/senml+json', 'application/nanoservice-tlv', 'application/vnd.oma.lwm2m+text', 'application/vnd.oma.lwm2m+opaq', 'application/vnd.oma.lwm2m+tlv', 'application/vnd.oma.lwm2m+json'];
      var accepts = ['application/json'];
      var returnType = AsyncID;

      return this.apiClient.callApi(
        '/v2/endpoints/{endpointName}/{resourcePath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v2EndpointsEndpointNameResourcePathPut operation.
     * @callback module:api/ResourcesApi~v2EndpointsEndpointNameResourcePathPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write to a resource
     * With this API, you can write new values to existing resources, or create new  resources on the device. The resource-path does not have to exist - it can be  created by the call.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect. 
     * @param {String} endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here. 
     * @param {String} resourcePath Resource&#39;s url.
     * @param {String} resourceValue Value to be set to the resource. (Check accceptable content-types) 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noResp **Non-confirmable requests**   All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device.  Such requests are not guaranteed to arrive in the device,  and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code  204 No Content. If the underlying protocol does not support non-confirmable requests,  or if the endpoint is registered in queue mode, the response is status code 409 Conflict. 
     * @param {module:api/ResourcesApi~v2EndpointsEndpointNameResourcePathPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncID}
     */
    this.v2EndpointsEndpointNameResourcePathPut = function(endpointName, resourcePath, resourceValue, opts, callback) {
      opts = opts || {};
      var postBody = resourceValue;

      // verify the required parameter 'endpointName' is set
      if (endpointName == undefined || endpointName == null) {
        throw "Missing the required parameter 'endpointName' when calling v2EndpointsEndpointNameResourcePathPut";
      }

      // verify the required parameter 'resourcePath' is set
      if (resourcePath == undefined || resourcePath == null) {
        throw "Missing the required parameter 'resourcePath' when calling v2EndpointsEndpointNameResourcePathPut";
      }

      // verify the required parameter 'resourceValue' is set
      if (resourceValue == undefined || resourceValue == null) {
        throw "Missing the required parameter 'resourceValue' when calling v2EndpointsEndpointNameResourcePathPut";
      }


      var pathParams = {
        'endpointName': endpointName,
        'resourcePath': resourcePath
      };
      var queryParams = {
        'noResp': opts['noResp']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['text/plain', 'application/xml', 'application/octet-stream', 'application/exi', 'application/json', 'application/link-format', 'application/senml+json', 'application/nanoservice-tlv', 'application/vnd.oma.lwm2m+text', 'application/vnd.oma.lwm2m+opaq', 'application/vnd.oma.lwm2m+tlv', 'application/vnd.oma.lwm2m+json'];
      var accepts = ['application/json'];
      var returnType = AsyncID;

      return this.apiClient.callApi(
        '/v2/endpoints/{endpointName}/{resourcePath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
