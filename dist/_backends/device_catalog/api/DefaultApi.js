/**
 * Device Catalog API
 * This is the API Documentation for the mbed device catalog update service.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeviceDetail', 'model/DeviceListResp', 'model/DeviceLogSerializer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeviceDetail'), require('../model/DeviceListResp'), require('../model/DeviceLogSerializer'));
  } else {
    // Browser globals (root is window)
    if (!root.DeviceCatalogApi) {
      root.DeviceCatalogApi = {};
    }
    root.DeviceCatalogApi.DefaultApi = factory(root.DeviceCatalogApi.ApiClient, root.DeviceCatalogApi.DeviceDetail, root.DeviceCatalogApi.DeviceListResp, root.DeviceCatalogApi.DeviceLogSerializer);
  }
}(this, function(ApiClient, DeviceDetail, DeviceListResp, DeviceLogSerializer) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.1
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deviceCreate operation.
     * @callback module:api/DefaultApi~deviceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
     * @param {module:model/String} mechanism The ID of the channel used to communicate with the device
     * @param {String} provisionKey The key used to provision the device
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The owning IAM account ID
     * @param {Boolean} opts.autoUpdate Mark this device for auto firmware update
     * @param {String} opts.bootstrappedTimestamp 
     * @param {Date} opts.createdAt 
     * @param {Object.<String, {String: String}>} opts.customAttributes Up to 5 custom JSON attributes
     * @param {module:model/String} opts.deployedState The state of the device&#39;s deployment
     * @param {String} opts.deployment The last deployment used on the device
     * @param {String} opts.description The description of the object
     * @param {String} opts.deviceClass 
     * @param {String} opts.deviceId DEPRECATED: The ID of the device
     * @param {Date} opts.etag The entity instance signature
     * @param {String} opts.id The ID of the device
     * @param {String} opts.manifest URL for the current device manifest
     * @param {String} opts.mechanismUrl The address of the connector to use
     * @param {String} opts.name The name of the object
     * @param {String} opts._object The API resource entity
     * @param {String} opts.serialNumber The serial number of the device
     * @param {module:model/String} opts.state The current state of the device
     * @param {Integer} opts.trustClass The device trust class
     * @param {Integer} opts.trustLevel The device trust level
     * @param {Date} opts.updatedAt The time the object was updated
     * @param {String} opts.vendorId The device vendor ID
     * @param {module:api/DefaultApi~deviceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDetail}
     */
    this.deviceCreate = function(mechanism, provisionKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'mechanism' is set
      if (mechanism == undefined || mechanism == null) {
        throw "Missing the required parameter 'mechanism' when calling deviceCreate";
      }

      // verify the required parameter 'provisionKey' is set
      if (provisionKey == undefined || provisionKey == null) {
        throw "Missing the required parameter 'provisionKey' when calling deviceCreate";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'account_id': opts['accountId'],
        'auto_update': opts['autoUpdate'],
        'bootstrapped_timestamp': opts['bootstrappedTimestamp'],
        'created_at': opts['createdAt'],
        'custom_attributes': opts['customAttributes'],
        'deployed_state': opts['deployedState'],
        'deployment': opts['deployment'],
        'description': opts['description'],
        'device_class': opts['deviceClass'],
        'device_id': opts['deviceId'],
        'etag': opts['etag'],
        'id': opts['id'],
        'manifest': opts['manifest'],
        'mechanism': mechanism,
        'mechanism_url': opts['mechanismUrl'],
        'name': opts['name'],
        'object': opts['_object'],
        'provision_key': provisionKey,
        'serial_number': opts['serialNumber'],
        'state': opts['state'],
        'trust_class': opts['trustClass'],
        'trust_level': opts['trustLevel'],
        'updated_at': opts['updatedAt'],
        'vendor_id': opts['vendorId']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeviceDetail;

      return this.apiClient.callApi(
        '/v3/devices/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceDestroy operation.
     * @callback module:api/DefaultApi~deviceDestroyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceListResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
     * @param {String} deviceId 
     * @param {module:api/DefaultApi~deviceDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceListResp}
     */
    this.deviceDestroy = function(deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw "Missing the required parameter 'deviceId' when calling deviceDestroy";
      }


      var pathParams = {
        'device_id': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeviceListResp;

      return this.apiClient.callApi(
        '/v3/devices/{device_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceList operation.
     * @callback module:api/DefaultApi~deviceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceListResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.limit 
     * @param {String} opts.order 
     * @param {String} opts.after 
     * @param {String} opts.filter 
     * @param {String} opts.include 
     * @param {module:api/DefaultApi~deviceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceListResp}
     */
    this.deviceList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'filter': opts['filter'],
        'include': opts['include']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeviceListResp;

      return this.apiClient.callApi(
        '/v3/devices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceLogList operation.
     * @callback module:api/DefaultApi~deviceLogListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceLogSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.limit 
     * @param {String} opts.order 
     * @param {String} opts.after 
     * @param {String} opts.filter 
     * @param {String} opts.include 
     * @param {module:api/DefaultApi~deviceLogListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceLogSerializer}
     */
    this.deviceLogList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'filter': opts['filter'],
        'include': opts['include']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeviceLogSerializer;

      return this.apiClient.callApi(
        '/v3/devicelog/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceLogRetrieve operation.
     * @callback module:api/DefaultApi~deviceLogRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceLogSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
     * @param {String} deviceLogId 
     * @param {module:api/DefaultApi~deviceLogRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceLogSerializer}
     */
    this.deviceLogRetrieve = function(deviceLogId, callback) {
      var postBody = null;

      // verify the required parameter 'deviceLogId' is set
      if (deviceLogId == undefined || deviceLogId == null) {
        throw "Missing the required parameter 'deviceLogId' when calling deviceLogRetrieve";
      }


      var pathParams = {
        'device_log_id': deviceLogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeviceLogSerializer;

      return this.apiClient.callApi(
        '/v3/devicelog/{device_log_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicePartialUpdate operation.
     * @callback module:api/DefaultApi~devicePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceListResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
     * @param {String} deviceId The ID of the device
     * @param {module:api/DefaultApi~devicePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceListResp}
     */
    this.devicePartialUpdate = function(deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw "Missing the required parameter 'deviceId' when calling devicePartialUpdate";
      }


      var pathParams = {
        'device_id': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeviceListResp;

      return this.apiClient.callApi(
        '/v3/devices/{device_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceRetrieve operation.
     * @callback module:api/DefaultApi~deviceRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceListResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
     * @param {String} deviceId 
     * @param {module:api/DefaultApi~deviceRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceListResp}
     */
    this.deviceRetrieve = function(deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw "Missing the required parameter 'deviceId' when calling deviceRetrieve";
      }


      var pathParams = {
        'device_id': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeviceListResp;

      return this.apiClient.callApi(
        '/v3/devices/{device_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceUpdate operation.
     * @callback module:api/DefaultApi~deviceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceListResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
     * @param {String} deviceId The ID of the device
     * @param {module:api/DefaultApi~deviceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceListResp}
     */
    this.deviceUpdate = function(deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw "Missing the required parameter 'deviceId' when calling deviceUpdate";
      }


      var pathParams = {
        'device_id': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeviceListResp;

      return this.apiClient.callApi(
        '/v3/devices/{device_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
