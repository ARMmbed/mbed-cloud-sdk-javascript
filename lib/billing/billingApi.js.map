{"version":3,"sources":["billing/billingApi.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;AAGH,yCAAwC;AACxC,iDAAqE;AAErE,oEAA+D;AAC/D,uDAAsD;AAGtD,wEAAoF;AACpF,+CAA8C;AAC9C,yBAA+B;AAE/B;IAGI;;OAEG;IACH,oBAAY,OAA0B;QAClC,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAS,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAgBM,sCAAiB,GAAxB,UAAyB,KAAW,EAAE,QAAiB,EAAE,QAA6B;QAAtF,iBAuBC;QAtBG,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;YACjC,QAAQ,GAAG,QAAQ,CAAC;QACxB,CAAC;QAED,MAAM,CAAC,sBAAU,CAAC,UAAA,SAAS;YACvB,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,8BAAkB,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;QACnF,CAAC,EAAE,UAAC,IAAI,EAAE,IAAI;YACV,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;gBAChC,gBAAgB;gBAChB,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACX,cAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,UAAA,KAAK;wBACrC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACR,MAAM,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;wBACnD,CAAC;wBACD,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBAC9B,CAAC,CAAC,CAAC;gBACP,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACvB,CAAC;QACL,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,uCAAkB,GAAzB,UAA0B,QAA4C;QAAtE,iBAkBC;QAjBG,MAAM,CAAC,sBAAU,CAAC,UAAA,SAAS;YACvB,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QAC1D,CAAC,EAAE,UAAC,IAA6B,EAAE,IAAI;YACnC,IAAM,IAAI,GAA0B,IAAI,KAAK,EAAE,CAAC;YAChD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBACf,IAAI,CAAC,IAAI,CAAC,kCAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACxC,CAAC;gBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACd,IAAI,CAAC,IAAI,CAAC,iCAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtC,CAAC;gBACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAChB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,mCAAW,CAAC,CAAC,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC;gBAC1D,CAAC;YACL,CAAC;YACD,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACrB,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAcM,oCAAe,GAAtB,UAAuB,OAAa,EAAE,QAAiD;QAAvF,iBAoBC;QAnBG,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QAExB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAChC,QAAQ,GAAG,OAAO,CAAC;QACvB,CAAC;QAED,MAAM,CAAC,sBAAU,CAAC,UAAA,SAAS;YACf,IAAA,qBAAK,EAAE,qBAAK,CAAa;YACjC,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,6BAA6B,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QACnF,CAAC,EAAE,UAAC,IAAwC,EAAE,IAAI;YAC9C,IAAI,IAAyB,CAAC;YAC9B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG;oBACpB,MAAM,CAAC,qCAAe,CAAC,GAAG,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAI,CAAC,IAAI,EAAE,IAAI,2BAAY,CAAe,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3D,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IAYM,sCAAiB,GAAxB,UAAyB,QAA6B;QAAtD,iBAQC;QAPG,MAAM,CAAC,sBAAU,CAAC,UAAA,SAAS;YACvB,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QAC9D,CAAC,EAAE,UAAC,IAAyB,EAAE,IAAI;YAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;QACL,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,iBAAC;AAAD,CApIA,AAoIC,IAAA;AApIY,gCAAU","file":"billingApi.js","sourcesContent":["/*\n * Mbed Cloud JavaScript SDK\n * Copyright Arm Limited 2018\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectionOptions, CallbackFn, ListOptions } from \"../common/interfaces\";\nimport { Endpoints } from \"./endpoints\";\nimport { apiWrapper, dateToBillingMonth } from \"../common/functions\";\nimport { QuotaHistory } from \"./models/quotaHistory\";\nimport { mapQuotaHistory } from \"./models/quotaHistoryAdapter\";\nimport { ListResponse } from \"../common/listResponse\";\nimport { ServicePackageQuota, ServicePackagesResponse, ServicePackageQuotaHistoryResponse } from \"../_api/billing\";\nimport { ServicePackage } from \"./models/servicePackage\";\nimport { mapPending, mapActive, mapPrevious } from \"./models/servicePackageAdapter\";\nimport { SDKError } from \"../common/sdkError\";\nimport { writeFile } from \"fs\";\n\nexport class BillingApi {\n    private readonly _endpoints: Endpoints;\n\n    /**\n     * @param options Connection objects\n     */\n    constructor(options: ConnectionOptions) {\n        this._endpoints = new Endpoints(options);\n    }\n\n    /**\n     * Get the main billing report.\n     * @param month Date object for the year and month you want a report from\n     * @param filepath Optional. If specified, the destination to write the billing report to.\n     * @returns Promise of string. The json string for the billing report.\n     */\n    public getReportOverview(month: Date, filepath?: string): Promise<string>;\n    /**\n     * Get the main billing report.\n     * @param month Date object for the year and month you want a report from\n     * @param filepath Optional. If specified, the destination to write the billing report to.\n     * @param callback\n     */\n    public getReportOverview(month: Date, filepath?: string, callback?: CallbackFn<string>): void;\n    public getReportOverview(month: Date, filepath?: string, callback?: CallbackFn<string>): Promise<string> {\n        if (typeof filepath === \"function\") {\n            callback = filepath;\n        }\n\n        return apiWrapper(resultsFn => {\n            this._endpoints.billing.getBillingReport(dateToBillingMonth(month), resultsFn);\n        }, (data, done) => {\n            const string = JSON.stringify(data);\n            if (typeof window === \"undefined\") {\n                // we're in node\n                if (filepath) {\n                    writeFile(filepath, string, \"utf8\", error => {\n                        if (error) {\n                            return done(new SDKError(error.message), null);\n                        }\n                        return done(null, string);\n                    });\n                }\n            } else {\n                done(null, string);\n            }\n        }, callback);\n    }\n\n    /**\n     * Get the service packages in order: pending -> active -> all pending\n     * @returns Promise with Array of ServicePackages\n     */\n    public getServicePackages(): Promise<Array<ServicePackage>>;\n    /**\n     * Get the service packages in order: pending -> active -> all pending\n     * @param callback\n     */\n    public getServicePackages(callback: CallbackFn<Array<ServicePackage>>): void;\n    public getServicePackages(callback?: CallbackFn<Array<ServicePackage>>): Promise<Array<ServicePackage>> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.billing.getServicePackages(resultsFn);\n        }, (data: ServicePackagesResponse, done) => {\n            const list: Array<ServicePackage> = new Array();\n            if (data) {\n                if (data.pending) {\n                    list.push(mapPending(data.pending));\n                }\n                if (data.active) {\n                    list.push(mapActive(data.active));\n                }\n                if (data.previous) {\n                    data.previous.forEach(p => list.push(mapPrevious(p)));\n                }\n            }\n            done(null, list);\n        }, callback);\n    }\n\n    /**\n     * Get all quota history\n     * @param options\n     * @returns Promise with List Response of QuotaHistory\n     */\n    public getQuotaHistory(options?: ListOptions): Promise<ListResponse<QuotaHistory>>;\n    /**\n     * Get all quota history\n     * @param options\n     * @param callback\n     */\n    public getQuotaHistory(options?: ListOptions, callback?: CallbackFn<ListResponse<QuotaHistory>>): void;\n    public getQuotaHistory(options?: any, callback?: CallbackFn<ListResponse<QuotaHistory>>): Promise<ListResponse<QuotaHistory>> {\n        options = options || {};\n\n        if (typeof options === \"function\") {\n            callback = options;\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after } = options;\n            this._endpoints.billing.getServicePackageQuotaHistory(limit, after, resultsFn);\n        }, (data: ServicePackageQuotaHistoryResponse, done) => {\n            let keys: Array<QuotaHistory>;\n            if (data && data.data && data.data.length) {\n                keys = data.data.map(key => {\n                    return mapQuotaHistory(key);\n                });\n            }\n\n            done(null, new ListResponse<QuotaHistory>(data, keys));\n        }, callback);\n    }\n\n    /**\n     * Get your remaining quota\n     * @returns Promise of number\n     */\n    public getQuotaRemaining(): Promise<number>;\n    /**\n     * Get your remaining quota\n     * @param callback\n     */\n    public getQuotaRemaining(callback: CallbackFn<number>): void;\n    public getQuotaRemaining(callback?: CallbackFn<number>): Promise<number> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.billing.getServicePackageQuota(resultsFn);\n        }, (data: ServicePackageQuota, done) => {\n            if (data) {\n                return done(null, data.quota);\n            }\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}