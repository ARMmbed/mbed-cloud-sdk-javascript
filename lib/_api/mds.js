/**
 * mbed Cloud Connect REST API
 * mbed Cloud Connect REST API allows web applications to communicate with devices.
 *
 * OpenAPI spec version: 2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var apiBase_1 = require("../common/apiBase");
/**
 * DefaultApi
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete callback URL
     * Deletes the callback URL.
     */
    DefaultApi.prototype.v2NotificationCallbackDelete = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/notification/callback',
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Check callback URL
     * Shows the current callback URL if exists.
     */
    DefaultApi.prototype.v2NotificationCallbackGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/notification/callback',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return DefaultApi;
}(apiBase_1.ApiBase));
exports.DefaultApi = DefaultApi;
/**
 * EndpointsApi
 */
var EndpointsApi = (function (_super) {
    __extends(EndpointsApi, _super);
    function EndpointsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List the resources on an endpoint
     * The list of resources is cached by mbed Cloud Connect, so this call does not create a message to the device.
     * @param endpointName A unique identifier for an endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.
     */
    EndpointsApi.prototype.v2EndpointsEndpointNameGet = function (endpointName, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2EndpointsEndpointNameGet'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/endpoints/{endpointName}'.replace('{' + 'endpointName' + '}', String(endpointName)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * List all endpoints
     * Endpoints are physical devices running mbed Cloud Client.
     * @param type Filter endpoints by endpoint-type.
     */
    EndpointsApi.prototype.v2EndpointsGet = function (type, callback) {
        var headerParams = {};
        var queryParameters = {};
        if (type !== undefined) {
            queryParameters['type'] = type;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/endpoints',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return EndpointsApi;
}(apiBase_1.ApiBase));
exports.EndpointsApi = EndpointsApi;
/**
 * NotificationsApi
 */
var NotificationsApi = (function (_super) {
    __extends(NotificationsApi, _super);
    function NotificationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Register a callback URL
     * Register a URL to which the server should deliver notifications of the subscribed resource changes. To get notifications pushed you need to also place the subscriptions.  Notifications are delivered as PUT messages to the HTTP server defined by the client with a subscription server message. The given URL should be accessible and respond to the PUT request with response code of 200 or 204. mbed Cloud Connect tests the callback URL with empty payload when the URL is registered. For more information on callback notification, see NotificationData.  **Note**: Only one callback URL per access-key can be active. If you register a new URL when another one is already active, the old URL is replaced by the new.
     * @param webhook A json object that contains the URL to which notifications need to be sent, and the optional headers.
     */
    NotificationsApi.prototype.v2NotificationCallbackPut = function (webhook, callback) {
        // verify required parameter "webhook" is set
        if (webhook === null || webhook === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'webhook' missing when calling 'v2NotificationCallbackPut'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/notification/callback',
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: webhook,
        }, callback);
    };
    /**
     * Get notifications using Long Poll
     * In this case, notifications are delivered through HTTP long-poll requests. The HTTP request is kept open until an event notification or a batch of event notifications are delivered to the client or the request times out (response code 204). In both cases, the client should open a new polling connection after the previous one closes. You must have a persistent connection (Connection keep-alive header in the request) to avoid excess TLS handshakes.  **Note:** If it is not possible to have a public facing callback URL, for example when developing on your local machine, you can use long polling to check for new messages. However, to reduce network traffic and to increase performance we recommend that you use callback URLs (webhooks) whenever possible.
     */
    NotificationsApi.prototype.v2NotificationPullGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/notification/pull',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return NotificationsApi;
}(apiBase_1.ApiBase));
exports.NotificationsApi = NotificationsApi;
/**
 * ResourcesApi
 */
var ResourcesApi = (function (_super) {
    __extends(ResourcesApi, _super);
    function ResourcesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a resource
     * A request to delete a resource must be handled by both mbed Cloud Client and mbed Cloud Connect. The resource is not deleted from mbed Cloud Connect until the delete is handled by mbed Cloud Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     * @param noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.
     */
    ResourcesApi.prototype.v2EndpointsEndpointNameResourcePathDelete = function (endpointName, resourcePath, noResp, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2EndpointsEndpointNameResourcePathDelete'."));
            }
            return;
        }
        // verify required parameter "resourcePath" is set
        if (resourcePath === null || resourcePath === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'resourcePath' missing when calling 'v2EndpointsEndpointNameResourcePathDelete'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (noResp !== undefined) {
            queryParameters['noResp'] = noResp;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/endpoints/{endpointName}/{resourcePath}'.replace('{' + 'endpointName' + '}', String(endpointName)).replace('{' + 'resourcePath' + '}', String(resourcePath)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Read from a resource
     * Requests the resource value and when the response is available, a json AsycResponse object (AsyncIDResponse object) is received in the notification channel. Note that you can also receive notifications when a resource changes. The preferred way to get resource values is to use subscribe and callback methods.  All resource APIs are asynchronous. Note that these APIs will only respond if the device is turned on and connected to mbed Cloud Connect.
     * @param endpointName Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     * @param cacheOnly If true, the response comes only from the cache. Default: false.
     * @param noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If a request is made with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.
     */
    ResourcesApi.prototype.v2EndpointsEndpointNameResourcePathGet = function (endpointName, resourcePath, cacheOnly, noResp, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2EndpointsEndpointNameResourcePathGet'."));
            }
            return;
        }
        // verify required parameter "resourcePath" is set
        if (resourcePath === null || resourcePath === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'resourcePath' missing when calling 'v2EndpointsEndpointNameResourcePathGet'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (cacheOnly !== undefined) {
            queryParameters['cacheOnly'] = cacheOnly;
        }
        if (noResp !== undefined) {
            queryParameters['noResp'] = noResp;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/endpoints/{endpointName}/{resourcePath}'.replace('{' + 'endpointName' + '}', String(endpointName)).replace('{' + 'resourcePath' + '}', String(resourcePath)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Execute a function on a resource
     * With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     * @param resourceFunction This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Cloud Client.
     * @param noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.
     */
    ResourcesApi.prototype.v2EndpointsEndpointNameResourcePathPost = function (endpointName, resourcePath, resourceFunction, noResp, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2EndpointsEndpointNameResourcePathPost'."));
            }
            return;
        }
        // verify required parameter "resourcePath" is set
        if (resourcePath === null || resourcePath === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'resourcePath' missing when calling 'v2EndpointsEndpointNameResourcePathPost'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (noResp !== undefined) {
            queryParameters['noResp'] = noResp;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/endpoints/{endpointName}/{resourcePath}'.replace('{' + 'endpointName' + '}', String(endpointName)).replace('{' + 'resourcePath' + '}', String(resourcePath)),
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: resourceFunction,
        }, callback);
    };
    /**
     * Write to a resource
     * With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Cloud Connect.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     * @param resourceValue Value to be set to the resource. (Check accceptable content-types)
     * @param noResp **Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Cloud Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.
     */
    ResourcesApi.prototype.v2EndpointsEndpointNameResourcePathPut = function (endpointName, resourcePath, resourceValue, noResp, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2EndpointsEndpointNameResourcePathPut'."));
            }
            return;
        }
        // verify required parameter "resourcePath" is set
        if (resourcePath === null || resourcePath === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'resourcePath' missing when calling 'v2EndpointsEndpointNameResourcePathPut'."));
            }
            return;
        }
        // verify required parameter "resourceValue" is set
        if (resourceValue === null || resourceValue === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'resourceValue' missing when calling 'v2EndpointsEndpointNameResourcePathPut'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (noResp !== undefined) {
            queryParameters['noResp'] = noResp;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/endpoints/{endpointName}/{resourcePath}'.replace('{' + 'endpointName' + '}', String(endpointName)).replace('{' + 'resourcePath' + '}', String(resourcePath)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: resourceValue,
        }, callback);
    };
    return ResourcesApi;
}(apiBase_1.ApiBase));
exports.ResourcesApi = ResourcesApi;
/**
 * SubscriptionsApi
 */
var SubscriptionsApi = (function (_super) {
    __extends(SubscriptionsApi, _super);
    function SubscriptionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Remove all subscriptions
     * Removes subscriptions from every endpoint and resource. Note that this does not remove pre-subscriptions.
     */
    SubscriptionsApi.prototype.v2SubscriptionsDelete = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/subscriptions',
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Delete subscriptions from an endpoint
     * Deletes all resource subscriptions in a single endpoint.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameDelete = function (endpointName, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2SubscriptionsEndpointNameDelete'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/subscriptions/{endpointName}'.replace('{' + 'endpointName' + '}', String(endpointName)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Read endpoints subscriptions
     * Lists all subscribed resources from a single endpoint.
     * @param endpointName A unique identifier for the endpoint. Note that endpoint name must be an exact match. You cannot use wildcards here.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameGet = function (endpointName, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2SubscriptionsEndpointNameGet'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/subscriptions/{endpointName}'.replace('{' + 'endpointName' + '}', String(endpointName)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Remove a subscription
     * To remove an existing subscription from a resource path.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameResourcePathDelete = function (endpointName, resourcePath, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2SubscriptionsEndpointNameResourcePathDelete'."));
            }
            return;
        }
        // verify required parameter "resourcePath" is set
        if (resourcePath === null || resourcePath === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'resourcePath' missing when calling 'v2SubscriptionsEndpointNameResourcePathDelete'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/subscriptions/{endpointName}/{resourcePath}'.replace('{' + 'endpointName' + '}', String(endpointName)).replace('{' + 'resourcePath' + '}', String(resourcePath)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Read subscription status
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s url.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameResourcePathGet = function (endpointName, resourcePath, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2SubscriptionsEndpointNameResourcePathGet'."));
            }
            return;
        }
        // verify required parameter "resourcePath" is set
        if (resourcePath === null || resourcePath === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'resourcePath' missing when calling 'v2SubscriptionsEndpointNameResourcePathGet'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/subscriptions/{endpointName}/{resourcePath}'.replace('{' + 'endpointName' + '}', String(endpointName)).replace('{' + 'resourcePath' + '}', String(resourcePath)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Subscribe to a resource path
     * The mbed Cloud Connect eventing model consists of observable resources.  This means that endpoints can deliver updated resource content, periodically or with a more sophisticated solution-dependent logic. The OMA LWM2M resource model including objects, object instances, resources and resource instances is also supported.  Applications can subscribe to objects, object instances or individual resources to make the device to provide value change notifications to mbed Cloud Connect service. An application needs to call a /notification/callback method to get mbed Cloud Connect to push a notification of the resource changes. You can also use /subscriptions to set a pre-subscription.
     * @param endpointName A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.
     * @param resourcePath Resource&#39;s URL.
     */
    SubscriptionsApi.prototype.v2SubscriptionsEndpointNameResourcePathPut = function (endpointName, resourcePath, callback) {
        // verify required parameter "endpointName" is set
        if (endpointName === null || endpointName === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'endpointName' missing when calling 'v2SubscriptionsEndpointNameResourcePathPut'."));
            }
            return;
        }
        // verify required parameter "resourcePath" is set
        if (resourcePath === null || resourcePath === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'resourcePath' missing when calling 'v2SubscriptionsEndpointNameResourcePathPut'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/subscriptions/{endpointName}/{resourcePath}'.replace('{' + 'endpointName' + '}', String(endpointName)).replace('{' + 'resourcePath' + '}', String(resourcePath)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Get pre-subscriptions
     * You can retrieve the pre-subscription data by using a GET operation. The server returns with the same JSON structure as described above. If there are no pre-subscribed resources, it returns with an empty array.
     */
    SubscriptionsApi.prototype.v2SubscriptionsGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/subscriptions',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Set pre-subscriptions
     * Pre-subscription is a set of rules and patterns put by the application. When an endpoint registers and its name, type and registered resources match the pre-subscription data, mbed Cloud Connect sends subscription requests to the device automatically. The pattern may include the endpoint name (optionally having an \\* character at the end), endpoint type, a list of resources or expressions with an \\* character at the end. The pre-subscription concerns all the endpoints that are already registered and the server sends subscription requests to the devices immediately when the patterns are set. There is only one pre-subscribe array, so changing the pre-subscription data removes all the previous subscriptions. To remove the pre-subscription data, put an empty array as a rule.
     * @param presubsription Array of pre-subscriptions.
     */
    SubscriptionsApi.prototype.v2SubscriptionsPut = function (presubsription, callback) {
        // verify required parameter "presubsription" is set
        if (presubsription === null || presubsription === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'presubsription' missing when calling 'v2SubscriptionsPut'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v2/subscriptions',
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: presubsription,
        }, callback);
    };
    return SubscriptionsApi;
}(apiBase_1.ApiBase));
exports.SubscriptionsApi = SubscriptionsApi;
