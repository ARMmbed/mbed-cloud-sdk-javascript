{"version":3,"sources":["_api/device_directory.ts"],"names":[],"mappings":"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","file":"device_directory.js","sourcesContent":["/* tslint:disable:array-type */\n/* tslint:disable:no-string-literal */\n/* tslint:disable:max-classes-per-file */\n/* tslint:disable:no-trailing-whitespace */\n\n// ===============================================\n// This file is autogenerated - Please do not edit\n// Tracks base typescript-fetch mustache 01/02/17\n// ===============================================\n/**\n * Device Directory API\n * This is the API Documentation for the Mbed Device Directory service.\n *\n * OpenAPI spec version: 3\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport superagent = require(\"superagent\");\nimport { ApiBase } from \"../common/apiBase\";\nimport { SDKError } from \"../common/sdkError\";\n\nexport type DeviceDataMechanismEnum = \"connector\" | \"direct\";\nexport type DeviceDataStateEnum = \"unenrolled\" | \"cloud_enrolling\" | \"bootstrapped\" | \"registered\" | \"deregistered\";\nexport type DeviceDataDeployedStateEnum = \"development\" | \"production\";\nexport interface DeviceData {\n    /**\n     * The expiration date of the certificate used to connect to bootstrap server.\n     */\n    \"bootstrap_expiration_date\"?: Date;\n    /**\n     * The timestamp of the device's most recent bootstrap process.\n     */\n    \"bootstrapped_timestamp\"?: Date;\n    /**\n     * The expiration date of the certificate used to connect to LWM2M server.\n     */\n    \"connector_expiration_date\"?: Date;\n    /**\n     * The time the object was updated.\n     */\n    \"updated_at\"?: Date;\n    /**\n     * The certificate issuer's ID.\n     */\n    \"ca_id\"?: string;\n    /**\n     * An ID representing the model and hardware revision of the device.\n     */\n    \"device_class\"?: string;\n    /**\n     * The ID of the device. The device ID is used to manage a device across all Mbed Cloud APIs.\n     */\n    \"id\"?: string;\n    /**\n     * The ID of the associated account.\n     */\n    \"account_id\"?: string;\n    /**\n     * The endpoint name given to the device.\n     */\n    \"endpoint_name\"?: string;\n    /**\n     * DEPRECATED: Mark this device for automatic firmware update.\n     */\n    \"auto_update\"?: boolean;\n    /**\n     * The `endpoint_name` of the host gateway, if appropriate.\n     */\n    \"host_gateway\"?: string;\n    /**\n     * The execution mode from the certificate of the device. Defaults to inheriting from host_gateway device. Permitted values:   - 0 - unspecified execution mode (default if host_gateway invalid or not set)   - 1 - development devices   - 5 - production devices\n     */\n    \"device_execution_mode\"?: number;\n    /**\n     * The ID of the channel used to communicate with the device.\n     */\n    \"mechanism\"?: DeviceDataMechanismEnum;\n    /**\n     * The current state of the device.\n     */\n    \"state\"?: DeviceDataStateEnum;\n    /**\n     * The entity instance signature.\n     */\n    \"etag\"?: Date;\n    /**\n     * The serial number of the device.\n     */\n    \"serial_number\"?: string;\n    /**\n     * The SHA256 checksum of the current firmware image.\n     */\n    \"firmware_checksum\"?: string;\n    /**\n     * The timestamp of the current manifest version.\n     */\n    \"manifest_timestamp\"?: Date;\n    /**\n     * The device vendor ID.\n     */\n    \"vendor_id\"?: string;\n    /**\n     * The description of the device.\n     */\n    \"description\"?: string;\n    /**\n     * DEPRECATED: The state of the device's deployment.\n     */\n    \"deployed_state\"?: DeviceDataDeployedStateEnum;\n    /**\n     * The API resource entity.\n     */\n    \"object\"?: string;\n    /**\n     * The endpoint type of the device. For example, the device is a gateway.\n     */\n    \"endpoint_type\"?: string;\n    /**\n     * DEPRECATED: The last deployment used on the device.\n     */\n    \"deployment\"?: string;\n    /**\n     * The address of the connector to use.\n     */\n    \"mechanism_url\"?: string;\n    /**\n     * The name of the device.\n     */\n    \"name\"?: string;\n    /**\n     * The fingerprint of the device certificate.\n     */\n    \"device_key\"?: string;\n    /**\n     * The timestamp of when the device was created in the device directory.\n     */\n    \"created_at\"?: Date;\n    /**\n     * DEPRECATED: The URL for the current device manifest.\n     */\n    \"manifest\"?: string;\n    /**\n     * Up to five custom key-value attributes.\n     */\n    \"custom_attributes\"?: { [key: string]: string; };\n}\n\nexport interface DeviceDataPatchRequest {\n    /**\n     * The description of the device.\n     */\n    \"description\"?: string;\n    /**\n     * The endpoint name given to the device.\n     */\n    \"endpoint_name\"?: string;\n    /**\n     * DEPRECATED: Mark this device for automatic firmware update.\n     */\n    \"auto_update\"?: boolean;\n    /**\n     * The `endpoint_name` of the host gateway, if appropriate.\n     */\n    \"host_gateway\"?: string;\n    /**\n     * The API resource entity.\n     */\n    \"object\"?: string;\n    /**\n     * Up to five custom key-value attributes. Note that keys cannot start with a number.\n     */\n    \"custom_attributes\"?: { [key: string]: string; };\n    /**\n     * The fingerprint of the device certificate.\n     */\n    \"device_key\"?: string;\n    /**\n     * The endpoint type of the device. For example, the device is a gateway.\n     */\n    \"endpoint_type\"?: string;\n    /**\n     * The certificate issuer's ID.\n     */\n    \"ca_id\"?: string;\n    /**\n     * The name of the device.\n     */\n    \"name\"?: string;\n}\n\nexport type DeviceDataPostRequestMechanismEnum = \"connector\" | \"direct\";\nexport type DeviceDataPostRequestStateEnum = \"unenrolled\" | \"cloud_enrolling\" | \"bootstrapped\" | \"registered\" | \"deregistered\";\nexport type DeviceDataPostRequestDeployedStateEnum = \"development\" | \"production\";\nexport interface DeviceDataPostRequest {\n    /**\n     * The expiration date of the certificate used to connect to bootstrap server.\n     */\n    \"bootstrap_expiration_date\"?: Date;\n    /**\n     * The timestamp of the device's most recent bootstrap process..\n     */\n    \"bootstrapped_timestamp\"?: Date;\n    /**\n     * The expiration date of the certificate used to connect to the LWM2M server.\n     */\n    \"connector_expiration_date\"?: Date;\n    /**\n     * The ID of the channel used to communicate with the device.\n     */\n    \"mechanism\"?: DeviceDataPostRequestMechanismEnum;\n    /**\n     * An ID representing the model and hardware revision of the device.\n     */\n    \"device_class\"?: string;\n    /**\n     * The endpoint name given to the device.\n     */\n    \"endpoint_name\"?: string;\n    /**\n     * DEPRECATED: Mark this device for automatic firmware update.\n     */\n    \"auto_update\"?: boolean;\n    /**\n     * The `endpoint_name` of the host gateway, if appropriate.\n     */\n    \"host_gateway\"?: string;\n    /**\n     * The execution mode from the certificate of the device. Permitted values:   - 0 - unspecified execution mode (default)   - 1 - development devices   - 5 - production devices\n     */\n    \"device_execution_mode\"?: number;\n    /**\n     * Up to five custom key-value attributes. Note that keys cannot start with a number.\n     */\n    \"custom_attributes\"?: { [key: string]: string; };\n    /**\n     * The current state of the device.\n     */\n    \"state\"?: DeviceDataPostRequestStateEnum;\n    /**\n     * The serial number of the device.\n     */\n    \"serial_number\"?: string;\n    /**\n     * The SHA256 checksum of the current firmware image.\n     */\n    \"firmware_checksum\"?: string;\n    /**\n     * The device vendor ID.\n     */\n    \"vendor_id\"?: string;\n    /**\n     * The description of the device.\n     */\n    \"description\"?: string;\n    /**\n     * DEPRECATED: The state of the device's deployment.\n     */\n    \"deployed_state\"?: DeviceDataPostRequestDeployedStateEnum;\n    /**\n     * The API resource entity.\n     */\n    \"object\"?: string;\n    /**\n     * The endpoint type of the device. For example, the device is a gateway.\n     */\n    \"endpoint_type\"?: string;\n    /**\n     * DEPRECATED: The last deployment used on the device.\n     */\n    \"deployment\"?: string;\n    /**\n     * The address of the connector to use.\n     */\n    \"mechanism_url\"?: string;\n    /**\n     * The name of the device.\n     */\n    \"name\"?: string;\n    /**\n     * The fingerprint of the device certificate.\n     */\n    \"device_key\": string;\n    /**\n     * DEPRECATED: The URL for the current device manifest.\n     */\n    \"manifest\"?: string;\n    /**\n     * The certificate issuer's ID.\n     */\n    \"ca_id\": string;\n}\n\nexport interface DeviceDataPutRequest {\n    /**\n     * The description of the device.\n     */\n    \"description\"?: string;\n    /**\n     * The endpoint name given to the device.\n     */\n    \"endpoint_name\"?: string;\n    /**\n     * DEPRECATED: Mark this device for automatic firmware update.\n     */\n    \"auto_update\"?: boolean;\n    /**\n     * The `endpoint_name` of the host gateway, if appropriate.\n     */\n    \"host_gateway\"?: string;\n    /**\n     * The API resource entity.\n     */\n    \"object\"?: string;\n    /**\n     * Up to five custom key-value attributes. Note that keys cannot start with a number.\n     */\n    \"custom_attributes\"?: { [key: string]: string; };\n    /**\n     * The fingerprint of the device certificate.\n     */\n    \"device_key\": string;\n    /**\n     * The endpoint type of the device. For example, the device is a gateway.\n     */\n    \"endpoint_type\"?: string;\n    /**\n     * The certificate issuer's ID.\n     */\n    \"ca_id\": string;\n    /**\n     * The name of the device.\n     */\n    \"name\"?: string;\n}\n\nexport interface DeviceEventData {\n    \"date_time\": Date;\n    \"state_change\"?: boolean;\n    \"description\"?: string;\n    \"changes\"?: any;\n    \"event_type_description\"?: string;\n    \"event_type\"?: string;\n    \"data\"?: any;\n    \"id\"?: string;\n    \"device_id\"?: string;\n}\n\nexport interface DeviceEventPage {\n    \"object\"?: string;\n    \"has_more\"?: boolean;\n    \"total_count\"?: number;\n    \"after\"?: string;\n    \"limit\"?: number;\n    \"data\"?: Array<DeviceEventData>;\n    \"order\"?: string;\n}\n\nexport interface DevicePage {\n    \"object\"?: string;\n    \"has_more\"?: boolean;\n    \"total_count\"?: number;\n    \"after\"?: string;\n    \"limit\"?: number;\n    \"data\"?: Array<DeviceData>;\n    \"order\"?: string;\n}\n\nexport interface DeviceQuery {\n    /**\n     * The name of the query.\n     */\n    \"name\": string;\n    /**\n     * The timestamp of when the device was created in the device directory.\n     */\n    \"created_at\": Date;\n    /**\n     * The API resource entity.\n     */\n    \"object\": string;\n    /**\n     * The time the object was updated.\n     */\n    \"updated_at\": Date;\n    /**\n     * The entity instance signature.\n     */\n    \"etag\": Date;\n    /**\n     * The device query.\n     */\n    \"query\": string;\n    /**\n     * The ID of the query.\n     */\n    \"id\": string;\n}\n\nexport interface DeviceQueryPage {\n    \"object\": string;\n    \"has_more\": boolean;\n    \"total_count\": number;\n    \"after\"?: string;\n    \"limit\": number;\n    \"data\": Array<DeviceQuery>;\n    \"order\": string;\n}\n\nexport interface DeviceQueryPatchRequest {\n    /**\n     * The device query.\n     */\n    \"query\"?: string;\n    /**\n     * The name of the query.\n     */\n    \"name\"?: string;\n}\n\nexport interface DeviceQueryPostPutRequest {\n    /**\n     * The device query.\n     */\n    \"query\": string;\n    /**\n     * The name of the query.\n     */\n    \"name\": string;\n}\n\n/**\n * DefaultApi\n */\nexport class DefaultApi extends ApiBase {\n\n    /**\n     * Create device.\n     * @param device \n     */\n    public deviceCreate(device: DeviceDataPostRequest, callback?: (error: any, data?: DeviceData, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"device\" is set\n        if (device === null || device === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'device' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceData>({\n            url: \"/v3/devices/\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: device,\n        }, callback);\n    }\n    /**\n     * Delete device. Only available for devices with a developer certificate. Attempts to delete a device with a production certicate will return a 400 response.\n     * @param id \n     */\n    public deviceDestroy(id: string, callback?: (error: any, data?: any, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"id\" is set\n        if (id === null || id === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'id' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<null>({\n            url: \"/v3/devices/{id}/\".replace(\"{\" + \"id\" + \"}\", String(id)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * List all device events.\n     * @param limit How many objects to retrieve in the page.\n     * @param order The order of the objects to return. &#x60;ASC&#x60; or &#x60;DESC&#x60;.\n     * @param after The ID of The item after which to retrieve the next page.\n     * @param filter URL encoded query string parameter to filter returned data.  ##### Filtering &#x60;&#x60;&#x60;?filter&#x3D;{URL encoded query string}&#x60;&#x60;&#x60;  The query string is made up of key/value pairs separated by ampersands. So for a query of &#x60;&#x60;&#x60;key1&#x3D;value1&amp;key2&#x3D;value2&amp;key3&#x3D;value3&#x60;&#x60;&#x60; this would be encoded as follows: &#x60;&#x60;&#x60;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&#x60;&#x60;&#x60; The examples below show the queries in *unencoded* form.  ###### By id: &#x60;&#x60;&#x60;id&#x3D;{id}&#x60;&#x60;&#x60;  ###### By state change: &#x60;&#x60;&#x60;state_change&#x3D;[True|False]&#x60;&#x60;&#x60;  ###### By event type: &#x60;&#x60;&#x60;event_type&#x3D;{value}&#x60;&#x60;&#x60;  ###### On date-time fields: Date-time fields should be specified in UTC RFC3339 format &#x60;&#x60;&#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;&#x60;&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z * UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z * UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z  Date-time filtering supports three operators:  * equality * greater than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; * less than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60;  Lower and upper limits to a date-time range may be specified by including both the &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60; forms in the filter.  &#x60;&#x60;&#x60;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;&#x60;&#x60;  ##### Multi-field example  &#x60;&#x60;&#x60;id&#x3D;0158d38771f70000000000010010038c&amp;state_change&#x3D;True&amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&#x60;&#x60;&#x60;  Encoded:  &#x60;&#x60;&#x60;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&#x60;&#x60;&#x60;\n     * @param include Comma-separated list of data fields to return. Currently supported: &#x60;total_count&#x60;\n     */\n    public deviceEventList(limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error: any, data?: DeviceEventPage, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (filter !== undefined) {\n            queryParameters[\"filter\"] = filter;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceEventPage>({\n            url: \"/v3/device-events/\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Retrieve device event.\n     * @param deviceEventId \n     */\n    public deviceEventRetrieve(deviceEventId: string, callback?: (error: any, data?: DeviceEventData, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"deviceEventId\" is set\n        if (deviceEventId === null || deviceEventId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'deviceEventId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceEventData>({\n            url: \"/v3/device-events/{device_event_id}/\".replace(\"{\" + \"device_event_id\" + \"}\", String(deviceEventId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * List all devices.\n     * @param limit How many objects to retrieve in the page.\n     * @param order The order of the objects to return. &#x60;ASC&#x60; or &#x60;DESC&#x60;.\n     * @param after The ID of The item after which to retrieve the next page.\n     * @param filter URL encoded query string parameter to filter returned data.  ##### Filtering &#x60;&#x60;&#x60;?filter&#x3D;{URL encoded query string}&#x60;&#x60;&#x60;  The query string is made up of key/value pairs separated by ampersands. So for a query of &#x60;&#x60;&#x60;key1&#x3D;value1&amp;key2&#x3D;value2&amp;key3&#x3D;value3&#x60;&#x60;&#x60; this would be encoded as follows: &#x60;&#x60;&#x60;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&#x60;&#x60;&#x60; The examples below show the queries in *unencoded* form.  ###### By device properties (all properties are filterable): &#x60;&#x60;&#x60;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;device_class&#x3D;{value}&#x60;&#x60;&#x60;  ###### On date-time fields: Date-time fields should be specified in UTC RFC3339 format &#x60;&#x60;&#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;&#x60;&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z * UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z * UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z  Date-time filtering supports three operators:  * equality * greater than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; * less than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60;  Lower and upper limits to a date-time range may be specified by including both the &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60; forms in the filter.  &#x60;&#x60;&#x60;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;&#x60;&#x60;  ###### On device custom attributes:  &#x60;&#x60;&#x60;custom_attributes__{param}&#x3D;{value}&#x60;&#x60;&#x60; &#x60;&#x60;&#x60;custom_attributes__tag&#x3D;TAG1&#x60;&#x60;&#x60;  ##### Multi-field example  &#x60;&#x60;&#x60;state&#x3D;bootstrapped&amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;&#x60;&#x60;  Encoded:  &#x60;&#x60;&#x60;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&#x60;&#x60;&#x60;\n     * @param include Comma-separated list of data fields to return. Currently supported: &#x60;total_count&#x60;.\n     */\n    public deviceList(limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error: any, data?: DevicePage, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (filter !== undefined) {\n            queryParameters[\"filter\"] = filter;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DevicePage>({\n            url: \"/v3/devices/\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * DEPRECATED: List all device events. Use &#x60;/v3/device-events/&#x60; instead.\n     * @param limit How many objects to retrieve in the page.\n     * @param order The order of the objects to return. &#x60;ASC&#x60; or &#x60;DESC&#x60;.\n     * @param after The ID of The item after which to retrieve the next page.\n     * @param filter URL encoded query string parameter to filter returned data.  ##### Filtering &#x60;&#x60;&#x60;?filter&#x3D;{URL encoded query string}&#x60;&#x60;&#x60;  The query string is made up of key/value pairs separated by ampersands. So for a query of &#x60;&#x60;&#x60;key1&#x3D;value1&amp;key2&#x3D;value2&amp;key3&#x3D;value3&#x60;&#x60;&#x60; this would be encoded as follows: &#x60;&#x60;&#x60;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&#x60;&#x60;&#x60; The examples below show the queries in *unencoded* form.  ###### By id: &#x60;&#x60;&#x60;id&#x3D;{id}&#x60;&#x60;&#x60;  ###### By state change: &#x60;&#x60;&#x60;state_change&#x3D;[True|False]&#x60;&#x60;&#x60;  ###### By event type: &#x60;&#x60;&#x60;event_type&#x3D;{value}&#x60;&#x60;&#x60;  ###### On date-time fields: Date-time fields should be specified in UTC RFC3339 format &#x60;&#x60;&#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;&#x60;&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z * UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z * UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z  Date-time filtering supports three operators:  * equality * greater than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; * less than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60;  Lower and upper limits to a date-time range may be specified by including both the &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60; forms in the filter.  &#x60;&#x60;&#x60;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;&#x60;&#x60;  ##### Multi-field example  &#x60;&#x60;&#x60;id&#x3D;0158d38771f70000000000010010038c&amp;state_change&#x3D;True&amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&#x60;&#x60;&#x60;  Encoded:  &#x60;&#x60;&#x60;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&#x60;&#x60;&#x60;\n     * @param include Comma-separated list of data fields to return. Currently supported: &#x60;total_count&#x60;.\n     */\n    public deviceLogList(limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error: any, data?: DeviceEventPage, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (filter !== undefined) {\n            queryParameters[\"filter\"] = filter;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceEventPage>({\n            url: \"/v3/devicelog/\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Retrieve device event (deprecated, use /v3/device-events/{device_event_id}/ instead)\n     * @param deviceEventId \n     */\n    public deviceLogRetrieve(deviceEventId: string, callback?: (error: any, data?: DeviceEventData, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"deviceEventId\" is set\n        if (deviceEventId === null || deviceEventId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'deviceEventId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceEventData>({\n            url: \"/v3/devicelog/{device_event_id}/\".replace(\"{\" + \"device_event_id\" + \"}\", String(deviceEventId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Update device fields.\n     * @param id The ID of the device.\n     * @param device \n     */\n    public devicePartialUpdate(id: string, device: DeviceDataPatchRequest, callback?: (error: any, data?: DeviceData, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"id\" is set\n        if (id === null || id === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'id' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"device\" is set\n        if (device === null || device === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'device' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceData>({\n            url: \"/v3/devices/{id}/\".replace(\"{\" + \"id\" + \"}\", String(id)),\n            method: \"PATCH\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: device,\n        }, callback);\n    }\n    /**\n     * Create device query.\n     * @param device \n     */\n    public deviceQueryCreate(device: DeviceQueryPostPutRequest, callback?: (error: any, data?: DeviceQuery, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"device\" is set\n        if (device === null || device === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'device' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceQuery>({\n            url: \"/v3/device-queries/\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: device,\n        }, callback);\n    }\n    /**\n     * Delete device query.\n     * @param queryId \n     */\n    public deviceQueryDestroy(queryId: string, callback?: (error: any, data?: any, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"queryId\" is set\n        if (queryId === null || queryId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'queryId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<null>({\n            url: \"/v3/device-queries/{query_id}/\".replace(\"{\" + \"query_id\" + \"}\", String(queryId)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * List all device queries. The result will be paged into pages of 100.\n     * @param limit How many objects to retrieve in the page.\n     * @param order The order of the objects to return. &#x60;ASC&#x60; or &#x60;DESC&#x60;.\n     * @param after The ID of The item after which to retrieve the next page.\n     * @param filter URL encoded query string parameter to filter returned data.  ##### Filtering &#x60;&#x60;&#x60;?filter&#x3D;{URL encoded query string}&#x60;&#x60;&#x60;  The query string is made up of key/value pairs separated by ampersands. So for a query of &#x60;&#x60;&#x60;key1&#x3D;value1&amp;key2&#x3D;value2&amp;key3&#x3D;value3&#x60;&#x60;&#x60; this would be encoded as follows: &#x60;&#x60;&#x60;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&#x60;&#x60;&#x60; The examples below show the queries in *unencoded* form.  ###### By device query properties (all properties are filterable): For example: &#x60;&#x60;&#x60;description&#x3D;{value}&#x60;&#x60;&#x60;  ###### On date-time fields: Date-time fields should be specified in UTC RFC3339 format &#x60;&#x60;&#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;&#x60;&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z * UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z * UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z  Date-time filtering supports three operators:  * equality * greater than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; * less than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60;  Lower and upper limits to a date-time range may be specified by including both the &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60; forms in the filter.  &#x60;&#x60;&#x60;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;&#x60;&#x60;  ##### Multi-field example  &#x60;&#x60;&#x60;query_id&#x3D;0158d38771f70000000000010010038c&amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;&#x60;&#x60;  Encoded:  &#x60;&#x60;&#x60;filter&#x3D;query_id%3D0158d38771f70000000000010010038c%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&#x60;&#x60;&#x60;\n     * @param include Comma-separated list of data fields to return. Currently supported: &#x60;total_count&#x60;.\n     */\n    public deviceQueryList(limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error: any, data?: DeviceQueryPage, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (filter !== undefined) {\n            queryParameters[\"filter\"] = filter;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceQueryPage>({\n            url: \"/v3/device-queries/\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Update device query fields.\n     * @param queryId \n     * @param deviceQuery \n     */\n    public deviceQueryPartialUpdate(queryId: string, deviceQuery: DeviceQueryPatchRequest, callback?: (error: any, data?: DeviceQuery, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"queryId\" is set\n        if (queryId === null || queryId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'queryId' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"deviceQuery\" is set\n        if (deviceQuery === null || deviceQuery === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'deviceQuery' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceQuery>({\n            url: \"/v3/device-queries/{query_id}/\".replace(\"{\" + \"query_id\" + \"}\", String(queryId)),\n            method: \"PATCH\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: deviceQuery,\n        }, callback);\n    }\n    /**\n     * Retrieve device query.\n     * @param queryId \n     */\n    public deviceQueryRetrieve(queryId: string, callback?: (error: any, data?: DeviceQuery, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"queryId\" is set\n        if (queryId === null || queryId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'queryId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceQuery>({\n            url: \"/v3/device-queries/{query_id}/\".replace(\"{\" + \"query_id\" + \"}\", String(queryId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Update device query.\n     * @param queryId \n     * @param body Device query update object.\n     */\n    public deviceQueryUpdate(queryId: string, body: DeviceQueryPostPutRequest, callback?: (error: any, data?: DeviceQuery, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"queryId\" is set\n        if (queryId === null || queryId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'queryId' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceQuery>({\n            url: \"/v3/device-queries/{query_id}/\".replace(\"{\" + \"query_id\" + \"}\", String(queryId)),\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Retrieve device.\n     * @param id \n     */\n    public deviceRetrieve(id: string, callback?: (error: any, data?: DeviceData, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"id\" is set\n        if (id === null || id === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'id' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceData>({\n            url: \"/v3/devices/{id}/\".replace(\"{\" + \"id\" + \"}\", String(id)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Update device.\n     * @param id The ID of the device.\n     * @param device \n     */\n    public deviceUpdate(id: string, device: DeviceDataPutRequest, callback?: (error: any, data?: DeviceData, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"id\" is set\n        if (id === null || id === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'id' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"device\" is set\n        if (device === null || device === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'device' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<DeviceData>({\n            url: \"/v3/devices/{id}/\".replace(\"{\" + \"id\" + \"}\", String(id)),\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: device,\n        }, callback);\n    }\n}\n"]}