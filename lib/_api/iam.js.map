{"version":3,"sources":["_api/iam.ts"],"names":[],"mappings":"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","file":"iam.js","sourcesContent":["/* tslint:disable:array-type */\n/* tslint:disable:no-string-literal */\n/* tslint:disable:max-classes-per-file */\n/* tslint:disable:no-trailing-whitespace */\n\n// ===============================================\n// This file is autogenerated - Please do not edit\n// Tracks base typescript-fetch mustache 01/02/17\n// ===============================================\n/**\n * Account Management API\n * API for managing accounts, users, creating API keys, uploading trusted certificates\n *\n * OpenAPI spec version: v3\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport superagent = require(\"superagent\");\nimport { ApiBase } from \"../common/apiBase\";\nimport { SDKError } from \"../common/sdkError\";\n\n/**\n * This object represents an account in requests and responses.\n */\nexport type AccountInfoStatusEnum = \"ENROLLING\" | \"ACTIVE\" | \"RESTRICTED\" | \"SUSPENDED\";\nexport type AccountInfoObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport interface AccountInfo {\n    /**\n     * Account end market.\n     */\n    \"end_market\": string;\n    /**\n     * The status of the account.\n     */\n    \"status\": AccountInfoStatusEnum;\n    /**\n     * The password policy for this account.\n     */\n    \"password_policy\"?: PasswordPolicy;\n    /**\n     * The postal code part of the postal address.\n     */\n    \"postal_code\"?: string;\n    /**\n     * Account ID.\n     */\n    \"id\": string;\n    /**\n     * An array of aliases.\n     */\n    \"aliases\": Array<string>;\n    /**\n     * Postal address line 2.\n     */\n    \"address_line2\"?: string;\n    /**\n     * The city part of the postal address.\n     */\n    \"city\"?: string;\n    /**\n     * Postal address line 1.\n     */\n    \"address_line1\"?: string;\n    /**\n     * The display name for the account.\n     */\n    \"display_name\"?: string;\n    /**\n     * The ID of the parent account, if it has any.\n     */\n    \"parent_id\"?: string;\n    /**\n     * The state part of the postal address.\n     */\n    \"state\"?: string;\n    /**\n     * API resource entity version.\n     */\n    \"etag\": string;\n    /**\n     * Flag (true/false) indicating whether Factory Tool is allowed to download or not.\n     */\n    \"is_provisioning_allowed\": boolean;\n    /**\n     * The company email address for this account.\n     */\n    \"email\"?: string;\n    /**\n     * The phone number of the company.\n     */\n    \"phone_number\"?: string;\n    /**\n     * The name of the company.\n     */\n    \"company\"?: string;\n    /**\n     * Entity name: always 'account'\n     */\n    \"object\": AccountInfoObjectEnum;\n    /**\n     * A reason note for updating the status of the account\n     */\n    \"reason\"?: string;\n    /**\n     * Time when upgraded to commercial account in UTC format RFC3339.\n     */\n    \"upgraded_at\"?: Date;\n    /**\n     * The tier level of the account; '0': free tier, '1': commercial account, '2': partner tier. Other values are reserved for the future.\n     */\n    \"tier\": string;\n    /**\n     * List of sub accounts.\n     */\n    \"sub_accounts\"?: Array<AccountInfo>;\n    /**\n     * List of limits as key-value pairs if requested.\n     */\n    \"limits\"?: { [key: string]: string; };\n    /**\n     * The country part of the postal address.\n     */\n    \"country\"?: string;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * The reference token expiration time in minutes for this account.\n     */\n    \"idle_timeout\"?: string;\n    /**\n     * The name of the contact person for this account.\n     */\n    \"contact\"?: string;\n    /**\n     * List of policies if requested.\n     */\n    \"policies\"?: Array<FeaturePolicy>;\n    /**\n     * Account template ID.\n     */\n    \"template_id\"?: string;\n}\n\n/**\n * This object represents an account creation request.\n */\nexport interface AccountUpdateReq {\n    /**\n     * Postal address line 2, not longer than 100 characters.\n     */\n    \"address_line2\"?: string;\n    /**\n     * The city part of the postal address, not longer than 100 characters. Required for commercial accounts only.\n     */\n    \"city\"?: string;\n    /**\n     * Postal address line 1, not longer than 100 characters. Required for commercial accounts only.\n     */\n    \"address_line1\"?: string;\n    /**\n     * The display name for the account, not longer than 100 characters.\n     */\n    \"display_name\"?: string;\n    /**\n     * The country part of the postal address, not longer than 100 characters. Required for commercial accounts only.\n     */\n    \"country\"?: string;\n    /**\n     * The name of the company, not longer than 100 characters. Required for commercial accounts only.\n     */\n    \"company\"?: string;\n    /**\n     * The reference token expiration time in minutes for this account. Between 1 and 120 minutes.\n     */\n    \"idle_timeout\"?: string;\n    /**\n     * The state part of the postal address, not longer than 100 characters.\n     */\n    \"state\"?: string;\n    /**\n     * The name of the contact person for this account, not longer than 100 characters. Required for commercial accounts only.\n     */\n    \"contact\"?: string;\n    /**\n     * The postal code part of the postal address, not longer than 100 characters.\n     */\n    \"postal_code\"?: string;\n    /**\n     * Password policy for this account.\n     */\n    \"password_policy\"?: PasswordPolicy;\n    /**\n     * The end market for this account, not longer than 100 characters.\n     */\n    \"end_market\"?: string;\n    /**\n     * The phone number of the company, not longer than 100 characters.\n     */\n    \"phone_number\"?: string;\n    /**\n     * The company email address for this account, not longer than 254 characters. Required for commercial accounts only.\n     */\n    \"email\"?: string;\n    /**\n     * An array of aliases, not more than 10. An alias is not shorter than 8 and not longer than 100 characters.\n     */\n    \"aliases\"?: Array<string>;\n}\n\n/**\n * This object represents an API key in requests towards mbed Cloud.\n */\nexport type ApiKeyInfoReqStatusEnum = \"ACTIVE\" | \"INACTIVE\";\nexport interface ApiKeyInfoReq {\n    /**\n     * The owner of this API key, who is the creator by default.\n     */\n    \"owner\"?: string;\n    /**\n     * The status of the API key.\n     */\n    \"status\"?: ApiKeyInfoReqStatusEnum;\n    /**\n     * The display name for the API key, not longer than 100 characters.\n     */\n    \"name\": string;\n    /**\n     * A list of group IDs this API key belongs to.\n     */\n    \"groups\"?: Array<string>;\n}\n\n/**\n * This object represents an API key in mbed Cloud.\n */\nexport type ApiKeyInfoRespStatusEnum = \"ACTIVE\" | \"INACTIVE\";\nexport type ApiKeyInfoRespObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport interface ApiKeyInfoResp {\n    /**\n     * A list of group IDs this API key belongs to.\n     */\n    \"groups\"?: Array<string>;\n    /**\n     * The status of the API key.\n     */\n    \"status\"?: ApiKeyInfoRespStatusEnum;\n    /**\n     * The display name for the API key.\n     */\n    \"name\": string;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * Entity name: always 'api-key'\n     */\n    \"object\": ApiKeyInfoRespObjectEnum;\n    /**\n     * The timestamp of the API key creation in the storage, in milliseconds.\n     */\n    \"creation_time\"?: number;\n    /**\n     * API resource entity version.\n     */\n    \"etag\": string;\n    /**\n     * The API key.\n     */\n    \"key\": string;\n    /**\n     * The owner of this API key, who is the creator by default.\n     */\n    \"owner\"?: string;\n    /**\n     * The UUID of the API key.\n     */\n    \"id\": string;\n    /**\n     * The timestamp of the latest API key usage, in milliseconds.\n     */\n    \"last_login_time\"?: number;\n}\n\nexport type ApiKeyInfoRespListObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport type ApiKeyInfoRespListOrderEnum = \"ASC\" | \"DESC\";\nexport interface ApiKeyInfoRespList {\n    /**\n     * The entity ID to fetch after the given one.\n     */\n    \"after\"?: string;\n    /**\n     * Flag indicating whether there is more results.\n     */\n    \"has_more\": boolean;\n    /**\n     * The total number or records, if requested. It might be returned also for small lists.\n     */\n    \"total_count\": number;\n    /**\n     * Entity name: always 'list'\n     */\n    \"object\": ApiKeyInfoRespListObjectEnum;\n    /**\n     * The number of results to return, (range: 2-1000), or equals to `total_count`\n     */\n    \"limit\": number;\n    /**\n     * A list of entities.\n     */\n    \"data\": Array<ApiKeyInfoResp>;\n    /**\n     * The order of the records to return. Available values: ASC, DESC; by default ASC.\n     */\n    \"order\"?: ApiKeyInfoRespListOrderEnum;\n}\n\n/**\n * This object represents an API key in requests towards mbed Cloud.\n */\nexport type ApiKeyUpdateReqStatusEnum = \"ACTIVE\" | \"INACTIVE\";\nexport interface ApiKeyUpdateReq {\n    /**\n     * The owner of this API key, who is the creator by default.\n     */\n    \"owner\"?: string;\n    /**\n     * The status of the API key.\n     */\n    \"status\"?: ApiKeyUpdateReqStatusEnum;\n    /**\n     * The display name for the API key, not longer than 100 characters.\n     */\n    \"name\": string;\n}\n\n/**\n * This object represents an error message.\n */\nexport type ErrorResponseObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport type ErrorResponseTypeEnum = \"success\" | \"created\" | \"accepted\" | \"permanently_deleted\" | \"validation_error\" | \"invalid_token\" | \"invalid_apikey\" | \"reauth_required\" | \"access_denied\" | \"account_limit_exceeded\" | \"not_found\" | \"method_not_supported\" | \"not_acceptable\" | \"duplicate\" | \"precondition_failed\" | \"unsupported_media_type\" | \"rate_limit_exceeded\" | \"internal_server_error\" | \"system_unavailable\";\nexport interface ErrorResponse {\n    /**\n     * Response code.\n     */\n    \"code\": number;\n    /**\n     * Failed input fields during request object validation.\n     */\n    \"fields\"?: Array<Field>;\n    /**\n     * Entity name, always 'error'.\n     */\n    \"object\": ErrorResponseObjectEnum;\n    /**\n     * Request ID.\n     */\n    \"request_id\": string;\n    /**\n     * A human readable message with detailed info.\n     */\n    \"message\": string;\n    /**\n     * Error type.\n     */\n    \"type\": ErrorResponseTypeEnum;\n}\n\n/**\n * This object represents a feature policy. Either the feature or the resource must be specified.\n */\nexport interface FeaturePolicy {\n    /**\n     * Comma separated list of actions, empty string represents all actions.\n     */\n    \"action\"?: string;\n    /**\n     * Resource that is protected by this policy.\n     */\n    \"resource\"?: string;\n    /**\n     * Feature name corresponding to this policy.\n     */\n    \"feature\"?: string;\n    /**\n     * True or false controlling whether an action is allowed or not.\n     */\n    \"allow\"?: boolean;\n}\n\nexport interface Field {\n    /**\n     * Message describing the erroneous situation.\n     */\n    \"message\": string;\n    /**\n     * Name of the erroneous field.\n     */\n    \"name\": string;\n}\n\n/**\n * This object contains basic information about groups.\n */\nexport type GroupSummaryObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport interface GroupSummary {\n    /**\n     * A timestamp of the latest group update, in milliseconds.\n     */\n    \"last_update_time\"?: number;\n    /**\n     * The number of users in this group.\n     */\n    \"user_count\": number;\n    /**\n     * The name of the group.\n     */\n    \"name\": string;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * Entity name: always 'group'\n     */\n    \"object\": GroupSummaryObjectEnum;\n    /**\n     * A timestamp of the group creation in the storage, in milliseconds.\n     */\n    \"creation_time\"?: number;\n    /**\n     * API resource entity version.\n     */\n    \"etag\": string;\n    /**\n     * The number of API keys in this group.\n     */\n    \"apikey_count\": number;\n    /**\n     * The UUID of the group.\n     */\n    \"id\": string;\n    /**\n     * The UUID of the account this group belongs to.\n     */\n    \"account_id\": string;\n}\n\nexport type GroupSummaryListObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport type GroupSummaryListOrderEnum = \"ASC\" | \"DESC\";\nexport interface GroupSummaryList {\n    /**\n     * The entity ID to fetch after the given one.\n     */\n    \"after\"?: string;\n    /**\n     * Flag indicating whether there is more results.\n     */\n    \"has_more\": boolean;\n    /**\n     * The total number or records, if requested. It might be returned also for small lists.\n     */\n    \"total_count\": number;\n    /**\n     * Entity name: always 'list'\n     */\n    \"object\": GroupSummaryListObjectEnum;\n    /**\n     * The number of results to return, (range: 2-1000), or equals to `total_count`\n     */\n    \"limit\": number;\n    /**\n     * A list of entities.\n     */\n    \"data\": Array<GroupSummary>;\n    /**\n     * The order of the records to return. Available values: ASC, DESC; by default ASC.\n     */\n    \"order\"?: GroupSummaryListOrderEnum;\n}\n\n/**\n * This object represents an entry in login history.\n */\nexport interface LoginHistory {\n    /**\n     * UTC time RFC3339 for this login attempt.\n     */\n    \"date\": Date;\n    /**\n     * IP address of the client.\n     */\n    \"ip_address\": string;\n    /**\n     * User Agent header from the login request.\n     */\n    \"user_agent\": string;\n    /**\n     * Flag indicating whether login attempt was successful or not.\n     */\n    \"success\": boolean;\n}\n\n/**\n * This object represents user details.\n */\nexport type MyUserInfoRespStatusEnum = \"ENROLLING\" | \"INVITED\" | \"ACTIVE\" | \"RESET\" | \"INACTIVE\";\nexport type MyUserInfoRespObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport interface MyUserInfoResp {\n    /**\n     * A username containing alphanumerical letters and -,._@+= characters.\n     */\n    \"username\"?: string;\n    /**\n     * Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.\n     */\n    \"login_history\"?: Array<LoginHistory>;\n    /**\n     * A timestamp of the user creation in the storage, in milliseconds.\n     */\n    \"creation_time\"?: number;\n    /**\n     * The full name of the user.\n     */\n    \"full_name\"?: string;\n    /**\n     * The UUID of the user.\n     */\n    \"id\": string;\n    /**\n     * A timestamp of the latest login of the user, in milliseconds.\n     */\n    \"last_login_time\"?: number;\n    /**\n     * A flag indicating that the General Terms and Conditions has been accepted.\n     */\n    \"is_gtc_accepted\"?: boolean;\n    /**\n     * API resource entity version.\n     */\n    \"etag\": string;\n    /**\n     * A flag indicating that receiving marketing information has been accepted.\n     */\n    \"is_marketing_accepted\"?: boolean;\n    /**\n     * Phone number.\n     */\n    \"phone_number\"?: string;\n    /**\n     * The email address.\n     */\n    \"email\": string;\n    /**\n     * The status of the user. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately.\n     */\n    \"status\": MyUserInfoRespStatusEnum;\n    /**\n     * The UUID of the account.\n     */\n    \"account_id\": string;\n    /**\n     * A list of scratch codes for the 2-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.\n     */\n    \"totp_scratch_codes\"?: Array<string>;\n    /**\n     * Entity name: always 'user'\n     */\n    \"object\": MyUserInfoRespObjectEnum;\n    /**\n     * A list of IDs of the groups this user belongs to.\n     */\n    \"groups\"?: Array<string>;\n    /**\n     * Address.\n     */\n    \"address\"?: string;\n    /**\n     * The password when creating a new user. It will be generated when not present in the request.\n     */\n    \"password\"?: string;\n    /**\n     * A flag indicating whether the user's email address has been verified or not.\n     */\n    \"email_verified\"?: boolean;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * A flag indicating whether 2-factor authentication (TOTP) has been enabled.\n     */\n    \"is_totp_enabled\"?: boolean;\n    /**\n     * A timestamp of the latest change of the user password, in milliseconds.\n     */\n    \"password_changed_time\"?: number;\n}\n\nexport interface PasswordPolicy {\n    /**\n     * Minimum length for the password. A number between 8 and 512.\n     */\n    \"minimum_length\": string;\n}\n\n/**\n * This object represents an array of users and API keys.\n */\nexport interface SubjectList {\n    /**\n     * An array of API keys.\n     */\n    \"apikeys\"?: Array<string>;\n    /**\n     * An array of user names.\n     */\n    \"users\"?: Array<string>;\n}\n\n/**\n * This object represents a trusted certificate in upload requests.\n */\nexport type TrustedCertificateReqStatusEnum = \"ACTIVE\" | \"INACTIVE\";\nexport type TrustedCertificateReqServiceEnum = \"lwm2m\" | \"bootstrap\";\nexport interface TrustedCertificateReq {\n    /**\n     * Status of the certificate.\n     */\n    \"status\"?: TrustedCertificateReqStatusEnum;\n    /**\n     * X509.v3 trusted certificate in PEM format.\n     */\n    \"certificate\": string;\n    /**\n     * Certificate name, not longer than 100 characters.\n     */\n    \"name\": string;\n    /**\n     * Service name where the certificate must be used.\n     */\n    \"service\": TrustedCertificateReqServiceEnum;\n    /**\n     * Base64 encoded signature of the account ID signed by the certificate to be uploaded. Signature must be hashed with SHA256.\n     */\n    \"signature\": string;\n    /**\n     * Human readable description of this certificate, not longer than 500 characters.\n     */\n    \"description\"?: string;\n}\n\n/**\n * This object represents a trusted certificate in responses.\n */\nexport type TrustedCertificateRespServiceEnum = \"lwm2m\" | \"bootstrap\";\nexport type TrustedCertificateRespStatusEnum = \"ACTIVE\" | \"INACTIVE\";\nexport type TrustedCertificateRespObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport interface TrustedCertificateResp {\n    /**\n     * Service name where the certificate is to be used.\n     */\n    \"service\": TrustedCertificateRespServiceEnum;\n    /**\n     * Status of the certificate.\n     */\n    \"status\"?: TrustedCertificateRespStatusEnum;\n    /**\n     * Human readable description of this certificate.\n     */\n    \"description\"?: string;\n    /**\n     * X509.v3 trusted certificate in PEM format.\n     */\n    \"certificate\": string;\n    /**\n     * Issuer of the certificate.\n     */\n    \"issuer\": string;\n    /**\n     * Device execution mode where 1 means a developer certificate.\n     */\n    \"device_execution_mode\"?: number;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * Entity name: always 'trusted-cert'\n     */\n    \"object\": TrustedCertificateRespObjectEnum;\n    /**\n     * Subject of the certificate.\n     */\n    \"subject\": string;\n    /**\n     * The UUID of the account.\n     */\n    \"account_id\": string;\n    /**\n     * API resource entity version.\n     */\n    \"etag\": string;\n    /**\n     * Expiration time in UTC formatted as RFC3339.\n     */\n    \"validity\": Date;\n    /**\n     * The UUID of the owner.\n     */\n    \"owner_id\"?: string;\n    /**\n     * Entity ID.\n     */\n    \"id\": string;\n    /**\n     * Certificate name.\n     */\n    \"name\": string;\n}\n\nexport type TrustedCertificateRespListObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport type TrustedCertificateRespListOrderEnum = \"ASC\" | \"DESC\";\nexport interface TrustedCertificateRespList {\n    /**\n     * The entity ID to fetch after the given one.\n     */\n    \"after\"?: string;\n    /**\n     * Flag indicating whether there is more results.\n     */\n    \"has_more\": boolean;\n    /**\n     * The total number or records, if requested. It might be returned also for small lists.\n     */\n    \"total_count\": number;\n    /**\n     * Entity name: always 'list'\n     */\n    \"object\": TrustedCertificateRespListObjectEnum;\n    /**\n     * The number of results to return, (range: 2-1000), or equals to `total_count`\n     */\n    \"limit\": number;\n    /**\n     * A list of entities.\n     */\n    \"data\": Array<TrustedCertificateResp>;\n    /**\n     * The order of the records to return. Available values: ASC, DESC; by default ASC.\n     */\n    \"order\"?: TrustedCertificateRespListOrderEnum;\n}\n\n/**\n * This object represents a trusted certificate in update requests.\n */\nexport type TrustedCertificateUpdateReqStatusEnum = \"ACTIVE\" | \"INACTIVE\";\nexport type TrustedCertificateUpdateReqServiceEnum = \"lwm2m\" | \"bootstrap\";\nexport interface TrustedCertificateUpdateReq {\n    /**\n     * Status of the certificate.\n     */\n    \"status\"?: TrustedCertificateUpdateReqStatusEnum;\n    /**\n     * X509.v3 trusted certificate in PEM format.\n     */\n    \"certificate\"?: string;\n    /**\n     * Certificate name, not longer than 100 characters.\n     */\n    \"name\"?: string;\n    /**\n     * Service name where the certificate must be used.\n     */\n    \"service\"?: TrustedCertificateUpdateReqServiceEnum;\n    /**\n     * Base64 encoded signature of the account ID signed by the certificate whose data to be updated. Signature must be hashed with SHA256.\n     */\n    \"signature\"?: string;\n    /**\n     * Human readable description of this certificate, not longer than 500 characters.\n     */\n    \"description\"?: string;\n}\n\n/**\n * This object represents a response to an update request.\n */\nexport type UpdatedResponseObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport type UpdatedResponseTypeEnum = \"success\" | \"created\" | \"accepted\" | \"permanently_deleted\" | \"validation_error\" | \"invalid_token\" | \"invalid_apikey\" | \"reauth_required\" | \"access_denied\" | \"account_limit_exceeded\" | \"not_found\" | \"method_not_supported\" | \"not_acceptable\" | \"duplicate\" | \"precondition_failed\" | \"unsupported_media_type\" | \"rate_limit_exceeded\" | \"internal_server_error\" | \"system_unavailable\";\nexport interface UpdatedResponse {\n    /**\n     * Response code.\n     */\n    \"code\": number;\n    /**\n     * Entity name: 'user', 'apikey', 'group' or 'account'.\n     */\n    \"object\": UpdatedResponseObjectEnum;\n    /**\n     * Request ID.\n     */\n    \"request_id\": string;\n    /**\n     * A human readable message with detailed info.\n     */\n    \"message\": string;\n    /**\n     * Response type: success.\n     */\n    \"type\": UpdatedResponseTypeEnum;\n    /**\n     * Entity ID.\n     */\n    \"id\": string;\n}\n\n/**\n * This object represents a user in requests towards mbed Cloud.\n */\nexport interface UserInfoReq {\n    /**\n     * Phone number, not longer than 100 characters.\n     */\n    \"phone_number\"?: string;\n    /**\n     * A username containing alphanumerical letters and -,._@+= characters. It must be at least 4 but not more than 30 character long.\n     */\n    \"username\"?: string;\n    /**\n     * A list of IDs of the groups this user belongs to.\n     */\n    \"groups\"?: Array<string>;\n    /**\n     * A flag indicating that the General Terms and Conditions has been accepted.\n     */\n    \"is_gtc_accepted\"?: boolean;\n    /**\n     * The full name of the user, not longer than 100 characters.\n     */\n    \"full_name\"?: string;\n    /**\n     * A flag indicating that receiving marketing information has been accepted.\n     */\n    \"is_marketing_accepted\"?: boolean;\n    /**\n     * Address, not longer than 100 characters.\n     */\n    \"address\"?: string;\n    /**\n     * The password when creating a new user. It will be generated when not present in the request.\n     */\n    \"password\"?: string;\n    /**\n     * The email address, not longer than 254 characters.\n     */\n    \"email\": string;\n}\n\n/**\n * This object represents a user in mbed Cloud.\n */\nexport type UserInfoRespStatusEnum = \"ENROLLING\" | \"INVITED\" | \"ACTIVE\" | \"RESET\" | \"INACTIVE\";\nexport type UserInfoRespObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport interface UserInfoResp {\n    /**\n     * The status of the user. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately.\n     */\n    \"status\": UserInfoRespStatusEnum;\n    /**\n     * A username containing alphanumerical letters and -,._@+= characters.\n     */\n    \"username\"?: string;\n    /**\n     * A list of IDs of the groups this user belongs to.\n     */\n    \"groups\"?: Array<string>;\n    /**\n     * A timestamp of the latest change of the user password, in milliseconds.\n     */\n    \"password_changed_time\"?: number;\n    /**\n     * A flag indicating whether the user's email address has been verified or not.\n     */\n    \"email_verified\"?: boolean;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * Entity name: always 'user'\n     */\n    \"object\": UserInfoRespObjectEnum;\n    /**\n     * A flag indicating that the General Terms and Conditions has been accepted.\n     */\n    \"is_gtc_accepted\"?: boolean;\n    /**\n     * The UUID of the account.\n     */\n    \"account_id\": string;\n    /**\n     * The email address.\n     */\n    \"email\": string;\n    /**\n     * Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.\n     */\n    \"login_history\"?: Array<LoginHistory>;\n    /**\n     * A flag indicating whether 2-factor authentication (TOTP) has been enabled.\n     */\n    \"is_totp_enabled\"?: boolean;\n    /**\n     * A flag indicating that receiving marketing information has been accepted.\n     */\n    \"is_marketing_accepted\"?: boolean;\n    /**\n     * API resource entity version.\n     */\n    \"etag\": string;\n    /**\n     * The full name of the user.\n     */\n    \"full_name\"?: string;\n    /**\n     * Address.\n     */\n    \"address\"?: string;\n    /**\n     * A timestamp of the user creation in the storage, in milliseconds.\n     */\n    \"creation_time\"?: number;\n    /**\n     * The password when creating a new user. It will be generated when not present in the request.\n     */\n    \"password\"?: string;\n    /**\n     * Phone number.\n     */\n    \"phone_number\"?: string;\n    /**\n     * The UUID of the user.\n     */\n    \"id\": string;\n    /**\n     * A timestamp of the latest login of the user, in milliseconds.\n     */\n    \"last_login_time\"?: number;\n}\n\nexport type UserInfoRespListObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport type UserInfoRespListOrderEnum = \"ASC\" | \"DESC\";\nexport interface UserInfoRespList {\n    /**\n     * The entity ID to fetch after the given one.\n     */\n    \"after\"?: string;\n    /**\n     * Flag indicating whether there is more results.\n     */\n    \"has_more\": boolean;\n    /**\n     * The total number or records, if requested. It might be returned also for small lists.\n     */\n    \"total_count\": number;\n    /**\n     * Entity name: always 'list'\n     */\n    \"object\": UserInfoRespListObjectEnum;\n    /**\n     * The number of results to return, (range: 2-1000), or equals to `total_count`\n     */\n    \"limit\": number;\n    /**\n     * A list of entities.\n     */\n    \"data\": Array<UserInfoResp>;\n    /**\n     * The order of the records to return. Available values: ASC, DESC; by default ASC.\n     */\n    \"order\"?: UserInfoRespListOrderEnum;\n}\n\n/**\n * This object represents a user in requests towards mbed Cloud.\n */\nexport interface UserUpdateReq {\n    /**\n     * Phone number, not longer than 100 characters.\n     */\n    \"phone_number\"?: string;\n    /**\n     * A username containing alphanumerical letters and -,._@+= characters. It must be at least 4 but not more than 30 character long.\n     */\n    \"username\"?: string;\n    /**\n     * A flag indicating that receiving marketing information has been accepted.\n     */\n    \"is_marketing_accepted\"?: boolean;\n    /**\n     * A flag indicating that the General Terms and Conditions has been accepted.\n     */\n    \"is_gtc_accepted\"?: boolean;\n    /**\n     * A flag indicating whether 2-factor authentication (TOTP) has to be enabled or disabled.\n     */\n    \"is_totp_enabled\"?: boolean;\n    /**\n     * The status of the user.\n     */\n    \"status\"?: string;\n    /**\n     * The full name of the user, not longer than 100 characters.\n     */\n    \"full_name\"?: string;\n    /**\n     * Address, not longer than 100 characters.\n     */\n    \"address\"?: string;\n    /**\n     * The password when creating a new user. It will be generated when not present in the request.\n     */\n    \"password\"?: string;\n    /**\n     * The email address, not longer than 254 characters.\n     */\n    \"email\"?: string;\n}\n\n/**\n * This object represents a user update response.\n */\nexport type UserUpdateRespStatusEnum = \"ENROLLING\" | \"INVITED\" | \"ACTIVE\" | \"RESET\" | \"INACTIVE\";\nexport type UserUpdateRespObjectEnum = \"user\" | \"api-key\" | \"group\" | \"account\" | \"account-template\" | \"trusted-cert\" | \"list\" | \"error\";\nexport interface UserUpdateResp {\n    /**\n     * A username containing alphanumerical letters and -,._@+= characters.\n     */\n    \"username\"?: string;\n    /**\n     * Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.\n     */\n    \"login_history\"?: Array<LoginHistory>;\n    /**\n     * A timestamp of the user creation in the storage, in milliseconds.\n     */\n    \"creation_time\"?: number;\n    /**\n     * The full name of the user.\n     */\n    \"full_name\"?: string;\n    /**\n     * The UUID of the user.\n     */\n    \"id\": string;\n    /**\n     * A timestamp of the latest login of the user, in milliseconds.\n     */\n    \"last_login_time\"?: number;\n    /**\n     * A flag indicating that the General Terms and Conditions has been accepted.\n     */\n    \"is_gtc_accepted\"?: boolean;\n    /**\n     * API resource entity version.\n     */\n    \"etag\": string;\n    /**\n     * A flag indicating that receiving marketing information has been accepted.\n     */\n    \"is_marketing_accepted\"?: boolean;\n    /**\n     * Phone number.\n     */\n    \"phone_number\"?: string;\n    /**\n     * The email address.\n     */\n    \"email\": string;\n    /**\n     * The status of the user. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately.\n     */\n    \"status\": UserUpdateRespStatusEnum;\n    /**\n     * The UUID of the account.\n     */\n    \"account_id\": string;\n    /**\n     * A list of scratch codes for the 2-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.\n     */\n    \"totp_scratch_codes\"?: Array<string>;\n    /**\n     * Entity name: always 'user'\n     */\n    \"object\": UserUpdateRespObjectEnum;\n    /**\n     * A list of IDs of the groups this user belongs to.\n     */\n    \"groups\"?: Array<string>;\n    /**\n     * Address.\n     */\n    \"address\"?: string;\n    /**\n     * Secret for the 2-factor authenticator app. Visible only when 2FA is requested to be enabled.\n     */\n    \"totp_secret\"?: string;\n    /**\n     * The password when creating a new user. It will be generated when not present in the request.\n     */\n    \"password\"?: string;\n    /**\n     * A flag indicating whether the user's email address has been verified or not.\n     */\n    \"email_verified\"?: boolean;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * A flag indicating whether 2-factor authentication (TOTP) has been enabled.\n     */\n    \"is_totp_enabled\"?: boolean;\n    /**\n     * A timestamp of the latest change of the user password, in milliseconds.\n     */\n    \"password_changed_time\"?: number;\n}\n\n/**\n * AccountAdminApi\n */\nexport class AccountAdminApi extends ApiBase {\n\n    /**\n     * Upload a new trusted certificate.\n     * An endpoint for uploading new trusted certificates.\n     * @param body A trusted certificate object with attributes.\n     */\n    public addCertificate(body: TrustedCertificateReq, callback?: (error: any, data?: TrustedCertificateResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<TrustedCertificateResp>({\n            url: \"/v3/trusted-certificates\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Add members to a group.\n     * An endpoint for adding users and API keys to groups.\n     * @param groupID The ID of the group to be updated.\n     * @param body A list of users and API keys to be added to the group.\n     */\n    public addSubjectsToGroup(groupID: string, body: SubjectList, callback?: (error: any, data?: UpdatedResponse, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"groupID\" is set\n        if (groupID === null || groupID === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'groupID' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UpdatedResponse>({\n            url: \"/v3/policy-groups/{groupID}\".replace(\"{\" + \"groupID\" + \"}\", String(groupID)),\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Create a new user.\n     * An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.\n     * @param body A user object with attributes.\n     * @param action Action, either &#39;create&#39; or &#39;invite&#39;.\n     */\n    public createUser(body: UserInfoReq, action?: string, callback?: (error: any, data?: UserInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (action !== undefined) {\n            queryParameters[\"action\"] = action;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UserInfoResp>({\n            url: \"/v3/users\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Delete a user.\n     * An endpoint for deleting a user.\n     * @param userId The ID of the user to be deleted.\n     */\n    public deleteUser(userId: string, callback?: (error: any, data?: any, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"userId\" is set\n        if (userId === null || userId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'userId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v3/users/{user-id}\".replace(\"{\" + \"user-id\" + \"}\", String(userId)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get the details of all users.\n     * An endpoint for retrieving the details of all users.\n     * @param limit The number of results to return (2-1000), default is 50.\n     * @param after The entity ID to fetch after the given one.\n     * @param order The order of the records, ASC or DESC; by default ASC\n     * @param include Comma separated additional data to return. Currently supported: total_count\n     * @param statusEq Filter for status, for example active or reset\n     */\n    public getAllUsers(limit?: number, after?: string, order?: string, include?: string, statusEq?: string, callback?: (error: any, data?: UserInfoRespList, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n        if (statusEq !== undefined) {\n            queryParameters[\"status__eq\"] = statusEq;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UserInfoRespList>({\n            url: \"/v3/users\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Details of a user.\n     * An endpoint for retrieving the details of a user.\n     * @param userId The ID or name of the user whose details are retrieved.\n     */\n    public getUser(userId: string, callback?: (error: any, data?: UserInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"userId\" is set\n        if (userId === null || userId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'userId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UserInfoResp>({\n            url: \"/v3/users/{user-id}\".replace(\"{\" + \"user-id\" + \"}\", String(userId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get users of a group.\n     * An endpoint for listing the users of a group with details.\n     * @param groupID The ID of the group whose users are retrieved.\n     * @param limit The number of results to return (2-1000), default is 50.\n     * @param after The entity ID to fetch after the given one.\n     * @param order The order of the records, ASC or DESC; by default ASC\n     * @param include Comma separated additional data to return. Currently supported: total_count\n     */\n    public getUsersOfGroup(groupID: string, limit?: number, after?: string, order?: string, include?: string, callback?: (error: any, data?: UserInfoRespList, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"groupID\" is set\n        if (groupID === null || groupID === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'groupID' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UserInfoRespList>({\n            url: \"/v3/policy-groups/{groupID}/users\".replace(\"{\" + \"groupID\" + \"}\", String(groupID)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Remove users from a group.\n     * An endpoint for removing users from groups.\n     * @param groupID The ID of the group whose users are removed.\n     * @param body A list of users to be removed from the group.\n     */\n    public removeUsersFromGroup(groupID: string, body: SubjectList, callback?: (error: any, data?: UpdatedResponse, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"groupID\" is set\n        if (groupID === null || groupID === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'groupID' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UpdatedResponse>({\n            url: \"/v3/policy-groups/{groupID}/users\".replace(\"{\" + \"groupID\" + \"}\", String(groupID)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Updates attributes of the account.\n     * An endpoint for updating the account.   **Example usage:** &#x60;curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/me -d &#39;{\\&quot;phone_number\\&quot;: \\&quot;12345678\\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer API_KEY&#39;&#x60;\n     * @param body Details of the account to be updated.\n     */\n    public updateMyAccount(body: AccountUpdateReq, callback?: (error: any, data?: AccountInfo, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<AccountInfo>({\n            url: \"/v3/accounts/me\",\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Update user details.\n     * An endpoint for updating user details.\n     * @param userId The ID of the user whose details are updated.\n     * @param body A user object with attributes.\n     */\n    public updateUser(userId: string, body: UserUpdateReq, callback?: (error: any, data?: UserInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"userId\" is set\n        if (userId === null || userId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'userId' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UserInfoResp>({\n            url: \"/v3/users/{user-id}\".replace(\"{\" + \"user-id\" + \"}\", String(userId)),\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n}\n/**\n * DeveloperApi\n */\nexport class DeveloperApi extends ApiBase {\n\n    /**\n     * Create a new API key.\n     * An endpoint for creating a new API key.   **Example usage:** &#x60;curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\\&quot;name\\&quot;: \\&quot;MyKey1\\&quot;,\\&quot;owner\\&quot;: \\&quot;ACCOUNT_ID\\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer API_KEY&#39;&#x60;\n     * @param body The details of the API key to be created.\n     */\n    public createApiKey(body: ApiKeyInfoReq, callback?: (error: any, data?: ApiKeyInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ApiKeyInfoResp>({\n            url: \"/v3/api-keys\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Delete API key.\n     * An endpoint for deleting the API key.   **Example usage:** &#x60;curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer API_KEY&#39;&#x60;\n     * @param apiKey The ID of the API key to be deleted.\n     */\n    public deleteApiKey(apiKey: string, callback?: (error: any, data?: any, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"apiKey\" is set\n        if (apiKey === null || apiKey === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'apiKey' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v3/api-keys/{apiKey}\".replace(\"{\" + \"apiKey\" + \"}\", String(apiKey)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Delete a trusted certificate by ID.\n     * An endpoint for deleting a trusted certificate.\n     * @param certId The ID of the trusted certificate to be deleted.\n     */\n    public deleteCertificate(certId: string, callback?: (error: any, data?: any, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"certId\" is set\n        if (certId === null || certId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'certId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v3/trusted-certificates/{cert-id}\".replace(\"{\" + \"cert-id\" + \"}\", String(certId)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get all API keys\n     * An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** &#x60;curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer API_KEY&#39;&#x60;\n     * @param limit The number of results to return (2-1000), default is 50.\n     * @param after The entity ID to fetch after the given one.\n     * @param order The order of the records, ASC or DESC; by default ASC\n     * @param include Comma separated additional data to return. Currently supported: total_count\n     * @param ownerEq Owner name filter.\n     */\n    public getAllApiKeys(limit?: number, after?: string, order?: string, include?: string, ownerEq?: string, callback?: (error: any, data?: ApiKeyInfoRespList, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n        if (ownerEq !== undefined) {\n            queryParameters[\"owner__eq\"] = ownerEq;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ApiKeyInfoRespList>({\n            url: \"/v3/api-keys\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get all trusted certificates.\n     * An endpoint for retrieving trusted certificates in an array.\n     * @param limit The number of results to return (2-1000), default is 50.\n     * @param after The entity ID to fetch after the given one.\n     * @param order The order of the records, ASC or DESC; by default ASC\n     * @param include Comma separated additional data to return. Currently supported: total_count\n     * @param serviceEq Service filter, either lwm2m or bootstrap\n     * @param expireEq Expire filter in days\n     * @param deviceExecutionModeEq Device execution mode, as 1 for developer certificates or as another natural integer value\n     * @param ownerEq Owner ID filter\n     */\n    public getAllCertificates(limit?: number, after?: string, order?: string, include?: string, serviceEq?: string, expireEq?: number, deviceExecutionModeEq?: number, ownerEq?: string, callback?: (error: any, data?: TrustedCertificateRespList, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n        if (serviceEq !== undefined) {\n            queryParameters[\"service__eq\"] = serviceEq;\n        }\n        if (expireEq !== undefined) {\n            queryParameters[\"expire__eq\"] = expireEq;\n        }\n        if (deviceExecutionModeEq !== undefined) {\n            queryParameters[\"device_execution_mode__eq\"] = deviceExecutionModeEq;\n        }\n        if (ownerEq !== undefined) {\n            queryParameters[\"owner__eq\"] = ownerEq;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<TrustedCertificateRespList>({\n            url: \"/v3/trusted-certificates\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get all group information.\n     * An endpoint for retrieving all group information.\n     * @param limit The number of results to return (2-1000), default is 50.\n     * @param after The entity ID to fetch after the given one.\n     * @param order The order of the records, ASC or DESC; by default ASC\n     * @param include Comma separated additional data to return. Currently supported: total_count\n     */\n    public getAllGroups(limit?: number, after?: string, order?: string, include?: string, callback?: (error: any, data?: GroupSummaryList, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<GroupSummaryList>({\n            url: \"/v3/policy-groups\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get API key details.\n     * An endpoint for retrieving API key details.\n     * @param apiKey The ID of the API key to be retrieved.\n     */\n    public getApiKey(apiKey: string, callback?: (error: any, data?: ApiKeyInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"apiKey\" is set\n        if (apiKey === null || apiKey === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'apiKey' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ApiKeyInfoResp>({\n            url: \"/v3/api-keys/{apiKey}\".replace(\"{\" + \"apiKey\" + \"}\", String(apiKey)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get the API keys of a group.\n     * An endpoint for listing the API keys of the group with details.\n     * @param groupID The ID of the group whose API keys are retrieved.\n     * @param limit The number of results to return (2-1000), default is 50.\n     * @param after The entity ID to fetch after the given one.\n     * @param order The order of the records, ASC or DESC; by default ASC\n     * @param include Comma separated additional data to return. Currently supported: total_count\n     */\n    public getApiKeysOfGroup(groupID: string, limit?: number, after?: string, order?: string, include?: string, callback?: (error: any, data?: ApiKeyInfoRespList, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"groupID\" is set\n        if (groupID === null || groupID === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'groupID' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ApiKeyInfoRespList>({\n            url: \"/v3/policy-groups/{groupID}/api-keys\".replace(\"{\" + \"groupID\" + \"}\", String(groupID)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get trusted certificate by ID.\n     * An endpoint for retrieving a trusted certificate by ID.   **Example usage:** &#x60;curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer API_KEY&#39;&#x60; \n     * @param certId The ID or name of the trusted certificate to be retrieved.\n     */\n    public getCertificate(certId: string, callback?: (error: any, data?: TrustedCertificateResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"certId\" is set\n        if (certId === null || certId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'certId' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<TrustedCertificateResp>({\n            url: \"/v3/trusted-certificates/{cert-id}\".replace(\"{\" + \"cert-id\" + \"}\", String(certId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get group information.\n     * An endpoint for getting general information about the group.\n     * @param groupID The ID or name of the group to be retrieved.\n     */\n    public getGroupSummary(groupID: string, callback?: (error: any, data?: GroupSummary, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"groupID\" is set\n        if (groupID === null || groupID === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'groupID' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<GroupSummary>({\n            url: \"/v3/policy-groups/{groupID}\".replace(\"{\" + \"groupID\" + \"}\", String(groupID)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get account info.\n     * Returns detailed information about the account.   **Example usage:** &#x60;curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer API_KEY&#39;&#x60; .\n     * @param include Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.\n     */\n    public getMyAccountInfo(include?: string, callback?: (error: any, data?: AccountInfo, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<AccountInfo>({\n            url: \"/v3/accounts/me\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Get API key details.\n     * An endpoint for retrieving API key details.   **Example usage:** &#x60;curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer API_KEY&#39;&#x60;\n     */\n    public getMyApiKey(callback?: (error: any, data?: ApiKeyInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ApiKeyInfoResp>({\n            url: \"/v3/api-keys/me\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Details of the current user.\n     * An endpoint for retrieving the details of the logged in user.   **Example usage:** &#x60;curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer API_KEY&#39;&#x60; \n     * @param scratchCodes Request to regenerate new emergency scratch codes.\n     */\n    public getMyUser(scratchCodes?: string, callback?: (error: any, data?: MyUserInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (scratchCodes !== undefined) {\n            queryParameters[\"scratch_codes\"] = scratchCodes;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<MyUserInfoResp>({\n            url: \"/v3/users/me\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n        }, callback);\n    }\n    /**\n     * Remove API keys from a group.\n     * An endpoint for removing API keys from groups.\n     * @param groupID The ID of the group whose API keys are removed.\n     * @param body A list of API keys to be removed from the group.\n     */\n    public removeApiKeysFromGroup(groupID: string, body: SubjectList, callback?: (error: any, data?: UpdatedResponse, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"groupID\" is set\n        if (groupID === null || groupID === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'groupID' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UpdatedResponse>({\n            url: \"/v3/policy-groups/{groupID}/api-keys\".replace(\"{\" + \"groupID\" + \"}\", String(groupID)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Update API key details.\n     * An endpoint for updating API key details.\n     * @param apiKey The ID of the API key to be updated.\n     * @param body New API key attributes to be stored.\n     */\n    public updateApiKey(apiKey: string, body: ApiKeyUpdateReq, callback?: (error: any, data?: ApiKeyInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"apiKey\" is set\n        if (apiKey === null || apiKey === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'apiKey' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ApiKeyInfoResp>({\n            url: \"/v3/api-keys/{apiKey}\".replace(\"{\" + \"apiKey\" + \"}\", String(apiKey)),\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Update trusted certificate.\n     * An endpoint for updating existing trusted certificates.   **Example usage:** &#x60;curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\\&quot;description\\&quot;: \\&quot;very important cert\\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer API_KEY&#39;&#x60; \n     * @param certId The ID of the trusted certificate to be updated.\n     * @param body A trusted certificate object with attributes.\n     */\n    public updateCertificate(certId: string, body: TrustedCertificateUpdateReq, callback?: (error: any, data?: TrustedCertificateResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"certId\" is set\n        if (certId === null || certId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'certId' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<TrustedCertificateResp>({\n            url: \"/v3/trusted-certificates/{cert-id}\".replace(\"{\" + \"cert-id\" + \"}\", String(certId)),\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Update API key details.\n     * An endpoint for updating API key details.   **Example usage:** &#x60;curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\\&quot;name\\&quot;: \\&quot;TestApiKey25\\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer API_KEY&#39;&#x60;\n     * @param body New API key attributes to be stored.\n     */\n    public updateMyApiKey(body: ApiKeyUpdateReq, callback?: (error: any, data?: ApiKeyInfoResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ApiKeyInfoResp>({\n            url: \"/v3/api-keys/me\",\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Update user details.\n     * An endpoint for updating the details of the logged in user.   **Example usage:** &#x60;curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\\&quot;address\\&quot;: \\&quot;1007 Mountain Drive\\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer API_KEY&#39;&#x60; \n     * @param body New attributes for the logged in user.\n     */\n    public updateMyUser(body: UserUpdateReq, callback?: (error: any, data?: UserUpdateResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<UserUpdateResp>({\n            url: \"/v3/users/me\",\n            method: \"PUT\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            body: body,\n        }, callback);\n    }\n}\n"]}