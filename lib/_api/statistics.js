"use strict";
// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================
/**
 * Connect Statistics API
 * mbed Cloud Connect Statistics API provides statistics about other cloud services through defined counters.
 *
 * OpenAPI spec version: 3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apiBase_1 = require("../common/apiBase");
var sdkError_1 = require("../common/sdkError");
/**
 * AccountApi
 */
var AccountApi = (function (_super) {
    __extends(AccountApi, _super);
    function AccountApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Provides account-specific statistics for other cloud services.
     * This REST API is used to get account-specific statistics.
     * @param include A comma-separated list of requested metrics and total_count ( if included, the response will contain total_count to specify total number of records available). Supported values are:  - &#x60;transactions&#x60; - &#x60;registered_devices&#x60; - &#x60;bootstraps_successful&#x60; - &#x60;bootstraps_failed&#x60; - &#x60;bootstraps_pending&#x60; - &#x60;handshakes_successful&#x60; - &#x60;handshakes_failed&#x60; - &#x60;device_server_rest_api_success&#x60; - &#x60;device_server_rest_api_error&#x60; - &#x60;total_count&#x60;
     * @param interval Group data by this interval in minutes, hours, days or weeks. Sample values: 5m, 2h, 3d, 4w. The maximum interval cannot exceed more than one year ( 365 days ) and so the allowed ranges are 5m - 525600m / 1h - 8760h / 1d - 365d / 1w - 53w.
     * @param authorization Bearer {Access Token}. A valid API Gateway access token. The token is validated and the associated account identifier is used to retrieve account-specific statistics.
     * @param start UTC time/year/date in RFC3339 format. Fetch the data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The maximum time between start and end parameters cannot exceed more than one year (365 days). The parameter is not mandatory, if the period is specified.
     * @param end UTC time/year/date in RFC3339 format. Fetch the data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The maximum time between start and end parameters cannot exceed more than one year ( 365 days ). The parameter is not mandatory, if the period is specified.
     * @param period Period. Fetch the data for the period in minutes, hours, days or weeks. Sample values: 5m, 2h, 3d, 4w. The parameter is not mandatory, if the start and end time are specified. The maximum period cannot exceed more than one year ( 365 days ) and so the allowed ranges are 5m - 525600m / 1h - 8760h / 1d - 365d / 1w - 53w.
     * @param limit The number of results to return. Default value is 50, minimum value is 2 and maximum value is 1000.
     * @param after The metric ID after which to start fetching.
     * @param order The order of the records to return. Available values are ASC and DESC. The default value is ASC.
     */
    AccountApi.prototype.v3MetricsGet = function (include, interval, authorization, start, end, period, limit, after, order, callback) {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'include' missing."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'interval' missing."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'authorization' missing."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/metrics',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return AccountApi;
}(apiBase_1.ApiBase));
exports.AccountApi = AccountApi;
/**
 * StatisticsApi
 */
var StatisticsApi = (function (_super) {
    __extends(StatisticsApi, _super);
    function StatisticsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Provides account-specific statistics for other cloud services.
     * This REST API is used to get account-specific statistics.
     * @param include A comma-separated list of requested metrics and total_count ( if included, the response will contain total_count to specify total number of records available). Supported values are:  - &#x60;transactions&#x60; - &#x60;registered_devices&#x60; - &#x60;bootstraps_successful&#x60; - &#x60;bootstraps_failed&#x60; - &#x60;bootstraps_pending&#x60; - &#x60;handshakes_successful&#x60; - &#x60;handshakes_failed&#x60; - &#x60;device_server_rest_api_success&#x60; - &#x60;device_server_rest_api_error&#x60; - &#x60;total_count&#x60;
     * @param interval Group data by this interval in minutes, hours, days or weeks. Sample values: 5m, 2h, 3d, 4w. The maximum interval cannot exceed more than one year ( 365 days ) and so the allowed ranges are 5m - 525600m / 1h - 8760h / 1d - 365d / 1w - 53w.
     * @param authorization Bearer {Access Token}. A valid API Gateway access token. The token is validated and the associated account identifier is used to retrieve account-specific statistics.
     * @param start UTC time/year/date in RFC3339 format. Fetch the data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The maximum time between start and end parameters cannot exceed more than one year (365 days). The parameter is not mandatory, if the period is specified.
     * @param end UTC time/year/date in RFC3339 format. Fetch the data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The maximum time between start and end parameters cannot exceed more than one year ( 365 days ). The parameter is not mandatory, if the period is specified.
     * @param period Period. Fetch the data for the period in minutes, hours, days or weeks. Sample values: 5m, 2h, 3d, 4w. The parameter is not mandatory, if the start and end time are specified. The maximum period cannot exceed more than one year ( 365 days ) and so the allowed ranges are 5m - 525600m / 1h - 8760h / 1d - 365d / 1w - 53w.
     * @param limit The number of results to return. Default value is 50, minimum value is 2 and maximum value is 1000.
     * @param after The metric ID after which to start fetching.
     * @param order The order of the records to return. Available values are ASC and DESC. The default value is ASC.
     */
    StatisticsApi.prototype.v3MetricsGet = function (include, interval, authorization, start, end, period, limit, after, order, callback) {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'include' missing."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'interval' missing."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'authorization' missing."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/metrics',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return StatisticsApi;
}(apiBase_1.ApiBase));
exports.StatisticsApi = StatisticsApi;
