/**
 * mbed Cloud Connector Statistics REST API
 * mbed Cloud Connector Statistics REST API provides statistics about other cloud services through defined counters.
 *
 * OpenAPI spec version: 3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apiBase_1 = require("../common/apiBase");
/**
 * AccountApi
 */
var AccountApi = (function (_super) {
    __extends(AccountApi, _super);
    function AccountApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * provides account specific statistics for other cloud services
     * This REST API will be used to get account specific statistics
     * @param include Comma-separated list of requested metrics. Supported values are bootstraps_successful, bootstraps_failed, bootstraps_pending, bootstrap_certificate_create, bootstrap_certificate_delete, connector_certificate_create,  connector_certificate_delete, bootstrap_credentials_get, bootstrap_full_credentials_get, connector_credentials_get, connector_full_credentials_get, connector_ca_rest_api_count, connector_ca_rest_api_error_count
     * @param start UTC time/year/date in RFC3339 format. Fetch data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The parameter is not mandatory, if period specified.
     * @param end UTC time / year / date in RFC3339 format. Fetch data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207.The parameter is not mandatory, if period specified.
     * @param period Period. Fetch data for the period in days, weeks or hours. Sample values: 2h, 3w, 4d. The parameter is not mandatory, if start and end time are specified.
     * @param interval Group data by this interval in days, weeks or hours. Sample values: 2h, 3w, 4d.
     * @param authorization Bearer {Access Token}. A valid ApiGateway access token. The token is validated and the associated account identifier is used to retrieve account specific statistics.
     */
    AccountApi.prototype.v3MetricsGet = function (include, start, end, period, interval, authorization, callback) {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'include' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "start" is set
        if (start === null || start === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'start' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "end" is set
        if (end === null || end === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'end' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "period" is set
        if (period === null || period === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'period' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'interval' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/metrics',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return AccountApi;
}(apiBase_1.ApiBase));
exports.AccountApi = AccountApi;
/**
 * AdminApi
 */
var AdminApi = (function (_super) {
    __extends(AdminApi, _super);
    function AdminApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * provides global statistics for other cloud services
     * This REST API will be used to get global statistics
     * @param include Comma-separated list of requested metrics. Supported values are bootstraps_successful, bootstraps_failed, bootstraps_pending, bootstrap_certificate_create, bootstrap_certificate_delete, connector_certificate_create,  connector_certificate_delete, bootstrap_credentials_get, bootstrap_full_credentials_get, connector_credentials_get, connector_full_credentials_get, connector_ca_rest_api_count, connector_ca_rest_api_error_count
     * @param start UTC time/year/date in RFC3339 format. Fetch data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The parameter is not mandatory, if period specified.
     * @param end UTC time / year / date in RFC3339 format. Fetch data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207.The parameter is not mandatory, if period specified.
     * @param period Period. Fetch data for the period in days, weeks or hours. Sample values: 2h, 3w, 4d. The parameter is not mandatory, if start and end time are specified.
     * @param interval Group data by this interval in days, weeks or hours. Sample values: 2h, 3w, 4d.
     * @param authorization Bearer {Access Token}. A valid ApiGateway access token. The token is validated and the associated account identifier is used to retrieve account specific statistics.
     */
    AdminApi.prototype.v3MetricsGlobalGet = function (include, start, end, period, interval, authorization, callback) {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'include' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "start" is set
        if (start === null || start === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'start' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "end" is set
        if (end === null || end === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'end' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "period" is set
        if (period === null || period === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'period' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'interval' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/metrics/global',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return AdminApi;
}(apiBase_1.ApiBase));
exports.AdminApi = AdminApi;
/**
 * StatisticsApi
 */
var StatisticsApi = (function (_super) {
    __extends(StatisticsApi, _super);
    function StatisticsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * provides account specific statistics for other cloud services
     * This REST API will be used to get account specific statistics
     * @param include Comma-separated list of requested metrics. Supported values are bootstraps_successful, bootstraps_failed, bootstraps_pending, bootstrap_certificate_create, bootstrap_certificate_delete, connector_certificate_create,  connector_certificate_delete, bootstrap_credentials_get, bootstrap_full_credentials_get, connector_credentials_get, connector_full_credentials_get, connector_ca_rest_api_count, connector_ca_rest_api_error_count
     * @param start UTC time/year/date in RFC3339 format. Fetch data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The parameter is not mandatory, if period specified.
     * @param end UTC time / year / date in RFC3339 format. Fetch data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207.The parameter is not mandatory, if period specified.
     * @param period Period. Fetch data for the period in days, weeks or hours. Sample values: 2h, 3w, 4d. The parameter is not mandatory, if start and end time are specified.
     * @param interval Group data by this interval in days, weeks or hours. Sample values: 2h, 3w, 4d.
     * @param authorization Bearer {Access Token}. A valid ApiGateway access token. The token is validated and the associated account identifier is used to retrieve account specific statistics.
     */
    StatisticsApi.prototype.v3MetricsGet = function (include, start, end, period, interval, authorization, callback) {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'include' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "start" is set
        if (start === null || start === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'start' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "end" is set
        if (end === null || end === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'end' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "period" is set
        if (period === null || period === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'period' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'interval' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/metrics',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * provides global statistics for other cloud services
     * This REST API will be used to get global statistics
     * @param include Comma-separated list of requested metrics. Supported values are bootstraps_successful, bootstraps_failed, bootstraps_pending, bootstrap_certificate_create, bootstrap_certificate_delete, connector_certificate_create,  connector_certificate_delete, bootstrap_credentials_get, bootstrap_full_credentials_get, connector_credentials_get, connector_full_credentials_get, connector_ca_rest_api_count, connector_ca_rest_api_error_count
     * @param start UTC time/year/date in RFC3339 format. Fetch data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The parameter is not mandatory, if period specified.
     * @param end UTC time / year / date in RFC3339 format. Fetch data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207.The parameter is not mandatory, if period specified.
     * @param period Period. Fetch data for the period in days, weeks or hours. Sample values: 2h, 3w, 4d. The parameter is not mandatory, if start and end time are specified.
     * @param interval Group data by this interval in days, weeks or hours. Sample values: 2h, 3w, 4d.
     * @param authorization Bearer {Access Token}. A valid ApiGateway access token. The token is validated and the associated account identifier is used to retrieve account specific statistics.
     */
    StatisticsApi.prototype.v3MetricsGlobalGet = function (include, start, end, period, interval, authorization, callback) {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'include' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "start" is set
        if (start === null || start === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'start' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "end" is set
        if (end === null || end === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'end' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "period" is set
        if (period === null || period === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'period' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'interval' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/metrics/global',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return StatisticsApi;
}(apiBase_1.ApiBase));
exports.StatisticsApi = StatisticsApi;
