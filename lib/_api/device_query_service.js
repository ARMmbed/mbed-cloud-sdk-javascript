/**
 * Device Query Service API
 * This is the API Documentation for the mbed device query service update service.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apiBase_1 = require("../common/apiBase");
/**
 * DefaultApi
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Create device query&lt;/p&gt;
     * @param name The name of the query
     * @param query The device query
     * @param description The description of the object
     * @param object The API resource entity
     * @param queryId DEPRECATED: The ID of the query
     */
    DefaultApi.prototype.deviceQueryCreate = function (name, query, description, object, queryId, callback) {
        // verify required parameter "name" is set
        if (name === null || name === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'name' missing when calling 'deviceQueryCreate'."));
            }
            return;
        }
        // verify required parameter "query" is set
        if (query === null || query === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'query' missing when calling 'deviceQueryCreate'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        if (description !== undefined) {
            formParams['description'] = description;
        }
        if (name !== undefined) {
            formParams['name'] = name;
        }
        if (object !== undefined) {
            formParams['object'] = object;
        }
        if (query !== undefined) {
            formParams['query'] = query;
        }
        if (queryId !== undefined) {
            formParams['query_id'] = queryId;
        }
        return this.request({
            url: '/v3/device-queries/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Delete device query&lt;/p&gt;
     * @param queryId
     */
    DefaultApi.prototype.deviceQueryDestroy = function (queryId, callback) {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryDestroy'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;List all device queries. The result will be paged into pages of 100.&lt;/p&gt;
     * @param limit
     * @param order
     * @param after
     * @param include
     */
    DefaultApi.prototype.deviceQueryList = function (limit, order, after, include, callback) {
        var headerParams = {};
        var queryParameters = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/device-queries/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Update device query fields&lt;/p&gt;
     * @param queryId
     * @param description The description of the object
     * @param name The name of the query
     * @param object The API resource entity
     * @param query The device query
     * @param queryId2 DEPRECATED: The ID of the query
     */
    DefaultApi.prototype.deviceQueryPartialUpdate = function (queryId, description, name, object, query, queryId2, callback) {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryPartialUpdate'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        if (description !== undefined) {
            formParams['description'] = description;
        }
        if (name !== undefined) {
            formParams['name'] = name;
        }
        if (object !== undefined) {
            formParams['object'] = object;
        }
        if (query !== undefined) {
            formParams['query'] = query;
        }
        if (queryId2 !== undefined) {
            formParams['query_id'] = queryId2;
        }
        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'PATCH',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Retrieve device query.&lt;/p&gt;
     * @param queryId
     */
    DefaultApi.prototype.deviceQueryRetrieve = function (queryId, callback) {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryRetrieve'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Update device query.&lt;/p&gt;
     * @param queryId
     * @param body Device query update object
     */
    DefaultApi.prototype.deviceQueryUpdate = function (queryId, body, callback) {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryUpdate'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'deviceQueryUpdate'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    };
    return DefaultApi;
}(apiBase_1.ApiBase));
exports.DefaultApi = DefaultApi;
