/**
 * Provisioning endpoints - production line certificates.
 * A producton line certificate is used to associate a specific installation of the Factory Tool with an mbed Cloud account.  The production line certificate is generated by the Factory Tool, and needs to be uploaded using these APIs.
 *
 * OpenAPI spec version: 0.8
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var apiBase_1 = require("../common/apiBase");
/**
 * DefaultApi
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets the list of production line certificates associated with the account.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     */
    DefaultApi.prototype.v3ProductionLineCertificatesGet = function (authorization, callback) {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesGet'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/production-line-certificates',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Deactivates the production line certificate.  There is no way to reactivate it.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID
     */
    DefaultApi.prototype.v3ProductionLineCertificatesMUUIDDelete = function (authorization, mUUID, callback) {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesMUUIDDelete'."));
            }
            return;
        }
        // verify required parameter "mUUID" is set
        if (mUUID === null || mUUID === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'mUUID' missing when calling 'v3ProductionLineCertificatesMUUIDDelete'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/production-line-certificates/{mUUID}'.replace('{' + 'mUUID' + '}', String(mUUID)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Gets a single production line certificate by its mUUID.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID.
     */
    DefaultApi.prototype.v3ProductionLineCertificatesMUUIDGet = function (authorization, mUUID, callback) {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesMUUIDGet'."));
            }
            return;
        }
        // verify required parameter "mUUID" is set
        if (mUUID === null || mUUID === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'mUUID' missing when calling 'v3ProductionLineCertificatesMUUIDGet'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/production-line-certificates/{mUUID}'.replace('{' + 'mUUID' + '}', String(mUUID)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Updates the comment on a production line certificate.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID
     * @param body
     */
    DefaultApi.prototype.v3ProductionLineCertificatesMUUIDPut = function (authorization, mUUID, body, callback) {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesMUUIDPut'."));
            }
            return;
        }
        // verify required parameter "mUUID" is set
        if (mUUID === null || mUUID === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'mUUID' missing when calling 'v3ProductionLineCertificatesMUUIDPut'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'v3ProductionLineCertificatesMUUIDPut'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/production-line-certificates/{mUUID}'.replace('{' + 'mUUID' + '}', String(mUUID)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    };
    /**
     * Adds a new production line certificate to the account.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param body
     */
    DefaultApi.prototype.v3ProductionLineCertificatesPost = function (authorization, body, callback) {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesPost'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'v3ProductionLineCertificatesPost'."));
            }
            return;
        }
        var headerParams = {};
        headerParams['Authorization'] = authorization;
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/production-line-certificates',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    };
    return DefaultApi;
}(apiBase_1.ApiBase));
exports.DefaultApi = DefaultApi;
