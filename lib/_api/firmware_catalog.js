/**
 * Firmware Catalog API
 * This is the API Documentation for the mbed firmware catalog service which is part of the update service.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var apiBase_1 = require("../common/apiBase");
/**
 * DefaultApi
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
     */
    DefaultApi.prototype.deployInfoGET = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/fc_deploy_info',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Create firmware image&lt;/p&gt;&lt;pre&gt;YAMLError:  while scanning a simple key   in \&quot;&lt;unicode string&gt;\&quot;, line 16, column 9:             Cannot validate the data used to ...              ^ could not find expected &#39;:&#39;   in \&quot;&lt;unicode string&gt;\&quot;, line 17, column 5:         - code: 401         ^&lt;/pre&gt;
     * @param datafile The binary file of firmware image
     * @param name The name of the object
     * @param description The description of the object
     * @param updatingRequestId
     * @param updatingIpAddress
     * @param name2
     * @param description2
     * @param createdAt
     * @param updatedAt
     * @param datafileChecksum
     * @param etag
     * @param imageId
     * @param object
     */
    DefaultApi.prototype.firmwareImageCreate = function (datafile, name, description, updatingRequestId, updatingIpAddress, name2, description2, createdAt, updatedAt, datafileChecksum, etag, imageId, object, callback) {
        // verify required parameter "datafile" is set
        if (datafile === null || datafile === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'datafile' missing when calling 'firmwareImageCreate'."));
            }
            return;
        }
        // verify required parameter "name" is set
        if (name === null || name === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'name' missing when calling 'firmwareImageCreate'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }
        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }
        if (name2 !== undefined) {
            queryParameters['name'] = name2;
        }
        if (description2 !== undefined) {
            queryParameters['description'] = description2;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (imageId !== undefined) {
            queryParameters['image_id'] = imageId;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }
        var useFormData = false;
        var formParams = {};
        if (datafile !== undefined) {
            formParams['datafile'] = datafile;
        }
        useFormData = true;
        if (description !== undefined) {
            formParams['description'] = description;
        }
        if (name !== undefined) {
            formParams['name'] = name;
        }
        return this.request({
            url: '/v3/firmware-images/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Delete firmware image&lt;/p&gt;
     * @param imageId The ID of the firmware image
     * @param updatingRequestId
     * @param updatingIpAddress
     * @param name
     * @param description
     * @param createdAt
     * @param updatedAt
     * @param datafileChecksum
     * @param etag
     * @param object
     */
    DefaultApi.prototype.firmwareImageDestroy = function (imageId, updatingRequestId, updatingIpAddress, name, description, createdAt, updatedAt, datafileChecksum, etag, object, callback) {
        // verify required parameter "imageId" is set
        if (imageId === null || imageId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'imageId' missing when calling 'firmwareImageDestroy'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }
        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        if (description !== undefined) {
            queryParameters['description'] = description;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/firmware-images/{image_id}/'.replace('{' + 'image_id' + '}', String(imageId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;List all firmware images. The result will be paged into pages of 100.&lt;/p&gt;
     * @param limit
     * @param order
     * @param after
     * @param include
     */
    DefaultApi.prototype.firmwareImageList = function (limit, order, after, include, callback) {
        var headerParams = {};
        var queryParameters = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/firmware-images/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Retrieve firmware image&lt;/p&gt;
     * @param imageId The ID of the firmware image
     * @param updatingRequestId
     * @param updatingIpAddress
     * @param name
     * @param description
     * @param createdAt
     * @param updatedAt
     * @param datafileChecksum
     * @param etag
     * @param object
     */
    DefaultApi.prototype.firmwareImageRetrieve = function (imageId, updatingRequestId, updatingIpAddress, name, description, createdAt, updatedAt, datafileChecksum, etag, object, callback) {
        // verify required parameter "imageId" is set
        if (imageId === null || imageId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'imageId' missing when calling 'firmwareImageRetrieve'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }
        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        if (description !== undefined) {
            queryParameters['description'] = description;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/firmware-images/{image_id}/'.replace('{' + 'image_id' + '}', String(imageId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Create firmware manifest&lt;/p&gt;
     * @param datafile The manifest file to create
     * @param name The name of the object
     * @param description The description of the object
     */
    DefaultApi.prototype.firmwareManifestCreate = function (datafile, name, description, callback) {
        // verify required parameter "datafile" is set
        if (datafile === null || datafile === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'datafile' missing when calling 'firmwareManifestCreate'."));
            }
            return;
        }
        // verify required parameter "name" is set
        if (name === null || name === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'name' missing when calling 'firmwareManifestCreate'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        if (datafile !== undefined) {
            formParams['datafile'] = datafile;
        }
        useFormData = true;
        if (description !== undefined) {
            formParams['description'] = description;
        }
        if (name !== undefined) {
            formParams['name'] = name;
        }
        return this.request({
            url: '/v3/firmware-manifests/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Delete firmware manifest&lt;/p&gt;
     * @param manifestId The ID of the firmware manifest
     */
    DefaultApi.prototype.firmwareManifestDestroy = function (manifestId, callback) {
        // verify required parameter "manifestId" is set
        if (manifestId === null || manifestId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'manifestId' missing when calling 'firmwareManifestDestroy'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/firmware-manifests/{manifest_id}/'.replace('{' + 'manifest_id' + '}', String(manifestId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;List all firmware manifests&lt;/p&gt;
     * @param limit
     * @param order
     * @param after
     * @param include
     */
    DefaultApi.prototype.firmwareManifestList = function (limit, order, after, include, callback) {
        var headerParams = {};
        var queryParameters = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/firmware-manifests/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Retrieve firmware manifest&lt;/p&gt;
     * @param manifestId The ID of the firmware manifest
     * @param updatingRequestId
     * @param updatingIpAddress
     * @param name
     * @param description
     * @param createdAt
     * @param updatedAt
     * @param datafileChecksum
     * @param deviceClass
     * @param etag
     * @param object
     * @param timestamp
     */
    DefaultApi.prototype.firmwareManifestRetrieve = function (manifestId, updatingRequestId, updatingIpAddress, name, description, createdAt, updatedAt, datafileChecksum, deviceClass, etag, object, timestamp, callback) {
        // verify required parameter "manifestId" is set
        if (manifestId === null || manifestId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'manifestId' missing when calling 'firmwareManifestRetrieve'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }
        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        if (description !== undefined) {
            queryParameters['description'] = description;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }
        if (deviceClass !== undefined) {
            queryParameters['device_class'] = deviceClass;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }
        if (timestamp !== undefined) {
            queryParameters['timestamp'] = timestamp;
        }
        var useFormData = false;
        var formParams = {};
        if (manifestId !== undefined) {
            formParams['manifest_id'] = manifestId;
        }
        return this.request({
            url: '/v3/firmware-manifests/{manifest_id}/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return DefaultApi;
}(apiBase_1.ApiBase));
exports.DefaultApi = DefaultApi;
