/**
 * Device Catalog API
 * This is the API Documentation for the mbed device catalog update service.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apiBase_1 = require("../common/apiBase");
/**
 * DefaultApi
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
     * @param mechanism The ID of the channel used to communicate with the device
     * @param provisionKey The key used to provision the device
     * @param accountId The owning IAM account ID
     * @param autoUpdate Mark this device for auto firmware update
     * @param bootstrappedTimestamp
     * @param createdAt
     * @param customAttributes Up to 5 custom JSON attributes
     * @param deployedState The state of the device&#39;s deployment
     * @param deployment The last deployment used on the device
     * @param description The description of the object
     * @param deviceClass
     * @param deviceId DEPRECATED: The ID of the device
     * @param etag The entity instance signature
     * @param id The ID of the device
     * @param manifest URL for the current device manifest
     * @param mechanismUrl The address of the connector to use
     * @param name The name of the object
     * @param object The API resource entity
     * @param serialNumber The serial number of the device
     * @param state The current state of the device
     * @param trustClass The device trust class
     * @param trustLevel The device trust level
     * @param updatedAt The time the object was updated
     * @param vendorId The device vendor ID
     */
    DefaultApi.prototype.deviceCreate = function (mechanism, provisionKey, accountId, autoUpdate, bootstrappedTimestamp, createdAt, customAttributes, deployedState, deployment, description, deviceClass, deviceId, etag, id, manifest, mechanismUrl, name, object, serialNumber, state, trustClass, trustLevel, updatedAt, vendorId, callback) {
        // verify required parameter "mechanism" is set
        if (mechanism === null || mechanism === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'mechanism' missing when calling 'deviceCreate'."));
            }
            return;
        }
        // verify required parameter "provisionKey" is set
        if (provisionKey === null || provisionKey === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'provisionKey' missing when calling 'deviceCreate'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        if (accountId !== undefined) {
            formParams['account_id'] = accountId;
        }
        if (autoUpdate !== undefined) {
            formParams['auto_update'] = autoUpdate;
        }
        if (bootstrappedTimestamp !== undefined) {
            formParams['bootstrapped_timestamp'] = bootstrappedTimestamp;
        }
        if (createdAt !== undefined) {
            formParams['created_at'] = createdAt;
        }
        if (customAttributes !== undefined) {
            formParams['custom_attributes'] = customAttributes;
        }
        if (deployedState !== undefined) {
            formParams['deployed_state'] = deployedState;
        }
        if (deployment !== undefined) {
            formParams['deployment'] = deployment;
        }
        if (description !== undefined) {
            formParams['description'] = description;
        }
        if (deviceClass !== undefined) {
            formParams['device_class'] = deviceClass;
        }
        if (deviceId !== undefined) {
            formParams['device_id'] = deviceId;
        }
        if (etag !== undefined) {
            formParams['etag'] = etag;
        }
        if (id !== undefined) {
            formParams['id'] = id;
        }
        if (manifest !== undefined) {
            formParams['manifest'] = manifest;
        }
        if (mechanism !== undefined) {
            formParams['mechanism'] = mechanism;
        }
        if (mechanismUrl !== undefined) {
            formParams['mechanism_url'] = mechanismUrl;
        }
        if (name !== undefined) {
            formParams['name'] = name;
        }
        if (object !== undefined) {
            formParams['object'] = object;
        }
        if (provisionKey !== undefined) {
            formParams['provision_key'] = provisionKey;
        }
        if (serialNumber !== undefined) {
            formParams['serial_number'] = serialNumber;
        }
        if (state !== undefined) {
            formParams['state'] = state;
        }
        if (trustClass !== undefined) {
            formParams['trust_class'] = trustClass;
        }
        if (trustLevel !== undefined) {
            formParams['trust_level'] = trustLevel;
        }
        if (updatedAt !== undefined) {
            formParams['updated_at'] = updatedAt;
        }
        if (vendorId !== undefined) {
            formParams['vendor_id'] = vendorId;
        }
        return this.request({
            url: '/v3/devices/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
     * @param deviceId
     */
    DefaultApi.prototype.deviceDestroy = function (deviceId, callback) {
        // verify required parameter "deviceId" is set
        if (deviceId === null || deviceId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceId' missing when calling 'deviceDestroy'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/devices/{device_id}/'.replace('{' + 'device_id' + '}', String(deviceId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
     * @param limit
     * @param order
     * @param after
     * @param filter
     * @param include
     */
    DefaultApi.prototype.deviceList = function (limit, order, after, filter, include, callback) {
        var headerParams = {};
        var queryParameters = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/devices/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
     * @param limit
     * @param order
     * @param after
     * @param filter
     * @param include
     */
    DefaultApi.prototype.deviceLogList = function (limit, order, after, filter, include, callback) {
        var headerParams = {};
        var queryParameters = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/devicelog/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
     * @param deviceLogId
     */
    DefaultApi.prototype.deviceLogRetrieve = function (deviceLogId, callback) {
        // verify required parameter "deviceLogId" is set
        if (deviceLogId === null || deviceLogId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceLogId' missing when calling 'deviceLogRetrieve'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/devicelog/{device_log_id}/'.replace('{' + 'device_log_id' + '}', String(deviceLogId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
     * @param deviceId The ID of the device
     */
    DefaultApi.prototype.devicePartialUpdate = function (deviceId, callback) {
        // verify required parameter "deviceId" is set
        if (deviceId === null || deviceId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceId' missing when calling 'devicePartialUpdate'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/devices/{device_id}/'.replace('{' + 'device_id' + '}', String(deviceId)),
            method: 'PATCH',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
     * @param deviceId
     */
    DefaultApi.prototype.deviceRetrieve = function (deviceId, callback) {
        // verify required parameter "deviceId" is set
        if (deviceId === null || deviceId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceId' missing when calling 'deviceRetrieve'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/devices/{device_id}/'.replace('{' + 'device_id' + '}', String(deviceId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
     * @param deviceId The ID of the device
     * @param body Device object to update
     */
    DefaultApi.prototype.deviceUpdate = function (deviceId, body, callback) {
        // verify required parameter "deviceId" is set
        if (deviceId === null || deviceId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceId' missing when calling 'deviceUpdate'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'deviceUpdate'."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v3/devices/{device_id}/'.replace('{' + 'device_id' + '}', String(deviceId)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    };
    return DefaultApi;
}(apiBase_1.ApiBase));
exports.DefaultApi = DefaultApi;
