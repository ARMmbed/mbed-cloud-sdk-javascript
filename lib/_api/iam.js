"use strict";
/**
 * IAM Identities REST API
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var superagent = require("superagent");
var defaultBasePath = 'https://api.mbedcloud.com';
function request(options, callback) {
    var url = options.uri;
    // Normalize slashes in url
    url = url.replace(/([:])?\/+/g, function ($0, $1) {
        return $1 ? $0 : "/";
    });
    var request = superagent(options.method, url);
    if (options.auth && (options.auth.username || options.auth.password)) {
        request.auth(options.auth.username || '', options.auth.password || '');
    }
    // set query parameters
    request.query(normalizeParams(options.qs));
    // set header parameters
    request.set(normalizeParams(options.headers));
    // set request timeout
    request.timeout(60000);
    if (options.json) {
        request.type("application/json");
        request.accept("application/json");
    }
    if (options.form) {
        request.type("application/x-www-form-urlencoded");
        request.send(normalizeParams(options.form));
    }
    else if (options.formData) {
        request.type("multipart/form-data");
        var formParams = normalizeParams(options.formData);
        for (var key in formParams) {
            if (formParams.hasOwnProperty(key)) {
                if (isFileParam(formParams[key])) {
                    // file field
                    request.attach(key, formParams[key]);
                }
                else {
                    request.field(key, formParams[key]);
                }
            }
        }
    }
    else if (options.body) {
        request.send(options.body);
    }
    request.end(function (error, response) {
        if (callback) {
            var data = null;
            if (response && !error) {
                data = response.body || response.text;
            }
            callback(error, data, response);
        }
    });
    return request;
}
exports.request = request;
/**
* Normalizes parameter values:
* <ul>
* <li>remove nils</li>
* <li>keep files and arrays</li>
* <li>format to string with `paramToString` for other cases</li>
* </ul>
* @param {Object.<String, Object>} params The parameters as object properties.
* @returns {Object.<String, Object>} normalized parameters.
*/
function normalizeParams(params) {
    var newParams = {};
    for (var key in params) {
        if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
            var value = params[key];
            if (isFileParam(value) || Array.isArray(value)) {
                newParams[key] = value;
            }
            else {
                newParams[key] = paramToString(value);
            }
        }
    }
    return newParams;
}
exports.normalizeParams = normalizeParams;
/**
* Checks whether the given parameter value represents file-like content.
* @param param The parameter to check.
* @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
*/
function isFileParam(param) {
    // fs.ReadStream in Node.js (but not in runtime like browserify)
    if (typeof window === 'undefined' &&
        typeof require === 'function' &&
        require('fs') &&
        param instanceof require('fs').ReadStream) {
        return true;
    }
    // Buffer in Node.js
    if (typeof Buffer === 'function' && param instanceof Buffer) {
        return true;
    }
    // Blob in browser
    if (typeof Blob === 'function' && param instanceof Blob) {
        return true;
    }
    // File in browser (it seems File object is also instance of Blob, but keep this for safe)
    if (typeof File === 'function' && param instanceof File) {
        return true;
    }
    return false;
}
exports.isFileParam = isFileParam;
/**
* Returns a string representation for an actual parameter.
* @param param The actual parameter.
* @returns {String} The string representation of <code>param</code>.
*/
function paramToString(param) {
    if (param == undefined || param == null) {
        return '';
    }
    if (param instanceof Date) {
        return param.toJSON();
    }
    return param.toString();
}
exports.paramToString = paramToString;
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (_) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
(function (AccountAdminApiApiKeys) {
    AccountAdminApiApiKeys[AccountAdminApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.AccountAdminApiApiKeys || (exports.AccountAdminApiApiKeys = {}));
var AccountAdminApiApiKeys = exports.AccountAdminApiApiKeys;
var AccountAdminApi = (function () {
    function AccountAdminApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AccountAdminApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    AccountAdminApi.prototype.setApiKey = function (key, value) {
        this.authentications[AccountAdminApiApiKeys[key]].apiKey = value;
    };
    AccountAdminApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Upload a new CA certificate.
     * An endpoint for uploading new CA certificates.
     * @param body A CA certificate object with attributes.
     */
    AccountAdminApi.prototype.addCertificate = function (body, callback) {
        var localVarPath = this.basePath + '/v3/ca-certificates';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addCertificate.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Create a new user.
     * An endpoint for creating a new user.
     * @param body A user object with attributes.
     * @param action Action, either &#39;create&#39; or &#39;invite&#39;.
     */
    AccountAdminApi.prototype.createUser = function (body, action, callback) {
        var localVarPath = this.basePath + '/v3/users';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUser.');
        }
        if (action !== undefined) {
            queryParameters['action'] = action;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Delete a CA certificate by ID.
     * An endpoint for deleting a CA certificate.
     * @param caCertId The ID of the CA certificate to be deleted.
     */
    AccountAdminApi.prototype.deleteCertificate = function (caCertId, callback) {
        var localVarPath = this.basePath + '/v3/ca-certificates/{ca-cert-id}'
            .replace('{' + 'ca-cert-id' + '}', String(caCertId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'caCertId' is not null or undefined
        if (caCertId === null || caCertId === undefined) {
            throw new Error('Required parameter caCertId was null or undefined when calling deleteCertificate.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Delete a user.
     * An endpoint for deleting a user.
     * @param userId The ID of the user to be deleted.
     * @param force A flag indicating that the user is forced to be deleted.
     */
    AccountAdminApi.prototype.deleteUser = function (userId, force, callback) {
        var localVarPath = this.basePath + '/v3/users/{user-id}'
            .replace('{' + 'user-id' + '}', String(userId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUser.');
        }
        if (force !== undefined) {
            queryParameters['force'] = force;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get all CA certificates.
     * An endpoint for retrieving CA certificates in an array.
     * @param limit The number of results to return (2-1000), default is 50.
     * @param after The entity ID to fetch after the given one.
     * @param order The order of the records, ASC or DESC; by default ASC
     * @param include Comma separated additional data to return. Currently supported: total_count
     * @param filter Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180
     */
    AccountAdminApi.prototype.getAllCertificates = function (limit, after, order, include, filter, callback) {
        var localVarPath = this.basePath + '/v3/ca-certificates';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get the details of all users.
     * An endpoint for retrieving the details of all users.
     * @param limit The number of results to return (2-1000), default is 50.
     * @param after The entity ID to fetch after the given one.
     * @param order The order of the records, ASC or DESC; by default ASC
     * @param include Comma separated additional data to return. Currently supported: total_count
     * @param filter Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset.
     */
    AccountAdminApi.prototype.getAllUsers = function (limit, after, order, include, filter, callback) {
        var localVarPath = this.basePath + '/v3/users';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get CA certificate by ID.
     * An endpoint for retrieving a CA certificate by ID.
     * @param caCertId The ID or name of the CA certificate to be retrieved.
     */
    AccountAdminApi.prototype.getCertificate = function (caCertId, callback) {
        var localVarPath = this.basePath + '/v3/ca-certificates/{ca-cert-id}'
            .replace('{' + 'ca-cert-id' + '}', String(caCertId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'caCertId' is not null or undefined
        if (caCertId === null || caCertId === undefined) {
            throw new Error('Required parameter caCertId was null or undefined when calling getCertificate.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Details of a user.
     * An endpoint for retrieving the details of a user.
     * @param userId The ID or name of the user whose details are retrieved.
     */
    AccountAdminApi.prototype.getUser = function (userId, callback) {
        var localVarPath = this.basePath + '/v3/users/{user-id}'
            .replace('{' + 'user-id' + '}', String(userId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUser.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Update CA certificate.
     * An endpoint for updating existing CA certificates.
     * @param caCertId The ID of the CA certificate to be updated.
     * @param body A CA certificate object with attributes.
     */
    AccountAdminApi.prototype.updateCertificate = function (caCertId, body, callback) {
        var localVarPath = this.basePath + '/v3/ca-certificates/{ca-cert-id}'
            .replace('{' + 'ca-cert-id' + '}', String(caCertId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'caCertId' is not null or undefined
        if (caCertId === null || caCertId === undefined) {
            throw new Error('Required parameter caCertId was null or undefined when calling updateCertificate.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateCertificate.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Updates attributes of the account.
     * An endpoint for updating the account.
     * @param body Details of the account to be updated.
     */
    AccountAdminApi.prototype.updateMyAccount = function (body, callback) {
        var localVarPath = this.basePath + '/v3/accounts/me';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateMyAccount.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Update user details.
     * An endpoint for updating user details.
     * @param userId The ID of the user whose details are updated.
     * @param body A user object with attributes.
     */
    AccountAdminApi.prototype.updateUser = function (userId, body, callback) {
        var localVarPath = this.basePath + '/v3/users/{user-id}'
            .replace('{' + 'user-id' + '}', String(userId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUser.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    return AccountAdminApi;
}());
exports.AccountAdminApi = AccountAdminApi;
(function (DefaultApiApiKeys) {
    DefaultApiApiKeys[DefaultApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.DefaultApiApiKeys || (exports.DefaultApiApiKeys = {}));
var DefaultApiApiKeys = exports.DefaultApiApiKeys;
var DefaultApi = (function () {
    function DefaultApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DefaultApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    DefaultApi.prototype.setApiKey = function (key, value) {
        this.authentications[DefaultApiApiKeys[key]].apiKey = value;
    };
    DefaultApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Accept invitation.
     * Accepting pending invitation and providing missing details.
     * @param invitationId Invitation ID received in email.
     * @param body Details of the user accepting the invitation.
     */
    DefaultApi.prototype.activateUser = function (invitationId, body, callback) {
        var localVarPath = this.basePath + '/auth/invitations/{invitation-id}'
            .replace('{' + 'invitation-id' + '}', String(invitationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'invitationId' is not null or undefined
        if (invitationId === null || invitationId === undefined) {
            throw new Error('Required parameter invitationId was null or undefined when calling activateUser.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling activateUser.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Apply password recovery.
     * Applying password recovery by providing a secret hash code.
     * @param body Hash received by email and new password.
     * @param xForwardedFor
     */
    DefaultApi.prototype.applyPasswordRecovery = function (body, xForwardedFor, callback) {
        var localVarPath = this.basePath + '/auth/recover';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling applyPasswordRecovery.');
        }
        headerParams['X-Forwarded-For'] = xForwardedFor;
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get invited user.
     * Returns information about the user being invited.
     * @param invitationId Invitation ID received in email.
     */
    DefaultApi.prototype.getInvitedUser = function (invitationId, callback) {
        var localVarPath = this.basePath + '/auth/invitations/{invitation-id}'
            .replace('{' + 'invitation-id' + '}', String(invitationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'invitationId' is not null or undefined
        if (invitationId === null || invitationId === undefined) {
            throw new Error('Required parameter invitationId was null or undefined when calling getInvitedUser.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get registering user.
     * Retrieving the details of a user to register.
     * @param signupId ID received while signing up.
     */
    DefaultApi.prototype.getSelfEnrollingUser = function (signupId, callback) {
        var localVarPath = this.basePath + '/auth/register/{signup-id}'
            .replace('{' + 'signup-id' + '}', String(signupId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'signupId' is not null or undefined
        if (signupId === null || signupId === undefined) {
            throw new Error('Required parameter signupId was null or undefined when calling getSelfEnrollingUser.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Register a new account.
     * An endpoint for registering a new account.
     * @param signupId ID received while signing up.
     * @param body Details of the account to be created.
     */
    DefaultApi.prototype.registerAccount = function (signupId, body, callback) {
        var localVarPath = this.basePath + '/auth/register/{signup-id}'
            .replace('{' + 'signup-id' + '}', String(signupId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'signupId' is not null or undefined
        if (signupId === null || signupId === undefined) {
            throw new Error('Required parameter signupId was null or undefined when calling registerAccount.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerAccount.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Request password recovery.
     * Requesting password recovery by email address.
     * @param body Email address of the user whose password needs to be recovered.
     * @param xForwardedFor
     */
    DefaultApi.prototype.requestPasswordRecovery = function (body, xForwardedFor, callback) {
        var localVarPath = this.basePath + '/auth/recover';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling requestPasswordRecovery.');
        }
        headerParams['X-Forwarded-For'] = xForwardedFor;
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Sign up for a new account.
     * Signing up for a new free tier account with email address.
     * @param body Email address of the user to be signed up.
     */
    DefaultApi.prototype.signup = function (body, callback) {
        var localVarPath = this.basePath + '/auth/register';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling signup.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Verify self-enrollment code and aliases.
     * Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
     * @param signupId ID received while signing up.
     * @param body Verification code received by email and aliases to be checked.
     */
    DefaultApi.prototype.verifySelfEnrollment = function (signupId, body, callback) {
        var localVarPath = this.basePath + '/auth/register/{signup-id}'
            .replace('{' + 'signup-id' + '}', String(signupId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'signupId' is not null or undefined
        if (signupId === null || signupId === undefined) {
            throw new Error('Required parameter signupId was null or undefined when calling verifySelfEnrollment.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    return DefaultApi;
}());
exports.DefaultApi = DefaultApi;
(function (DeveloperApiApiKeys) {
    DeveloperApiApiKeys[DeveloperApiApiKeys["Bearer"] = 0] = "Bearer";
})(exports.DeveloperApiApiKeys || (exports.DeveloperApiApiKeys = {}));
var DeveloperApiApiKeys = exports.DeveloperApiApiKeys;
var DeveloperApi = (function () {
    function DeveloperApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Bearer': new ApiKeyAuth('header', 'Authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DeveloperApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    DeveloperApi.prototype.setApiKey = function (key, value) {
        this.authentications[DeveloperApiApiKeys[key]].apiKey = value;
    };
    DeveloperApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Create a new API key.
     * An endpoint for creating a new API key.
     * @param body The details of the API key to be created.
     */
    DeveloperApi.prototype.createApiKey = function (body, callback) {
        var localVarPath = this.basePath + '/v3/api-keys';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createApiKey.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Delete API key.
     * An endpoint for deleting the API key.
     * @param apiKey The ID of the API key to be deleted.
     */
    DeveloperApi.prototype.deleteApiKey = function (apiKey, callback) {
        var localVarPath = this.basePath + '/v3/api-keys/{apiKey}'
            .replace('{' + 'apiKey' + '}', String(apiKey));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'apiKey' is not null or undefined
        if (apiKey === null || apiKey === undefined) {
            throw new Error('Required parameter apiKey was null or undefined when calling deleteApiKey.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get all API keys
     * An endpoint for retrieving API keys in an array, optionally filtered by the owner.
     * @param limit The number of results to return (2-1000), default is 50.
     * @param after The entity ID to fetch after the given one.
     * @param order The order of the records, ASC or DESC; by default ASC
     * @param include Comma separated additional data to return. Currently supported: total_count
     * @param filter A filter for the query, for example filter&#x3D;owner%3Duuid.
     * @param owner Owner name filter.
     */
    DeveloperApi.prototype.getAllApiKeys = function (limit, after, order, include, filter, owner, callback) {
        var localVarPath = this.basePath + '/v3/api-keys';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }
        if (owner !== undefined) {
            queryParameters['owner'] = owner;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get all group information.
     * An endpoint for retrieving all group information.
     * @param limit The number of results to return (2-1000), default is 50.
     * @param after The entity ID to fetch after the given one.
     * @param order The order of the records, ASC or DESC; by default ASC
     * @param include Comma separated additional data to return. Currently supported: total_count
     */
    DeveloperApi.prototype.getAllGroups = function (limit, after, order, include, callback) {
        var localVarPath = this.basePath + '/v3/policy-groups';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get API key details.
     * An endpoint for retrieving API key details.
     * @param apiKey The ID of the API key to be retrieved.
     */
    DeveloperApi.prototype.getApiKey = function (apiKey, callback) {
        var localVarPath = this.basePath + '/v3/api-keys/{apiKey}'
            .replace('{' + 'apiKey' + '}', String(apiKey));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'apiKey' is not null or undefined
        if (apiKey === null || apiKey === undefined) {
            throw new Error('Required parameter apiKey was null or undefined when calling getApiKey.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get account info.
     * Returns detailed information about the account.
     * @param include Comma separated additional data to return. Currently supported: limits
     */
    DeveloperApi.prototype.getMyAccountInfo = function (include, callback) {
        var localVarPath = this.basePath + '/v3/accounts/me';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Get API key details.
     * An endpoint for retrieving API key details.
     */
    DeveloperApi.prototype.getMyApiKey = function (callback) {
        var localVarPath = this.basePath + '/v3/api-keys/me';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Details of the current user.
     * An endpoint for retrieving the details of the logged in user.
     */
    DeveloperApi.prototype.getMyUser = function (callback) {
        var localVarPath = this.basePath + '/v3/users/me';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Update API key details.
     * An endpoint for updating API key details.
     * @param apiKey The ID of the API key to be updated.
     * @param body New API key attributes to be stored.
     */
    DeveloperApi.prototype.updateApiKey = function (apiKey, body, callback) {
        var localVarPath = this.basePath + '/v3/api-keys/{apiKey}'
            .replace('{' + 'apiKey' + '}', String(apiKey));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'apiKey' is not null or undefined
        if (apiKey === null || apiKey === undefined) {
            throw new Error('Required parameter apiKey was null or undefined when calling updateApiKey.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateApiKey.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Update API key details.
     * An endpoint for updating API key details.
     * @param body New API key attributes to be stored.
     */
    DeveloperApi.prototype.updateMyApiKey = function (body, callback) {
        var localVarPath = this.basePath + '/v3/api-keys/me';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateMyApiKey.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    /**
     * Update user details.
     * An endpoint for updating the details of the logged in user.
     * @param body New attributes for the logged in user.
     */
    DeveloperApi.prototype.updateMyUser = function (body, callback) {
        var localVarPath = this.basePath + '/v3/users/me';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateMyUser.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return request(requestOptions, function (error, data, response) {
            if (callback) {
                callback(error, data, response);
            }
        });
    };
    return DeveloperApi;
}());
exports.DeveloperApi = DeveloperApi;
