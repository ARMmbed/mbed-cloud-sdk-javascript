{"version":3,"sources":["_tests/tlvDecode.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEI,IAAA,+BAA4C,EAA1C,gBAAK,EAAE,cAAI,CAAgC;AAC3C,IAAA,wCAAM,CAA8B;AAE5C,mDAAiD;AAEjD,KAAK,CAAC,WAAW,EAAE;IAEf,IAAI,CAAC,uBAAuB,EAAE;QAC1B,IAAM,MAAM,GAAG,sBAAS,CAAC,EAAE,CAAC,CAAC;QAC7B,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sBAAsB,EAAE;QACzB,IAAM,OAAO,GAAG,MAAM,CAAC;QACvB,IAAM,GAAG,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAE7D,IAAM,MAAM,GAAG,sBAAS,CAAC,GAAG,CAAC,CAAC;QAE9B,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;YACrB,IAAI,EAAE,EAAE;SACX,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uBAAuB,EAAE;QAC1B,IAAM,OAAO,GAAG,sKAAsK,CAAC;QACvL,IAAM,GAAG,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAE7D,IAAM,MAAM,GAAG,sBAAS,CAAC,GAAG,CAAC,CAAC;QAE9B,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;YACrB,IAAI,EAAE,CAAC;YACP,IAAI,EAAE,CAAC;YACP,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,UAAU;YACjB,KAAK,EAAE,GAAG;YACV,KAAK,EAAE,iBAAiB;YACxB,KAAK,EAAE,sBAAsB;YAC7B,IAAI,EAAE,GAAG;YACT,KAAK,EAAE,CAAC;SACX,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"tlvDecode.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { decodeTlv } from \"../common/tlvDecoder\";\n\nsuite(\"decodeTlv\", () => {\n\n    test(\"should decode nothing\", () => {\n        const result = decodeTlv(\"\");\n        assert.deepEqual(result, {});\n    });\n\n    test(\"should decode simple\", () => {\n        const payload = \"AAA=\";\n        const tlv = new Buffer(payload, \"base64\").toString(\"binary\");\n\n        const result = decodeTlv(tlv);\n\n        assert.deepEqual(result, {\n            \"/0\": \"\"\n        });\n    });\n\n    test(\"should decode complex\", () => {\n        const payload = \"iAsLSAAIAAAAAAAAAADBEFXIABAAAAAAAAAAAAAAAAAAAAAAyAEQAAAAAAAAAAAAAAAAAAAAAMECMMgRD2Rldl9kZXZpY2VfdHlwZcgSFGRldl9oYXJkd2FyZV92ZXJzaW9uyBUIAAAAAAAAAADIDQgAAAAAWdH0Bw==\";\n        const tlv = new Buffer(payload, \"base64\").toString(\"binary\");\n\n        const result = decodeTlv(tlv);\n\n        assert.deepEqual(result, {\n            \"/0\": 0,\n            \"/1\": 0,\n            \"/11/0\": 0,\n            \"/13\": 1506931719,\n            \"/16\": \"U\",\n            \"/17\": \"dev_device_type\",\n            \"/18\": \"dev_hardware_version\",\n            \"/2\": \"0\",\n            \"/21\": 0\n        });\n    });\n});\n"]}