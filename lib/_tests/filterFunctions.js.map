{"version":3,"sources":["_tests/filterFunctions.ts"],"names":[],"mappings":"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","file":"filterFunctions.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { extractFilter, encodeFilter, decodeFilter } from \"../common/functions\";\n\nsuite(\"extractFilter\", () => {\n\n    test(\"should return default\", () => {\n        const string = \"dee folt\";\n        const result = extractFilter(null, null, null, string);\n        assert.strictEqual(result, string);\n    });\n\n    test(\"should extract from eq\", () => {\n        const value = \"coffee\";\n        const filter = {\n            filter: { $eq: value }\n        };\n\n        const result = extractFilter(filter, \"filter\");\n        assert.strictEqual(result, value);\n    });\n\n    test(\"should extract from ne\", () => {\n        const value = \"coffee\";\n        const filter = {\n            filter: { $ne: value }\n        };\n\n        const result = extractFilter(filter, \"filter\", \"$ne\");\n        assert.strictEqual(result, value);\n    });\n\n    test(\"should extract without eq\", () => {\n        const value = \"coffee\";\n        const filter = {\n            filter: value\n        };\n\n        const result = extractFilter(filter, \"filter\");\n        assert.strictEqual(result, value);\n    });\n});\n\nsuite(\"encodeFilter\", () => {\n\n    test(\"should return empty\", () => {\n        const result = encodeFilter(null);\n        assert.strictEqual(result, \"\");\n    });\n\n    test(\"should still return empty\", () => {\n        const result = encodeFilter({});\n        assert.strictEqual(result, \"\");\n    });\n\n    test(\"should encode filter\", () => {\n        const result = encodeFilter({\n            key: { $eq: \"value\" },\n            error: { $ne: \"found\" },\n            range: { $lte: 10, $gte: 2 }\n        });\n        assert.strictEqual(result, \"key=value&error__neq=found&range__lte=10&range__gte=2\");\n    });\n\n    test(\"should encode camel filter\", () => {\n        const result = encodeFilter({\n            key: { $eq: \"value\" },\n            error: { $ne: \"found\" },\n            theRange: { $lte: 10, $gte: 2 }\n        });\n        assert.strictEqual(result, \"key=value&error__neq=found&the_range__lte=10&the_range__gte=2\");\n    });\n\n    test(\"should encode bare filter\", () => {\n        const result = encodeFilter({\n            key: \"value\",\n            error: { $ne: \"found\" },\n            range: { $lte: 10, $gte: 2 }\n        });\n        assert.strictEqual(result, \"key=value&error__neq=found&range__lte=10&range__gte=2\");\n    });\n\n    test(\"should encode filter with map\", () => {\n        const result = encodeFilter({\n            key: { $eq: \"value\" },\n            error: { $ne: \"found\" },\n            range: { $lte: 10, $gte: 2 }\n        }, {\n            from: [\n                \"key\"\n            ],\n            to: [\n                \"switch\"\n            ]\n        });\n        assert.strictEqual(result, \"switch=value&error__neq=found&range__lte=10&range__gte=2\");\n    });\n\n    test(\"should encode filter with nest\", () => {\n        const result = encodeFilter({\n            key: { $eq: \"value\" },\n            error: { $ne: \"found\" },\n            range: { $lte: 10, $gte: 2 },\n            custom: {\n                custom_1: { $eq: \"custom_value_1\" },\n                custom_2: { $ne: \"custom_value_2\" }\n            }\n        }, {\n            from: [\n                \"key\"\n            ],\n            to: [\n                \"switch\"\n            ]\n        }, [\n            \"custom\"\n        ]);\n        assert.strictEqual(result, \"switch=value&error__neq=found&range__lte=10&range__gte=2&custom__custom_1=custom_value_1&custom__custom_2__neq=custom_value_2\");\n    });\n});\n\nsuite(\"decodeFilter\", () => {\n\n    test(\"should return object\", () => {\n        const result = decodeFilter(null);\n        assert.deepEqual(result, {});\n    });\n\n    test(\"should decode string\", () => {\n        const result = decodeFilter(\"key=value&error__neq=found&range__lte=10&range__gte=2\");\n        assert.deepEqual(result, {\n            key: { $eq: \"value\" },\n            error: { $ne: \"found\" },\n            range: { $lte: \"10\", $gte: \"2\" }\n        });\n    });\n\n    test(\"should decode snake string\", () => {\n        const result = decodeFilter(\"key=value&error__neq=found&the_range__lte=10&the_range__gte=2\");\n        assert.deepEqual(result, {\n            key: { $eq: \"value\" },\n            error: { $ne: \"found\" },\n            theRange: { $lte: \"10\", $gte: \"2\" }\n        });\n    });\n\n    test(\"should decode with map\", () => {\n        const result = decodeFilter(\"switch=value&error__neq=found&range__lte=10&range__gte=2\", {\n            from: [\n                \"key\"\n            ],\n            to: [\n                \"switch\"\n            ]\n        });\n        assert.deepEqual(result, {\n            key: { $eq: \"value\" },\n            error: { $ne: \"found\" },\n            range: { $lte: \"10\", $gte: \"2\" }\n        });\n    });\n\n    test(\"should decode with nest\", () => {\n        const result = decodeFilter(\"switch=value&error__neq=found&range__lte=10&range__gte=2&custom__custom_1=custom_value_1&custom__custom_2__neq=custom_value_2\", {\n            from: [\n                \"key\"\n            ],\n            to: [\n                \"switch\"\n            ]\n        }, [\n            \"custom\"\n        ]);\n        assert.deepEqual(result, {\n            key: { $eq: \"value\" },\n            error: { $ne: \"found\" },\n            range: { $lte: \"10\", $gte: \"2\" },\n            custom: {\n                custom_1: { $eq: \"custom_value_1\" },\n                custom_2: { $ne: \"custom_value_2\" }\n            }\n        });\n    });\n});\n"],"sourceRoot":"../../src"}