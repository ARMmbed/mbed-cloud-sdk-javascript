{"version":3,"sources":["_tests/connectEvents.ts"],"names":[],"mappings":"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","file":"connectEvents.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test, beforeEach } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { ConnectApi } from \"../connect/connectApi\";\n\nsuite(\"connectEvents\", () => {\n\n    let api: ConnectApi;\n\n    beforeEach(() => {\n        api = new ConnectApi({\n            apiKey: \"key\"\n        });\n    });\n\n    test(\"should emit notification\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            notifications: [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            registrations: [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit re-registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            \"reg-updates\": [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit de-registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, id => {\n            assert.strictEqual(id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            \"de-registrations\": [ \"device-id\" ]\n        });\n    });\n\n    test(\"should emit expired\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, id => {\n            assert.strictEqual(id, \"device-id\");\n            dfd.resolve();\n        });\n\n        api.notify({\n            \"registrations-expired\": [ \"device-id\" ]\n        });\n    });\n\n    test(\"should emit multiple\", ctx => {\n\n        const notifications = {\n            \"notifications\": [ \"1\", \"2\" ],\n            \"registrations\": [ \"1\", \"2\" ],\n            \"reg-updates\": [ \"1\", \"2\" ],\n            \"de-registrations\": [ \"1\", \"2\" ],\n            \"registrations-expired\": [ \"1\", \"2\" ]\n        };\n\n        const notificationCount = Object.keys(notifications).length * 2;\n        const dfd = ctx.async(1000, notificationCount);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            dfd.resolve();\n        });\n\n        api.notify(notifications);\n    });\n});\n\nsuite(\"notifications\", () => {\n\n    let api: ConnectApi;\n\n    function encode(payload) {\n        if (typeof btoa === \"function\") return btoa(payload);\n        return new Buffer(payload).toString(\"base64\");\n    }\n\n    beforeEach(() => {\n        api = new ConnectApi({\n            apiKey: \"key\"\n        });\n    });\n\n    test(\"should notify\", ctx => {\n\n        const dfd = ctx.async(1000);\n        const deviceId = \"device-id\";\n        const devicePath = \"test\";\n        const payload = \"test-payload\";\n        const notifyFns = {};\n\n        notifyFns[`${deviceId}${devicePath}`] = value => {\n            assert.strictEqual(value, payload);\n            dfd.resolve();\n        };\n\n        // tslint:disable-next-line:no-string-literal\n        api[\"_notifyFns\"] = notifyFns;\n\n        api.notify({\n            notifications: [ {\n                ep: deviceId,\n                path: devicePath,\n                payload: encode(payload)\n            } ]\n        });\n    });\n\n    test(\"should respond to async\", ctx => {\n\n        const dfd = ctx.async(1000);\n        const asyncId = \"async-id\";\n        const payload = \"test-payload\";\n        const asyncFns = {};\n\n        asyncFns[asyncId] = (_error, value) => {\n            assert.strictEqual(value, payload);\n            dfd.resolve();\n        };\n\n        // tslint:disable-next-line:no-string-literal\n        api[\"_asyncFns\"] = asyncFns;\n\n        api.notify({\n            \"async-responses\": [ {\n                id: asyncId,\n                payload: encode(payload)\n            } ]\n        });\n    });\n});\n"],"sourceRoot":"../../src"}