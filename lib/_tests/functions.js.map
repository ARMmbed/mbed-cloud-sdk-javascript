{"version":3,"sources":["_tests/functions.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAEI,IAAA,+BAA4C,EAA1C,gBAAK,EAAE,cAAI,CAAgC;AAC3C,IAAA,wCAAM,CAA8B;AAC5C,iDAAsE;AAEtE,KAAK,CAAC,eAAe,EAAE;IAEnB,IAAI,CAAC,oBAAoB,EAAE;QACvB,IAAM,QAAQ,GAAG,IAAI,CAAC;QACtB,IAAM,KAAK,GAAG,6BAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,yBAAyB,EAAE;QAC5B,IAAM,QAAQ,GAAG,SAAS,CAAC;QAC3B,IAAM,KAAK,GAAG,6BAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qBAAqB,EAAE;QACxB,IAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAM,KAAK,GAAG,6BAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uBAAuB,EAAE;QAC1B,IAAM,QAAQ,GAAG,OAAO,CAAC;QACzB,IAAM,KAAK,GAAG,6BAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gBAAgB,EAAE;QACnB,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,KAAK,GAAG,6BAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErB,QAAQ,GAAG,OAAO,CAAC;QACnB,KAAK,GAAG,6BAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErB,QAAQ,GAAG,OAAO,CAAC;QACnB,KAAK,GAAG,6BAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC7C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEtB,QAAQ,GAAG,GAAG,CAAC;QACf,KAAK,GAAG,6BAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC;AAEH,KAAK,CAAC,qBAAqB,EAAE;IAEzB,IAAI,CAAC,QAAQ,EAAE;QACX,IAAM,OAAO,GAAG,wBAAY,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACvD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,QAAQ,EAAE;QACX,IAAM,OAAO,GAAG,wBAAY,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QACnD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,KAAK,EAAE;QACR,IAAM,OAAO,GAAG,wBAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE;YACtB,IAAI,EAAE,EAAE;SACX,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"functions.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\nimport { matchWithWildcard, decodeBase64 } from \"../common/functions\";\n\nsuite(\"testFunctions\", () => {\n\n    test(\"nullWildcardString\", () => {\n        const wildcard = null;\n        const match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n    });\n\n    test(\"undefinedWildcardString\", () => {\n        const wildcard = undefined;\n        const match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n    });\n\n    test(\"emptyWildcardString\", () => {\n        const wildcard = \"\";\n        const match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n    });\n\n    test(\"correctWildcarsString\", () => {\n        const wildcard = \"3/0/0\";\n        const match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n    });\n\n    test(\"wildcardString\", () => {\n        let wildcard = \"3/*\";\n        let match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n\n        wildcard = \"3/0/*\";\n        match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n\n        wildcard = \"3/0/*\";\n        match = matchWithWildcard(wildcard, \"3/1/0\");\n        assert.isFalse(match);\n\n        wildcard = \"*\";\n        match = matchWithWildcard(wildcard, \"3/1/0\");\n        assert.isTrue(match);\n    });\n\n});\n\nsuite(\"testPayloadDecoding\", () => {\n\n    test(\"string\", () => {\n        const payload = decodeBase64(\"dGVzdA==\", \"text/plain\");\n        assert.isString(payload);\n    });\n\n    test(\"number\", () => {\n        const payload = decodeBase64(\"NQ==\", \"text/plain\");\n        assert.isNumber(payload);\n    });\n\n    test(\"tlv\", () => {\n        const payload = decodeBase64(\"AAA=\", \"tlv\");\n        assert.deepEqual(payload, {\n            \"/0\": \"\"\n        });\n    });\n});\n"],"sourceRoot":"../../src"}