{"version":3,"sources":["_tests/pagination.ts"],"names":[],"mappings":"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","file":"pagination.js","sourcesContent":["/*\n * Mbed Cloud JavaScript SDK\n * Copyright Arm Limited 2018\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { executeForAll } from \"../common/pagination\";\nimport { ListResponse } from \"../common/listResponse\";\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\ninterface Call<O> {\n    resolve: (o: O) => Promise<void>;\n    reject: () => Promise<void>;\n    promise: Promise<O>;\n}\n\n// Wait for the stack to clear. Required because callbacks assigned with Promise.then are called asynchronously.\nconst wait = (): Promise<void> => {\n    return new Promise(resolve => {\n        setTimeout(resolve, 1);\n    });\n};\n\n// Mock a function that returns a promise. Calls to the function are tracked in the `calls` array allowing the returned promises to be resolved and rejected.\nconst mockAsync = <I, O>(): { calls: Array<Call<O>>, mock: (i: I) => Promise<O> } => {\n    const calls: Array<Call<O>> = [];\n\n    const mock = (): Promise<O> => {\n        const call: Call<O> = { resolve: null, reject: null, promise: null };\n\n        call.promise = new Promise<O>((resolvePromise, rejectPromise) => {\n            call.resolve = value => {\n                resolvePromise(value);\n                return wait();\n            };\n\n            call.reject = () => {\n                rejectPromise();\n                return wait();\n            };\n        });\n\n        calls.push(call);\n        return call.promise;\n    };\n\n    return { calls, mock };\n};\n\n// Utility to track if a promise has been rejected or resolved. The return value is mutated asynchronously.\nconst checkPromise = <T>(promise: Promise<T>): { resolved: boolean, rejected: boolean } => {\n    const tracker = { resolved: false, rejected: false };\n    promise.then(() => { tracker.resolved = true; }, () => { tracker.rejected = true; });\n    return tracker;\n};\n\nsuite(\"executeForAll\", () => {\n    test(\"never runs execute if there are no items\", () => {\n        const { calls: executeCalls, mock: execute } = mockAsync<string, void>();\n        const { calls: getPageCalls, mock: getPage } = mockAsync<{ after: string }, ListResponse<{ id: string }>>();\n\n        const tracker = checkPromise(executeForAll(getPage, execute));\n\n        assert.strictEqual(getPageCalls.length, 1);\n\n        return getPageCalls[ 0 ].resolve({\n            data: [],\n            hasMore: false\n        })\n            .then(() => {\n                assert.strictEqual(executeCalls.length, 0);\n\n                assert.strictEqual(tracker.resolved, true);\n                assert.strictEqual(tracker.rejected, false);\n            });\n    });\n\n    test(\"runs execute once per item if there is only one page\", () => {\n        const { calls: executeCalls, mock: execute } = mockAsync<string, void>();\n        const { calls: getPageCalls, mock: getPage } = mockAsync<{after: string}, ListResponse<{id: string}>>();\n\n        const tracker = checkPromise(executeForAll(getPage, execute));\n\n        assert.strictEqual(getPageCalls.length, 1);\n\n        return getPageCalls[ 0 ].resolve({\n            data: [ { id: \"1\" }, { id: \"2\" } ],\n            hasMore: false\n        })\n            .then(() => {\n                assert.strictEqual(executeCalls.length, 2);\n\n                return Promise.all(executeCalls.map(({ resolve }) => resolve(null)))\n                    .then(() => {\n                        assert.strictEqual(tracker.resolved, true);\n                        assert.strictEqual(tracker.rejected, false);\n                    });\n            });\n    });\n\n    test(\"runs execute once per item if there are two pages\", () => {\n        const { calls: executeCalls, mock: execute } = mockAsync<string, void>();\n        const { calls: getPageCalls, mock: getPage } = mockAsync<{after: string}, ListResponse<{id: string}>>();\n\n        const tracker = checkPromise(executeForAll(getPage, execute));\n\n        assert.strictEqual(getPageCalls.length, 1);\n\n        return getPageCalls[ 0 ].resolve({\n            data: [ { id: \"1\" }, { id: \"2\" } ],\n            hasMore: true\n        })\n            .then(() => {\n                assert.strictEqual(executeCalls.length, 2);\n\n                return Promise.all(executeCalls.map(({ resolve }) => resolve(null)))\n                    .then(() => {\n                        return getPageCalls[ 1 ].resolve({\n                            data: [ { id: \"3\" }, { id: \"4\" } ],\n                            hasMore: false\n                        })\n                            .then(() => {\n                                assert.strictEqual(executeCalls.length, 4);\n\n                                return Promise.all([ executeCalls[ 2 ].resolve(null), executeCalls[ 3 ].resolve(null) ])\n                                    .then(() => {\n                                        assert.strictEqual(tracker.resolved, true);\n                                        assert.strictEqual(tracker.rejected, false);\n                                    });\n                            });\n                    });\n            });\n    });\n\n    test(\"rejects the promise if the first getPage fails\", () => {\n        const { calls: executeCalls, mock: execute } = mockAsync<string, void>();\n        const { calls: getPageCalls, mock: getPage } = mockAsync<{ after: string }, ListResponse<{ id: string }>>();\n\n        const tracker = checkPromise(executeForAll(getPage, execute));\n\n        assert.strictEqual(getPageCalls.length, 1);\n\n        return getPageCalls[0].reject()\n            .then(() => {\n                assert.strictEqual(executeCalls.length, 0);\n\n                assert.strictEqual(tracker.resolved, false);\n                assert.strictEqual(tracker.rejected, true);\n            });\n    });\n\n    test(\"rejects the promise if an execute call fails\", () => {\n        const { calls: executeCalls, mock: execute } = mockAsync<string, void>();\n        const { calls: getPageCalls, mock: getPage } = mockAsync<{ after: string }, ListResponse<{ id: string }>>();\n\n        const tracker = checkPromise(executeForAll(getPage, execute));\n\n        assert.strictEqual(getPageCalls.length, 1);\n\n        return getPageCalls[ 0 ].resolve({\n            data: [ { id: \"1\" }, { id: \"2\" } ],\n            hasMore: true\n        })\n            .then(() => {\n                assert.strictEqual(executeCalls.length, 2);\n\n                return Promise.all([ executeCalls[ 0 ].resolve(null), executeCalls[ 1 ].reject() ])\n                    .then(() => {\n                        assert.strictEqual(tracker.resolved, false);\n                        assert.strictEqual(tracker.rejected, true);\n                    });\n            });\n    });\n\n    test(\"rejects the promise if the second getPage fails\", () => {\n        const { calls: executeCalls, mock: execute } = mockAsync<string, void>();\n        const { calls: getPageCalls, mock: getPage } = mockAsync<{ after: string }, ListResponse<{ id: string }>>();\n\n        const tracker = checkPromise(executeForAll(getPage, execute));\n\n        assert.strictEqual(getPageCalls.length, 1);\n\n        return getPageCalls[0].resolve({\n            data: [ { id: \"1\" }, { id: \"2\" } ],\n            hasMore: true\n        })\n            .then(() => {\n                assert.strictEqual(executeCalls.length, 2);\n\n                return Promise.all([ executeCalls[0].resolve(null), executeCalls[1].resolve(null) ])\n                    .then(() => {\n                        assert.strictEqual(getPageCalls.length, 2);\n\n                        return getPageCalls[1].reject()\n                            .then(() => {\n                                assert.strictEqual(executeCalls.length, 2);\n\n                                assert.strictEqual(tracker.resolved, false);\n                                assert.strictEqual(tracker.rejected, true);\n                            });\n                    });\n            });\n    });\n});\n"],"sourceRoot":"../../src"}