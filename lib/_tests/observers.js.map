{"version":3,"sources":["_tests/observers.ts"],"names":[],"mappings":"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","file":"observers.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { Observer } from \"../subscribe/observers/observer\";\n\nsuite(\"testObserver\", () => {\n\n    test(\"subscribeFirst\", () => {\n        const observer = new Observer<string>();\n        const a = observer.once();\n        const b = observer.once();\n        observer.notify(\"a\");\n        observer.notify(\"b\");\n        observer.notify(\"c\");\n        assert.notEqual(a, b);\n        a.then(res => assert.strictEqual(res, \"a\"));\n        b.then(res => assert.strictEqual(res, \"b\"));\n    });\n\n    test(\"subscribeFirstCallback\", () => {\n        const observer = new Observer<string>();\n        observer.once(res => assert.strictEqual(res, \"a\"));\n        observer.once(res => assert.strictEqual(res, \"b\"));\n        observer.notify(\"a\");\n        observer.notify(\"b\");\n        observer.notify(\"c\");\n    });\n\n    test(\"notifyFirst\", () => {\n        const observer = new Observer<string>();\n        observer.notify(\"a\");\n        observer.notify(\"b\");\n        observer.notify(\"c\");\n        const a = observer.once();\n        const b = observer.once();\n        assert.notEqual(a, b);\n        a.then(res => assert.strictEqual(res, \"a\"));\n        b.then(res => assert.strictEqual(res, \"b\"));\n    });\n\n    test(\"notifyFirstCallback\", () => {\n        const observer = new Observer<string>();\n        observer.notify(\"a\");\n        observer.notify(\"b\");\n        observer.notify(\"c\");\n        observer.once(res => assert.strictEqual(res, \"a\"));\n        observer.once(res => assert.strictEqual(res, \"b\"));\n    });\n\n    test(\"interleaved\", () => {\n        const observer = new Observer<string>();\n        observer.notify(\"a\");\n        const a = observer.once();\n        const b = observer.once();\n        const c = observer.once();\n        observer.notify(\"b\");\n        const d = observer.once();\n        observer.notify(\"c\");\n        observer.notify(\"d\");\n        observer.notify(\"e\");\n        const e = observer.once();\n        a.then(res => assert.strictEqual(res, \"a\"));\n        b.then(res => assert.strictEqual(res, \"b\"));\n        c.then(res => assert.strictEqual(res, \"c\"));\n        d.then(res => assert.strictEqual(res, \"d\"));\n        e.then(res => assert.strictEqual(res, \"e\"));\n    });\n\n    test(\"interleavedCallback\", () => {\n        const observer = new Observer<string>();\n        observer.notify(\"a\");\n        observer.once(res => assert.strictEqual(res, \"a\"));\n        observer.once(res => assert.strictEqual(res, \"b\"));\n        observer.once(res => assert.strictEqual(res, \"c\"));\n        observer.notify(\"b\");\n        observer.once(res => assert.strictEqual(res, \"d\"));\n        observer.notify(\"c\");\n        observer.notify(\"d\");\n        observer.notify(\"e\");\n        observer.once(res => assert.strictEqual(res, \"e\"));\n    });\n\n    test(\"callback\", () => {\n        const observer = new Observer<number>();\n        let x = 1;\n        observer.addListener(res => x += res);\n        observer.addListener(res => x += (res * 2));\n        observer.notify(3);\n        assert.strictEqual(x, 10);\n    });\n\n    test(\"addRemoveCallbacks\", () => {\n        const observer = new Observer<string>();\n        // tslint:disable-next-line:no-empty\n        const f = () => { };\n        // tslint:disable-next-line:no-empty\n        const g = () => { };\n        observer.addListener(f);\n        observer.addListener(g);\n        assert.sameOrderedMembers(observer.listeners(), [ f, g ]);\n        observer.removeListener(f);\n        assert.sameOrderedMembers(observer.listeners(), [ g ]);\n        observer.removeListener(g);\n        assert.sameOrderedMembers(observer.listeners(), []);\n    });\n\n    test(\"collection\", () => {\n        const observer = new Observer<number>();\n        for (let index = 0; index < 10; index++) {\n            observer.notify(index);\n        }\n        const items = [];\n        observer.getNotificationQueue().forEach(item => items.push(item));\n        assert.sameOrderedMembers(items, Array.apply(null, { length: 10 }).map(Function.call, Number));\n    });\n\n    test(\"localFilter\", () => {\n        let x = 0;\n        const observer = new Observer<number>()\n            .addLocalFilter(num => num >= 5)\n            .addListener(res => x += res);\n        observer.notify(4);\n        observer.notify(5);\n        assert.strictEqual(x, 5);\n    });\n});\n"],"sourceRoot":"../../src"}