// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================
/**
 * Device Query Service API
 * This is the API Documentation for the mbed device query service update service.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable */
/* tslint:disable:no-implicit-any */

import superagent = require('superagent');
import { ApiBase } from "../common/apiBase";

export interface DeviceQuery {
    /**
     * The description of the object
     */
    "description": string;
    /**
     * The time the object was created
     */
    "created_at": Date;
    /**
     * The API resource entity
     */
    "object": string;
    /**
     * The time the object was updated
     */
    "updated_at": Date;
    /**
     * The entity instance signature
     */
    "etag": Date;
    /**
     * The device query
     */
    "query": string;
    /**
     * The ID of the query
     */
    "id": string;
    /**
     * The name of the query
     */
    "name": string;
}

export interface DeviceQueryPage {
    "object": string;
    "has_more": boolean;
    "total_count": number;
    "after"?: string;
    "limit": number;
    "data": Array<DeviceQuery>;
    "order": string;
}

export interface DeviceQueryPatchRequest {
    /**
     * The device query
     */
    "query"?: string;
    /**
     * The description of the object
     */
    "description"?: string;
    /**
     * The name of the query
     */
    "name"?: string;
}

export interface DeviceQueryPutRequest {
    /**
     * The device query
     */
    "query": string;
    /**
     * The description of the object
     */
    "description": string;
    /**
     * The name of the query
     */
    "name": string;
}

/**
 * DefaultApi
 */
export class DefaultApi extends ApiBase {

    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Create device query&lt;/p&gt;
     * @param device 
     */
    deviceQueryCreate (device: DeviceQuery, callback?: (error:any, data?:DeviceQuery, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "device" is set
        if (device === null || device === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'device' missing when calling 'deviceQueryCreate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: device,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Delete device query&lt;/p&gt;
     * @param queryId 
     */
    deviceQueryDestroy (queryId: string, callback?: (error:any, data?:any, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryDestroy'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;List all device queries. The result will be paged into pages of 100.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-query-properties-all-properties-are-filterable\&quot;&gt;By device query properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;description&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;query_id&#x3D;0158d38771f70000000000010010038c&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;query_id%3D0158d38771f70000000000010010038c%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
     * @param limit how many objects to retrieve in the page
     * @param order ASC or DESC
     * @param after the ID of the the item after which to retrieve the next page
     * @param filter URL encoded query string parameter to filter returned data
     * @param include Comma separated list of data fields to return. Currently supported: total_count
     * @param createdAt 
     * @param createdAtGte 
     * @param createdAtLte 
     * @param description 
     * @param etag 
     * @param etagAtGte 
     * @param etagAtLte 
     * @param id 
     * @param name 
     * @param object 
     * @param query 
     * @param updatedAt 
     * @param updatedAtGte 
     * @param updatedAtLte 
     */
    deviceQueryList (limit?: number, order?: string, after?: string, filter?: string, include?: string, createdAt?: string, createdAtGte?: string, createdAtLte?: string, description?: string, etag?: string, etagAtGte?: string, etagAtLte?: string, id?: string, name?: string, object?: string, query?: string, updatedAt?: string, updatedAtGte?: string, updatedAtLte?: string, callback?: (error:any, data?:DeviceQueryPage, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (createdAtGte !== undefined) {
            queryParameters['created_at__gte'] = createdAtGte;
        }
        if (createdAtLte !== undefined) {
            queryParameters['created_at__lte'] = createdAtLte;
        }
        if (description !== undefined) {
            queryParameters['description'] = description;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (etagAtGte !== undefined) {
            queryParameters['etag_at__gte'] = etagAtGte;
        }
        if (etagAtLte !== undefined) {
            queryParameters['etag_at__lte'] = etagAtLte;
        }
        if (id !== undefined) {
            queryParameters['id'] = id;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }
        if (query !== undefined) {
            queryParameters['query'] = query;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (updatedAtGte !== undefined) {
            queryParameters['updated_at__gte'] = updatedAtGte;
        }
        if (updatedAtLte !== undefined) {
            queryParameters['updated_at__lte'] = updatedAtLte;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Update device query fields&lt;/p&gt;
     * @param queryId 
     * @param deviceQuery 
     */
    deviceQueryPartialUpdate (queryId: string, deviceQuery: DeviceQueryPatchRequest, callback?: (error:any, data?:DeviceQuery, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryPartialUpdate'."));
            }
            return;
        }
        // verify required parameter "deviceQuery" is set
        if (deviceQuery === null || deviceQuery === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceQuery' missing when calling 'deviceQueryPartialUpdate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'PATCH',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: deviceQuery,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Retrieve device query.&lt;/p&gt;
     * @param queryId 
     */
    deviceQueryRetrieve (queryId: string, callback?: (error:any, data?:DeviceQuery, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryRetrieve'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Update device query.&lt;/p&gt;
     * @param queryId 
     * @param body Device query update object
     */
    deviceQueryUpdate (queryId: string, body: DeviceQueryPutRequest, callback?: (error:any, data?:DeviceQuery, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryUpdate'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'deviceQueryUpdate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    }
}

