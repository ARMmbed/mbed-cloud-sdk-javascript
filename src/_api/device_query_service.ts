/**
 * Device Query Service API
 * This is the API Documentation for the mbed device query service update service.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import superagent = require('superagent');

let defaultBasePath = 'http://api.mbedcloud.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export interface RequestOptions {
    auth?:{username?:string, password?:string};
    form?:any;
    formData?:any;
    method?:string;
    qs?:any;
    headers?:any;
    uri?:string;
    useQuerystring?: boolean;
    json?: boolean;
    encoding?: string | null;
    body?:any;
}

export function request(options:any, callback?:Function): superagent.SuperAgentRequest {
    var url = options.uri;
    var request = superagent(options.method, url);

    if (options.auth && (options.auth.username || options.auth.password)) {
        request.auth(options.auth.username || '', options.auth.password || '');
    }

    // set query parameters
    request.query(normalizeParams(options.qs));

    // set header parameters
    request.set(normalizeParams(options.headers));

    // set request timeout
    request.timeout(60000);

    if (options.json) {
        request.type("application/json");
        request.accept("application/json");
    }

    if (options.form) {
        request.type("application/x-www-form-urlencoded");
        request.send(normalizeParams(options.form));
    } else if (options.formData) {
        request.type("multipart/form-data");
        var formParams = normalizeParams(options.formData);
        for (var key in formParams) {
            if (formParams.hasOwnProperty(key)) {
                if (isFileParam(formParams[key])) {
                    // file field
                    request.attach(key, formParams[key]);
                } else {
                    request.field(key, formParams[key]);
                }
            }
        }
    } else if (options.body) {
        request.send(options.body);
    }

    request.end(function(error, response) {
        if (callback) {
            callback(error, response);
        }
    });

    return request;
}

/**
* Normalizes parameter values:
* <ul>
* <li>remove nils</li>
* <li>keep files and arrays</li>
* <li>format to string with `paramToString` for other cases</li>
* </ul>
* @param {Object.<String, Object>} params The parameters as object properties.
* @returns {Object.<String, Object>} normalized parameters.
*/
export function normalizeParams(params:any) {
    var newParams = {};

    for (var key in params) {
        if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
            var value = params[key];
            if (isFileParam(value) || Array.isArray(value)) {
                newParams[key] = value;
            } else {
                newParams[key] = paramToString(value);
            }
        }
    }

    return newParams;
}

/**
* Checks whether the given parameter value represents file-like content.
* @param param The parameter to check.
* @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
*/
export function isFileParam(param:any) {
    // fs.ReadStream in Node.js (but not in runtime like browserify)
    if (typeof window === 'undefined' &&
        typeof require === 'function' &&
        require('fs') &&
        param instanceof require('fs').ReadStream) {
        return true;
    }

    // Buffer in Node.js
    if (typeof Buffer === 'function' && param instanceof Buffer) {
        return true;
    }

    // Blob in browser
    if (typeof Blob === 'function' && param instanceof Blob) {
        return true;
    }

    // File in browser (it seems File object is also instance of Blob, but keep this for safe)
    if (typeof File === 'function' && param instanceof File) {
        return true;
    }

    return false;
}

/**
* Returns a string representation for an actual parameter.
* @param param The actual parameter.
* @returns {String} The string representation of <code>param</code>.
*/
export function paramToString(param:any) {
    if (param == undefined || param == null) {
        return '';
    }

    if (param instanceof Date) {
        return param.toJSON();
    }

    return param.toString();
}

export class DeviceQueryDetail {
    /**
    * The description of the object
    */
    'description': string;
    /**
    * The time the object was created
    */
    'createdAt': Date;
    /**
    * The API resource entity
    */
    'object': string;
    /**
    * The time the object was updated
    */
    'updatedAt': Date;
    /**
    * The entity instance signature
    */
    'etag': Date;
    /**
    * DEPRECATED: The ID of the query
    */
    'queryId': string;
    /**
    * The device query
    */
    'query': string;
    /**
    * The ID of the query
    */
    'id': string;
    /**
    * The name of the query
    */
    'name': string;
}

export class DeviceQueryResp {
    /**
    * API Resource name
    */
    'object': string;
    /**
    * Whether there are more results to display
    */
    'hasMore': boolean;
    /**
    * Total number of records
    */
    'totalCount': number;
    /**
    * Entity id for fetch after it
    */
    'after': string;
    /**
    * The number of results to return
    */
    'limit': number;
    'data': Array<DeviceQueryDetail>;
    /**
    * Order of returned records
    */
    'order': string;
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: RequestOptions): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: RequestOptions): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: RequestOptions): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: RequestOptions): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(_: RequestOptions): void {
        // Do nothing
    }
}

export enum DefaultApiApiKeys {
    Bearer,
}

export class DefaultApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'Bearer': new ApiKeyAuth('header', 'Authorization'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        this.authentications[DefaultApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Create device query&lt;/p&gt;
     * @param name The name of the query
     * @param query The device query
     * @param description The description of the object
     * @param object The API resource entity
     * @param queryId DEPRECATED: The ID of the query
     */
    public deviceQueryCreate (name: string, query: string, description?: string, object?: string, queryId?: string, callback?: Function): superagent.SuperAgentRequest {
        const localVarPath = this.basePath + '/v3/device-queries/';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deviceQueryCreate.');
        }

        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling deviceQueryCreate.');
        }

        let useFormData = false;

        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }

        if (object !== undefined) {
            formParams['object'] = object;
        }

        if (query !== undefined) {
            formParams['query'] = query;
        }

        if (queryId !== undefined) {
            formParams['query_id'] = queryId;
        }

        let requestOptions: RequestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        return request(requestOptions, (error, response) => {
            if (callback) {
                if (error) {
                    return callback(error);
                }

                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }

                callback(response);
            }
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Delete device query&lt;/p&gt;
     * @param queryId 
     */
    public deviceQueryDestroy (queryId: string, callback?: Function): superagent.SuperAgentRequest {
        const localVarPath = this.basePath + '/v3/device-queries/{query_id}/'
            .replace('{' + 'query_id' + '}', String(queryId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'queryId' is not null or undefined
        if (queryId === null || queryId === undefined) {
            throw new Error('Required parameter queryId was null or undefined when calling deviceQueryDestroy.');
        }

        let useFormData = false;

        let requestOptions: RequestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        return request(requestOptions, (error, response) => {
            if (callback) {
                if (error) {
                    return callback(error);
                }

                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }

                callback(response);
            }
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;List all device queries. The result will be paged into pages of 100.&lt;/p&gt;
     * @param limit 
     * @param order 
     * @param after 
     */
    public deviceQueryList (limit?: number, order?: string, after?: string, callback?: Function): superagent.SuperAgentRequest {
        const localVarPath = this.basePath + '/v3/device-queries/';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (after !== undefined) {
            queryParameters['after'] = after;
        }

        let useFormData = false;

        let requestOptions: RequestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        return request(requestOptions, (error, response) => {
            if (callback) {
                if (error) {
                    return callback(error);
                }

                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }

                callback(response);
            }
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Update device query fields&lt;/p&gt;
     * @param queryId 
     * @param description The description of the object
     * @param name The name of the query
     * @param object The API resource entity
     * @param query The device query
     * @param queryId2 DEPRECATED: The ID of the query
     */
    public deviceQueryPartialUpdate (queryId: string, description?: string, name?: string, object?: string, query?: string, queryId2?: string, callback?: Function): superagent.SuperAgentRequest {
        const localVarPath = this.basePath + '/v3/device-queries/{query_id}/'
            .replace('{' + 'query_id' + '}', String(queryId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'queryId' is not null or undefined
        if (queryId === null || queryId === undefined) {
            throw new Error('Required parameter queryId was null or undefined when calling deviceQueryPartialUpdate.');
        }

        let useFormData = false;

        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }

        if (object !== undefined) {
            formParams['object'] = object;
        }

        if (query !== undefined) {
            formParams['query'] = query;
        }

        if (queryId2 !== undefined) {
            formParams['query_id'] = queryId2;
        }

        let requestOptions: RequestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        return request(requestOptions, (error, response) => {
            if (callback) {
                if (error) {
                    return callback(error);
                }

                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }

                callback(response);
            }
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Retrieve device query.&lt;/p&gt;
     * @param queryId 
     */
    public deviceQueryRetrieve (queryId: string, callback?: Function): superagent.SuperAgentRequest {
        const localVarPath = this.basePath + '/v3/device-queries/{query_id}/'
            .replace('{' + 'query_id' + '}', String(queryId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'queryId' is not null or undefined
        if (queryId === null || queryId === undefined) {
            throw new Error('Required parameter queryId was null or undefined when calling deviceQueryRetrieve.');
        }

        let useFormData = false;

        let requestOptions: RequestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        return request(requestOptions, (error, response) => {
            if (callback) {
                if (error) {
                    return callback(error);
                }

                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }

                callback(response);
            }
        });
    }
    /**
     * 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Update device query.&lt;/p&gt;
     * @param queryId 
     * @param name The name of the query
     * @param query The device query
     * @param description The description of the object
     * @param object The API resource entity
     * @param queryId2 DEPRECATED: The ID of the query
     */
    public deviceQueryUpdate (queryId: string, name: string, query: string, description?: string, object?: string, queryId2?: string, callback?: Function): superagent.SuperAgentRequest {
        const localVarPath = this.basePath + '/v3/device-queries/{query_id}/'
            .replace('{' + 'query_id' + '}', String(queryId));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'queryId' is not null or undefined
        if (queryId === null || queryId === undefined) {
            throw new Error('Required parameter queryId was null or undefined when calling deviceQueryUpdate.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deviceQueryUpdate.');
        }

        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling deviceQueryUpdate.');
        }

        let useFormData = false;

        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }

        if (object !== undefined) {
            formParams['object'] = object;
        }

        if (query !== undefined) {
            formParams['query'] = query;
        }

        if (queryId2 !== undefined) {
            formParams['query_id'] = queryId2;
        }

        let requestOptions: RequestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Bearer.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        return request(requestOptions, (error, response) => {
            if (callback) {
                if (error) {
                    return callback(error);
                }

                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    return callback(null, response);
                }

                callback(response);
            }
        });
    }
}
