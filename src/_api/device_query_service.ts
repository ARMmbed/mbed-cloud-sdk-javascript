/**
 * Device Query Service API
 * This is the API Documentation for the mbed device query service update service.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================

/* tslint:disable:no-unused-variable */

import superagent = require('superagent');
import { ApiBase } from "../common/apiBase";

export interface Body {
    "query": string;
    "description"?: string;
    "name": string;
}

export interface DeviceQueryDetail {
    /**
     * The description of the object
     */
    "description": string;
    /**
     * The time the object was created
     */
    "created_at": Date;
    /**
     * The API resource entity
     */
    "object": string;
    /**
     * The time the object was updated
     */
    "updated_at": Date;
    /**
     * The entity instance signature
     */
    "etag": Date;
    /**
     * DEPRECATED: The ID of the query
     */
    "query_id": string;
    /**
     * The device query
     */
    "query": string;
    /**
     * The ID of the query
     */
    "id": string;
    /**
     * The name of the query
     */
    "name": string;
}

export interface DeviceQueryResp {
    /**
     * API Resource name
     */
    "object"?: string;
    /**
     * Whether there are more results to display
     */
    "has_more"?: boolean;
    /**
     * Total number of records
     */
    "total_count"?: number;
    /**
     * Entity id for fetch after it
     */
    "after"?: string;
    /**
     * The number of results to return
     */
    "limit"?: number;
    "data"?: Array<DeviceQueryDetail>;
    /**
     * Order of returned records
     */
    "order"?: string;
}

/**
 * DefaultApi
 */
export class DefaultApi extends ApiBase {

    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Create device query&lt;/p&gt;
     * @param name The name of the query
     * @param query The device query
     * @param description The description of the object
     * @param object The API resource entity
     * @param queryId DEPRECATED: The ID of the query
     */
    deviceQueryCreate (name: string, query: string, description?: string, object?: string, queryId?: string, callback?: (error:any, data?:DeviceQueryDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "name" is set
        if (name === null || name === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'name' missing when calling 'deviceQueryCreate'."));
            }
            return;
        }
        // verify required parameter "query" is set
        if (query === null || query === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'query' missing when calling 'deviceQueryCreate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};
        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }

        if (object !== undefined) {
            formParams['object'] = object;
        }

        if (query !== undefined) {
            formParams['query'] = query;
        }

        if (queryId !== undefined) {
            formParams['query_id'] = queryId;
        }


        return this.request({
            url: '/v3/device-queries/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Delete device query&lt;/p&gt;
     * @param queryId 
     */
    deviceQueryDestroy (queryId: string, callback?: (error:any, data?:DeviceQueryDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryDestroy'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;List all device queries. The result will be paged into pages of 100.&lt;/p&gt;
     * @param limit 
     * @param order 
     * @param after 
     * @param include 
     */
    deviceQueryList (limit?: number, order?: string, after?: string, include?: string, callback?: (error:any, data?:DeviceQueryResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Update device query fields&lt;/p&gt;
     * @param queryId 
     * @param description The description of the object
     * @param name The name of the query
     * @param object The API resource entity
     * @param query The device query
     * @param queryId2 DEPRECATED: The ID of the query
     */
    deviceQueryPartialUpdate (queryId: string, description?: string, name?: string, object?: string, query?: string, queryId2?: string, callback?: (error:any, data?:DeviceQueryDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryPartialUpdate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};
        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }

        if (object !== undefined) {
            formParams['object'] = object;
        }

        if (query !== undefined) {
            formParams['query'] = query;
        }

        if (queryId2 !== undefined) {
            formParams['query_id'] = queryId2;
        }


        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'PATCH',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Retrieve device query.&lt;/p&gt;
     * @param queryId 
     */
    deviceQueryRetrieve (queryId: string, callback?: (error:any, data?:DeviceQueryDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryRetrieve'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating device queries.  &lt;/p&gt; &lt;p&gt;Update device query.&lt;/p&gt;
     * @param queryId 
     * @param body Device query update object
     */
    deviceQueryUpdate (queryId: string, body: Body, callback?: (error:any, data?:DeviceQueryDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "queryId" is set
        if (queryId === null || queryId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'queryId' missing when calling 'deviceQueryUpdate'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'deviceQueryUpdate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/device-queries/{query_id}/'.replace('{' + 'query_id' + '}', String(queryId)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    }
}

