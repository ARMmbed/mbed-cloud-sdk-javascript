// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================
/**
 * Device Directory API
 * This is the API Documentation for the mbed device directory update service.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable */
/* tslint:disable:no-implicit-any */

import superagent = require('superagent');
import { ApiBase } from "../common/apiBase";
import { SDKError } from "../common/sdkError";

export type DeviceDataMechanismEnum = "connector" | "direct";
export type DeviceDataStateEnum = "unenrolled" | "cloud_enrolling" | "bootstrapped" | "registered" | "deregistered";
export type DeviceDataDeployedStateEnum = "development" | "production";
export interface DeviceData {
    /**
     * Expiration date of the certificate used to connect to bootstrap server.
     */
    "bootstrap_expiration_date"?: Date;
    /**
     * Timestamp of when the device was bootstrapped.
     */
    "bootstrapped_timestamp"?: Date;
    /**
     * Expiration date of the certificate used to connect to connector server.
     */
    "connector_expiration_date"?: Date;
    /**
     * The time the object was updated.
     */
    "updated_at"?: Date;
    /**
     * ID of the issuer of the certificate.
     */
    "ca_id"?: string;
    /**
     * The device class.
     */
    "device_class"?: string;
    /**
     * The ID of the device.
     */
    "id"?: string;
    /**
     * The ID of the associated account.
     */
    "account_id"?: string;
    /**
     * The endpoint name given to the device.
     */
    "endpoint_name"?: string;
    /**
     * Mark this device for auto firmware update.
     */
    "auto_update"?: boolean;
    /**
     * The endpoint_name of the host gateway, if appropriate.
     */
    "host_gateway"?: string;
    /**
     * Defines the type of certificate used.
     */
    "device_execution_mode"?: number;
    /**
     * The ID of the channel used to communicate with the device.
     */
    "mechanism"?: DeviceDataMechanismEnum;
    /**
     * The current state of the device.
     */
    "state"?: DeviceDataStateEnum;
    /**
     * The entity instance signature.
     */
    "etag"?: Date;
    /**
     * The serial number of the device.
     */
    "serial_number"?: string;
    /**
     * The SHA256 checksum of the current firmware image.
     */
    "firmware_checksum"?: string;
    /**
     * The timestamp of the current manifest version.
     */
    "manifest_timestamp"?: Date;
    /**
     * The device vendor ID.
     */
    "vendor_id"?: string;
    /**
     * The description of the object.
     */
    "description"?: string;
    /**
     * DEPRECATED The state of the device's deployment.
     */
    "deployed_state"?: DeviceDataDeployedStateEnum;
    /**
     * The API resource entity.
     */
    "object"?: string;
    /**
     * The endpoint type of the device - e.g. if the device is a gateway.
     */
    "endpoint_type"?: string;
    /**
     * DEPRECATED The last deployment used on the device.
     */
    "deployment"?: string;
    /**
     * The address of the connector to use.
     */
    "mechanism_url"?: string;
    /**
     * The device trust level.
     */
    "trust_level"?: number;
    /**
     * The name of the object.
     */
    "name"?: string;
    /**
     * Fingerprint of the device certificate.
     */
    "device_key"?: string;
    /**
     * The time the object was created.
     */
    "created_at"?: Date;
    /**
     * DEPRECATED The URL for the current device manifest.
     */
    "manifest"?: string;
    /**
     * Up to 5 custom JSON attributes
     */
    "custom_attributes"?: any;
}

export interface DeviceDataPatchRequest {
    /**
     * The description of the object.
     */
    "description"?: string;
    /**
     * The endpoint name given to the device.
     */
    "endpoint_name"?: string;
    /**
     * Mark this device for auto firmware update.
     */
    "auto_update"?: boolean;
    /**
     * The API resource entity.
     */
    "object"?: string;
    /**
     * Up to 5 custom JSON attributes
     */
    "custom_attributes"?: any;
    /**
     * Fingerprint of the device certificate.
     */
    "device_key"?: string;
    /**
     * ID of the issuer of the certificate.
     */
    "ca_id"?: string;
    /**
     * The name of the object.
     */
    "name"?: string;
}

export type DeviceDataPostRequestMechanismEnum = "connector" | "direct";
export type DeviceDataPostRequestStateEnum = "unenrolled" | "cloud_enrolling" | "bootstrapped" | "registered" | "deregistered";
export type DeviceDataPostRequestDeployedStateEnum = "development" | "production";
export interface DeviceDataPostRequest {
    /**
     * Expiration date of the certificate used to connect to bootstrap server.
     */
    "bootstrap_expiration_date"?: Date;
    /**
     * Timestamp of when the device was bootstrapped.
     */
    "bootstrapped_timestamp"?: Date;
    /**
     * Expiration date of the certificate used to connect to connector server.
     */
    "connector_expiration_date"?: Date;
    /**
     * The ID of the channel used to communicate with the device.
     */
    "mechanism"?: DeviceDataPostRequestMechanismEnum;
    /**
     * The device class.
     */
    "device_class"?: string;
    /**
     * The endpoint name given to the device.
     */
    "endpoint_name"?: string;
    /**
     * Mark this device for auto firmware update.
     */
    "auto_update"?: boolean;
    /**
     * Defines the type of certificate used.
     */
    "device_execution_mode"?: number;
    /**
     * Up to 5 custom JSON attributes
     */
    "custom_attributes"?: any;
    /**
     * The current state of the device.
     */
    "state"?: DeviceDataPostRequestStateEnum;
    /**
     * The serial number of the device.
     */
    "serial_number"?: string;
    /**
     * The SHA256 checksum of the current firmware image.
     */
    "firmware_checksum"?: string;
    /**
     * The device vendor ID.
     */
    "vendor_id"?: string;
    /**
     * The description of the object.
     */
    "description"?: string;
    /**
     * DEPRECATED The state of the device's deployment.
     */
    "deployed_state"?: DeviceDataPostRequestDeployedStateEnum;
    /**
     * The API resource entity.
     */
    "object"?: string;
    /**
     * DEPRECATED The last deployment used on the device.
     */
    "deployment"?: string;
    /**
     * The address of the connector to use.
     */
    "mechanism_url"?: string;
    /**
     * The device trust level.
     */
    "trust_level"?: number;
    /**
     * The name of the object.
     */
    "name"?: string;
    /**
     * Fingerprint of the device certificate.
     */
    "device_key": string;
    /**
     * DEPRECATED The URL for the current device manifest.
     */
    "manifest"?: string;
    /**
     * ID of the issuer of the certificate.
     */
    "ca_id": string;
}

export interface DeviceDataPutRequest {
    /**
     * The description of the object.
     */
    "description"?: string;
    /**
     * The endpoint name given to the device.
     */
    "endpoint_name"?: string;
    /**
     * Mark this device for auto firmware update.
     */
    "auto_update"?: boolean;
    /**
     * The API resource entity.
     */
    "object"?: string;
    /**
     * Up to 5 custom JSON attributes
     */
    "custom_attributes"?: any;
    /**
     * Fingerprint of the device certificate.
     */
    "device_key": string;
    /**
     * ID of the issuer of the certificate.
     */
    "ca_id": string;
    /**
     * The name of the object.
     */
    "name"?: string;
}

export interface DeviceEventData {
    "date_time": Date;
    "state_change"?: boolean;
    "description"?: string;
    "changes"?: any;
    "event_type_description"?: string;
    "event_type"?: string;
    "data"?: any;
    "id"?: string;
    "device_id"?: string;
}

export interface DeviceEventPage {
    "object"?: string;
    "has_more"?: boolean;
    "total_count"?: number;
    "after"?: string;
    "limit"?: number;
    "data"?: Array<DeviceEventData>;
    "order"?: string;
}

export interface DevicePage {
    "object"?: string;
    "has_more"?: boolean;
    "total_count"?: number;
    "after"?: string;
    "limit"?: number;
    "data"?: Array<DeviceData>;
    "order"?: string;
}

/**
 * DefaultApi
 */
export class DefaultApi extends ApiBase {

    /** 
     * Create device
     * @param device 
     */
    deviceCreate (device: DeviceDataPostRequest, callback?: (error:any, data?:DeviceData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "device" is set
        if (device === null || device === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'device' missing."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request<DeviceData>({
            url: '/v3/devices/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: device,
        }, callback);
    }
    /** 
     * Delete device
     * @param id 
     */
    deviceDestroy (id: string, callback?: (error:any, data?:any, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "id" is set
        if (id === null || id === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'id' missing."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request<null>({
            url: '/v3/devices/{id}/'.replace('{' + 'id' + '}', String(id)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * List all device events.
     * @param limit How many objects to retrieve in the page.
     * @param order ASC or DESC
     * @param after The ID of the the item after which to retrieve the next page.
     * @param filter URL encoded query string parameter to filter returned data.  ##### Filtering &#x60;&#x60;&#x60;?filter&#x3D;{URL encoded query string}&#x60;&#x60;&#x60;  The query string is made up of key/value pairs separated by ampersands. So for a query of &#x60;&#x60;&#x60;key1&#x3D;value1&amp;key2&#x3D;value2&amp;key3&#x3D;value3&#x60;&#x60;&#x60; this would be encoded as follows: &#x60;&#x60;&#x60;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&#x60;&#x60;&#x60; The examples below show the queries in *unencoded* form.  ###### By id: &#x60;&#x60;&#x60;id&#x3D;{id}&#x60;&#x60;&#x60;  ###### By state change: &#x60;&#x60;&#x60;state_change&#x3D;[True|False]&#x60;&#x60;&#x60;  ###### By event type: &#x60;&#x60;&#x60;event_type&#x3D;{value}&#x60;&#x60;&#x60;  ###### On date-time fields: Date-time fields should be specified in UTC RFC3339 format &#x60;&#x60;&#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;&#x60;&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z * UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z * UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z  Date-time filtering supports three operators:  * equality * greater than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; * less than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60;  Lower and upper limits to a date-time range may be specified by including both the &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60; forms in the filter.  &#x60;&#x60;&#x60;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;&#x60;&#x60;  ##### Multi-field example  &#x60;&#x60;&#x60;id&#x3D;0158d38771f70000000000010010038c&amp;state_change&#x3D;True&amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&#x60;&#x60;&#x60;  Encoded:  &#x60;&#x60;&#x60;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&#x60;&#x60;&#x60;
     * @param include Comma separated list of data fields to return. Currently supported: total_count
     */
    deviceEventList (limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error:any, data?:DeviceEventPage, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        queryParameters['limit'] = limit;
        queryParameters['order'] = order;
        queryParameters['after'] = after;
        queryParameters['filter'] = filter;
        queryParameters['include'] = include;

        let useFormData = false;
        let formParams: any = {};

        return this.request<DeviceEventPage>({
            url: '/v3/device-events/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * Retrieve device event
     * @param deviceEventId 
     */
    deviceEventRetrieve (deviceEventId: string, callback?: (error:any, data?:DeviceEventData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "deviceEventId" is set
        if (deviceEventId === null || deviceEventId === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'deviceEventId' missing."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request<DeviceEventData>({
            url: '/v3/device-events/{device_event_id}/'.replace('{' + 'device_event_id' + '}', String(deviceEventId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * List all devices.
     * @param limit How many objects to retrieve in the page.
     * @param order ASC or DESC
     * @param after The ID of the the item after which to retrieve the next page.
     * @param filter URL encoded query string parameter to filter returned data.  ##### Filtering &#x60;&#x60;&#x60;?filter&#x3D;{URL encoded query string}&#x60;&#x60;&#x60;  The query string is made up of key/value pairs separated by ampersands. So for a query of &#x60;&#x60;&#x60;key1&#x3D;value1&amp;key2&#x3D;value2&amp;key3&#x3D;value3&#x60;&#x60;&#x60; this would be encoded as follows: &#x60;&#x60;&#x60;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&#x60;&#x60;&#x60; The examples below show the queries in *unencoded* form.  ###### By device properties (all properties are filterable): &#x60;&#x60;&#x60;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;device_class&#x3D;{value}&#x60;&#x60;&#x60;  ###### On date-time fields: Date-time fields should be specified in UTC RFC3339 format &#x60;&#x60;&#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;&#x60;&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z * UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z * UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z  Date-time filtering supports three operators:  * equality * greater than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; * less than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60;  Lower and upper limits to a date-time range may be specified by including both the &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60; forms in the filter.  &#x60;&#x60;&#x60;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;&#x60;&#x60;  ###### On device custom attributes:  &#x60;&#x60;&#x60;custom_attributes__{param}&#x3D;{value}&#x60;&#x60;&#x60; &#x60;&#x60;&#x60;custom_attributes__tag&#x3D;TAG1&#x60;&#x60;&#x60;  ##### Multi-field example  &#x60;&#x60;&#x60;state&#x3D;bootstrapped&amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;&#x60;&#x60;  Encoded:  &#x60;&#x60;&#x60;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&#x60;&#x60;&#x60;
     * @param include Comma separated list of data fields to return. Currently supported: total_count
     */
    deviceList (limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error:any, data?:DevicePage, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        queryParameters['limit'] = limit;
        queryParameters['order'] = order;
        queryParameters['after'] = after;
        queryParameters['filter'] = filter;
        queryParameters['include'] = include;

        let useFormData = false;
        let formParams: any = {};

        return this.request<DevicePage>({
            url: '/v3/devices/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * List all device events (deprecated, use /v3/device-events/ instead).
     * @param limit How many objects to retrieve in the page.
     * @param order ASC or DESC
     * @param after The ID of the the item after which to retrieve the next page.
     * @param filter URL encoded query string parameter to filter returned data.  ##### Filtering &#x60;&#x60;&#x60;?filter&#x3D;{URL encoded query string}&#x60;&#x60;&#x60;  The query string is made up of key/value pairs separated by ampersands. So for a query of &#x60;&#x60;&#x60;key1&#x3D;value1&amp;key2&#x3D;value2&amp;key3&#x3D;value3&#x60;&#x60;&#x60; this would be encoded as follows: &#x60;&#x60;&#x60;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&#x60;&#x60;&#x60; The examples below show the queries in *unencoded* form.  ###### By id: &#x60;&#x60;&#x60;id&#x3D;{id}&#x60;&#x60;&#x60;  ###### By state change: &#x60;&#x60;&#x60;state_change&#x3D;[True|False]&#x60;&#x60;&#x60;  ###### By event type: &#x60;&#x60;&#x60;event_type&#x3D;{value}&#x60;&#x60;&#x60;  ###### On date-time fields: Date-time fields should be specified in UTC RFC3339 format &#x60;&#x60;&#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;&#x60;&#x60;. There are three permitted variations:  * UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z * UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z * UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z  Date-time filtering supports three operators:  * equality * greater than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; * less than or equal to &amp;ndash; field name suffixed with &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60;  Lower and upper limits to a date-time range may be specified by including both the &#x60;&#x60;&#x60;__gte&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;__lte&#x60;&#x60;&#x60; forms in the filter.  &#x60;&#x60;&#x60;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60;&#x60;&#x60;  ##### Multi-field example  &#x60;&#x60;&#x60;id&#x3D;0158d38771f70000000000010010038c&amp;state_change&#x3D;True&amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&#x60;&#x60;&#x60;  Encoded:  &#x60;&#x60;&#x60;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&#x60;&#x60;&#x60;
     * @param include Comma separated list of data fields to return. Currently supported: total_count
     */
    deviceLogList (limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error:any, data?:DeviceEventPage, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        queryParameters['limit'] = limit;
        queryParameters['order'] = order;
        queryParameters['after'] = after;
        queryParameters['filter'] = filter;
        queryParameters['include'] = include;

        let useFormData = false;
        let formParams: any = {};

        return this.request<DeviceEventPage>({
            url: '/v3/devicelog/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * Retrieve device event (deprecated, use /v3/device-events/{device_event_id}/ instead)
     * @param deviceEventId 
     */
    deviceLogRetrieve (deviceEventId: string, callback?: (error:any, data?:DeviceEventData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "deviceEventId" is set
        if (deviceEventId === null || deviceEventId === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'deviceEventId' missing."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request<DeviceEventData>({
            url: '/v3/devicelog/{device_event_id}/'.replace('{' + 'device_event_id' + '}', String(deviceEventId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * Update device fields
     * @param id The ID of the device.
     * @param device 
     */
    devicePartialUpdate (id: string, device: DeviceDataPatchRequest, callback?: (error:any, data?:DeviceData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "id" is set
        if (id === null || id === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'id' missing."));
            }
            return;
        }
        // verify required parameter "device" is set
        if (device === null || device === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'device' missing."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request<DeviceData>({
            url: '/v3/devices/{id}/'.replace('{' + 'id' + '}', String(id)),
            method: 'PATCH',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: device,
        }, callback);
    }
    /** 
     * Retrieve device
     * @param id 
     */
    deviceRetrieve (id: string, callback?: (error:any, data?:DeviceData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "id" is set
        if (id === null || id === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'id' missing."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request<DeviceData>({
            url: '/v3/devices/{id}/'.replace('{' + 'id' + '}', String(id)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * Update device
     * @param id The ID of the device.
     * @param device 
     */
    deviceUpdate (id: string, device: DeviceDataPutRequest, callback?: (error:any, data?:DeviceData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "id" is set
        if (id === null || id === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'id' missing."));
            }
            return;
        }
        // verify required parameter "device" is set
        if (device === null || device === undefined) {
            if (callback) {
                callback(new SDKError("Required parameter 'device' missing."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request<DeviceData>({
            url: '/v3/devices/{id}/'.replace('{' + 'id' + '}', String(id)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: device,
        }, callback);
    }
}

