/**
 * Device Catalog API
 * This is the API Documentation for the mbed device catalog update service.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================

/* tslint:disable:no-unused-variable */

import superagent = require('superagent');
import { ApiBase } from "../common/apiBase";

export type DeviceDetailMechanismEnum = "connector" | "direct";
export type DeviceDetailStateEnum = "unenrolled" | "cloud_enrolling" | "bootstrapped" | "registered";
export type DeviceDetailDeployedStateEnum = "development" | "production";
export interface DeviceDetail {
    "bootstrapped_timestamp"?: string;
    /**
     * The time the object was updated
     */
    "updated_at"?: Date;
    /**
     * Up to 5 custom JSON attributes
     */
    "custom_attributes"?: any;
    /**
     * The device class
     */
    "device_class"?: string;
    /**
     * The ID of the device
     */
    "id"?: string;
    /**
     * The description of the object
     */
    "description"?: string;
    /**
     * Mark this device for auto firmware update
     */
    "auto_update"?: boolean;
    /**
     * The ID of the channel used to communicate with the device
     */
    "mechanism"?: DeviceDetailMechanismEnum;
    /**
     * The current state of the device
     */
    "state"?: DeviceDetailStateEnum;
    /**
     * The entity instance signature
     */
    "etag"?: Date;
    /**
     * The key used to provision the device
     */
    "provision_key"?: string;
    /**
     * The serial number of the device
     */
    "serial_number"?: string;
    /**
     * The device vendor ID
     */
    "vendor_id"?: string;
    /**
     * The owning IAM account ID
     */
    "account_id"?: string;
    /**
     * The state of the device's deployment
     */
    "deployed_state"?: DeviceDetailDeployedStateEnum;
    /**
     * The API resource entity
     */
    "object"?: string;
    /**
     * The device trust class
     */
    "trust_class"?: number;
    /**
     * The last deployment used on the device
     */
    "deployment"?: string;
    /**
     * The address of the connector to use
     */
    "mechanism_url"?: string;
    /**
     * The device trust level
     */
    "trust_level"?: number;
    /**
     * DEPRECATED: The ID of the device
     */
    "device_id"?: string;
    /**
     * The name of the object
     */
    "name"?: string;
    /**
     * The time the object was created
     */
    "created_at"?: Date;
    /**
     * URL for the current device manifest
     */
    "manifest"?: string;
}

export interface DeviceListResp {
    /**
     * API Resource name
     */
    "object"?: string;
    /**
     * Whether there are more results to display
     */
    "has_more"?: boolean;
    /**
     * Total number of records
     */
    "total_count"?: number;
    /**
     * Entity id for fetch after it
     */
    "after"?: string;
    /**
     * The number of results to return
     */
    "limit"?: number;
    "data"?: Array<DeviceDetail>;
    /**
     * Order of returned records
     */
    "order"?: string;
}

export interface DeviceLogSerializer {
    /**
     * API Resource name
     */
    "object"?: string;
    /**
     * Whether there are more results to display
     */
    "has_more"?: boolean;
    /**
     * Total number of records
     */
    "total_count"?: number;
    /**
     * Entity id for fetch after it
     */
    "after"?: string;
    /**
     * The number of results to return
     */
    "limit"?: number;
    "data"?: Array<DeviceLogSerializerData>;
    /**
     * Order of returned records
     */
    "order"?: string;
}

export type DeviceLogSerializerDataEventTypeEnum = "update.device.device-created" | "update.device.device-updated" | "update.deployment.campaign-device-metadata-created" | "update.deployment.campaign-device-metadata-updated" | "update.deployment.campaign-device-metadata-removed" | "update.connector.connector-device.firmware-update.state" | "update.connector.connector-device.firmware-update.result";
export interface DeviceLogSerializerData {
    "date_time": Date;
    "state_change"?: boolean;
    "description"?: string;
    "changes"?: any;
    "event_type_description"?: string;
    "device_log_id"?: string;
    "event_type"?: DeviceLogSerializerDataEventTypeEnum;
    "data"?: any;
    "id"?: string;
    "device_id"?: string;
}

export type DeviceUpdateDetailMechanismEnum = "connector" | "direct";
export interface DeviceUpdateDetail {
    /**
     * The owning IAM account ID
     */
    "account_id"?: string;
    /**
     * The name of the object
     */
    "name"?: string;
    /**
     * Mark this device for auto firmware update
     */
    "auto_update"?: boolean;
    /**
     * The device vendor ID
     */
    "vendor_id"?: string;
    /**
     * Up to 5 custom JSON attributes
     */
    "custom_attributes"?: any;
    /**
     * URL for the current device manifest
     */
    "manifest"?: string;
    /**
     * The device trust class
     */
    "trust_class"?: number;
    /**
     * The key used to provision the device
     */
    "provision_key"?: string;
    /**
     * The ID of the channel used to communicate with the device
     */
    "mechanism"?: DeviceUpdateDetailMechanismEnum;
    /**
     * The device class
     */
    "device_class"?: string;
    /**
     * The address of the connector to use
     */
    "mechanism_url"?: string;
    /**
     * The serial number of the device
     */
    "serial_number"?: string;
    /**
     * The device trust level
     */
    "trust_level"?: number;
    /**
     * The description of the object
     */
    "description"?: string;
}

/**
 * DefaultApi
 */
export class DefaultApi extends ApiBase {

    /** 
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
     * @param mechanism The ID of the channel used to communicate with the device
     * @param provisionKey The key used to provision the device
     * @param accountId The owning IAM account ID
     * @param autoUpdate Mark this device for auto firmware update
     * @param bootstrappedTimestamp 
     * @param createdAt 
     * @param customAttributes Up to 5 custom JSON attributes
     * @param deployedState The state of the device&#39;s deployment
     * @param deployment The last deployment used on the device
     * @param description The description of the object
     * @param deviceClass 
     * @param deviceId DEPRECATED: The ID of the device
     * @param etag The entity instance signature
     * @param id The ID of the device
     * @param manifest URL for the current device manifest
     * @param mechanismUrl The address of the connector to use
     * @param name The name of the object
     * @param object The API resource entity
     * @param serialNumber The serial number of the device
     * @param state The current state of the device
     * @param trustClass The device trust class
     * @param trustLevel The device trust level
     * @param updatedAt The time the object was updated
     * @param vendorId The device vendor ID
     */
    deviceCreate (mechanism: string, provisionKey: string, accountId?: string, autoUpdate?: boolean, bootstrappedTimestamp?: string, createdAt?: Date, customAttributes?: { [key: string]: string; }, deployedState?: string, deployment?: string, description?: string, deviceClass?: string, deviceId?: string, etag?: Date, id?: string, manifest?: string, mechanismUrl?: string, name?: string, object?: string, serialNumber?: string, state?: string, trustClass?: number, trustLevel?: number, updatedAt?: Date, vendorId?: string, callback?: (error:any, data?:DeviceDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "mechanism" is set
        if (mechanism === null || mechanism === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'mechanism' missing when calling 'deviceCreate'."));
            }
            return;
        }
        // verify required parameter "provisionKey" is set
        if (provisionKey === null || provisionKey === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'provisionKey' missing when calling 'deviceCreate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};
        if (accountId !== undefined) {
            formParams['account_id'] = accountId;
        }

        if (autoUpdate !== undefined) {
            formParams['auto_update'] = autoUpdate;
        }

        if (bootstrappedTimestamp !== undefined) {
            formParams['bootstrapped_timestamp'] = bootstrappedTimestamp;
        }

        if (createdAt !== undefined) {
            formParams['created_at'] = createdAt;
        }

        if (customAttributes !== undefined) {
            formParams['custom_attributes'] = customAttributes;
        }

        if (deployedState !== undefined) {
            formParams['deployed_state'] = deployedState;
        }

        if (deployment !== undefined) {
            formParams['deployment'] = deployment;
        }

        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (deviceClass !== undefined) {
            formParams['device_class'] = deviceClass;
        }

        if (deviceId !== undefined) {
            formParams['device_id'] = deviceId;
        }

        if (etag !== undefined) {
            formParams['etag'] = etag;
        }

        if (id !== undefined) {
            formParams['id'] = id;
        }

        if (manifest !== undefined) {
            formParams['manifest'] = manifest;
        }

        if (mechanism !== undefined) {
            formParams['mechanism'] = mechanism;
        }

        if (mechanismUrl !== undefined) {
            formParams['mechanism_url'] = mechanismUrl;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }

        if (object !== undefined) {
            formParams['object'] = object;
        }

        if (provisionKey !== undefined) {
            formParams['provision_key'] = provisionKey;
        }

        if (serialNumber !== undefined) {
            formParams['serial_number'] = serialNumber;
        }

        if (state !== undefined) {
            formParams['state'] = state;
        }

        if (trustClass !== undefined) {
            formParams['trust_class'] = trustClass;
        }

        if (trustLevel !== undefined) {
            formParams['trust_level'] = trustLevel;
        }

        if (updatedAt !== undefined) {
            formParams['updated_at'] = updatedAt;
        }

        if (vendorId !== undefined) {
            formParams['vendor_id'] = vendorId;
        }


        return this.request({
            url: '/v3/devices/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
     * @param deviceId 
     */
    deviceDestroy (deviceId: string, callback?: (error:any, data?:DeviceDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "deviceId" is set
        if (deviceId === null || deviceId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceId' missing when calling 'deviceDestroy'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/devices/{device_id}/'.replace('{' + 'device_id' + '}', String(deviceId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
     * @param limit 
     * @param order 
     * @param after 
     * @param filter 
     * @param include 
     */
    deviceList (limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error:any, data?:DeviceListResp, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/devices/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
     * @param limit 
     * @param order 
     * @param after 
     * @param filter 
     * @param include 
     */
    deviceLogList (limit?: number, order?: string, after?: string, filter?: string, include?: string, callback?: (error:any, data?:DeviceLogSerializer, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/devicelog/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
     * @param deviceLogId 
     */
    deviceLogRetrieve (deviceLogId: string, callback?: (error:any, data?:DeviceLogSerializerData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "deviceLogId" is set
        if (deviceLogId === null || deviceLogId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceLogId' missing when calling 'deviceLogRetrieve'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/devicelog/{device_log_id}/'.replace('{' + 'device_log_id' + '}', String(deviceLogId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
     * @param deviceId The ID of the device
     */
    devicePartialUpdate (deviceId: string, callback?: (error:any, data?:DeviceDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "deviceId" is set
        if (deviceId === null || deviceId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceId' missing when calling 'devicePartialUpdate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/devices/{device_id}/'.replace('{' + 'device_id' + '}', String(deviceId)),
            method: 'PATCH',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
     * @param deviceId 
     */
    deviceRetrieve (deviceId: string, callback?: (error:any, data?:DeviceDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "deviceId" is set
        if (deviceId === null || deviceId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceId' missing when calling 'deviceRetrieve'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/devices/{device_id}/'.replace('{' + 'device_id' + '}', String(deviceId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
     * @param deviceId The ID of the device
     * @param body Device object to update
     */
    deviceUpdate (deviceId: string, body: DeviceUpdateDetail, callback?: (error:any, data?:DeviceDetail, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "deviceId" is set
        if (deviceId === null || deviceId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'deviceId' missing when calling 'deviceUpdate'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'deviceUpdate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/devices/{device_id}/'.replace('{' + 'device_id' + '}', String(deviceId)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    }
}

