/**
 * Provisioning endpoints - production line certificates.
 * A producton line certificate is used to associate a specific installation of the Factory Tool with an mbed Cloud account.  The production line certificate is generated by the Factory Tool, and needs to be uploaded using these APIs. 
 *
 * OpenAPI spec version: 0.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================

/* tslint:disable:no-unused-variable */

import superagent = require('superagent');
import { ApiBase } from "../common/apiBase";

export interface AListOfProductionLineCertificates_ {
    /**
     * \"list\"
     */
    "object"?: string;
    /**
     * Currently not used.
     */
    "total_count"?: number;
    /**
     * Currently not used.
     */
    "after"?: string;
    /**
     * Currently not used.
     */
    "limit"?: number;
    /**
     * Production line certificates.
     */
    "data"?: Array<ProductionLineCertificate>;
    /**
     * Currently not used.
     */
    "order"?: string;
}

export interface Body {
    /**
     * Comment of the production line certificate (max length is 256 characters).
     */
    "comment": string;
    /**
     * Production line certificate public key (from the Factory Tool, raw format - 65 bytes, Base64 encoded).
     */
    "production-line-certificate": string;
}

export interface Body1 {
    /**
     * Updated comment for the production line certificate (max length: 256 characters).
     */
    "comment": string;
}

export interface ProductionLineCertificate {
    /**
     * Comment of the production line certificate.
     */
    "comment"?: string;
    /**
     * UTC time of the entity creation.
     */
    "created_at"?: string;
    /**
     * Entity name = \"production-line-certificate\"
     */
    "object"?: string;
    /**
     * Currently not used.
     */
    "etag"?: string;
    /**
     * SHA256 hash of the production line certificate (public signing key).
     */
    "publicSigningKeyHash"?: string;
    /**
     * Production line certificate active.
     */
    "active"?: boolean;
    /**
     * Production line certificate (public signing key).
     */
    "production-line-certificate"?: string;
    /**
     * Entity ID.
     */
    "id"?: string;
}

/**
 * DefaultApi
 */
export class DefaultApi extends ApiBase {

    /** 
     * Gets the list of production line certificates associated with the account. 
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     */
    v3ProductionLineCertificatesGet (authorization: string, callback?: (error:any, data?:AListOfProductionLineCertificates_, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesGet'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/production-line-certificates',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * Deactivates the production line certificate.  There is no way to reactivate it. 
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID
     */
    v3ProductionLineCertificatesMUUIDDelete (authorization: string, mUUID: string, callback?: (error:any, data?:ProductionLineCertificate, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesMUUIDDelete'."));
            }
            return;
        }
        // verify required parameter "mUUID" is set
        if (mUUID === null || mUUID === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'mUUID' missing when calling 'v3ProductionLineCertificatesMUUIDDelete'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/production-line-certificates/{mUUID}'.replace('{' + 'mUUID' + '}', String(mUUID)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * Gets a single production line certificate by its mUUID. 
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID.
     */
    v3ProductionLineCertificatesMUUIDGet (authorization: string, mUUID: string, callback?: (error:any, data?:ProductionLineCertificate, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesMUUIDGet'."));
            }
            return;
        }
        // verify required parameter "mUUID" is set
        if (mUUID === null || mUUID === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'mUUID' missing when calling 'v3ProductionLineCertificatesMUUIDGet'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/production-line-certificates/{mUUID}'.replace('{' + 'mUUID' + '}', String(mUUID)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * Updates the comment on a production line certificate. 
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param mUUID Certificate mUUID
     * @param body 
     */
    v3ProductionLineCertificatesMUUIDPut (authorization: string, mUUID: string, body: Body1, callback?: (error:any, data?:ProductionLineCertificate, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesMUUIDPut'."));
            }
            return;
        }
        // verify required parameter "mUUID" is set
        if (mUUID === null || mUUID === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'mUUID' missing when calling 'v3ProductionLineCertificatesMUUIDPut'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'v3ProductionLineCertificatesMUUIDPut'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/production-line-certificates/{mUUID}'.replace('{' + 'mUUID' + '}', String(mUUID)),
            method: 'PUT',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    }
    /** 
     * Adds a new production line certificate to the account. 
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     * @param body 
     */
    v3ProductionLineCertificatesPost (authorization: string, body: Body, callback?: (error:any, data?:ProductionLineCertificate, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProductionLineCertificatesPost'."));
            }
            return;
        }
        // verify required parameter "body" is set
        if (body === null || body === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'body' missing when calling 'v3ProductionLineCertificatesPost'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/production-line-certificates',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
            body: body,
        }, callback);
    }
}

