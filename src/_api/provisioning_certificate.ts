/**
 * Provisioning endpoints - provisioning certificates.
 * A provisioning certificate is used to associate an mbed Cloud account with a specific installation of a Factory Tool. The certificate needs to be downloaded using this API and placed into the appropriate directory of the Factory Tool. 
 *
 * OpenAPI spec version: 0.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================

/* tslint:disable:no-unused-variable */

import superagent = require('superagent');
import { ApiBase } from "../common/apiBase";

export interface ProvisioningCertificate {
    /**
     * UTC time of the entity creation.
     */
    "created_at"?: string;
    /**
     * The provisioning certificate.
     */
    "provisioning-context-certificate"?: string;
    /**
     * Entity ID.
     */
    "id"?: string;
    /**
     * Currently not used.
     */
    "etag"?: string;
    /**
     * Currently not used.
     */
    "object"?: string;
}

/**
 * DefaultApi
 */
export class DefaultApi extends ApiBase {

    /** 
     * Gets the account&#39;s provisioning certificate.
     * @param authorization \&quot;Bearer\&quot; followed by the reference token or API key.
     */
    v3ProvisioningCertificateGet (authorization: string, callback?: (error:any, data?:ProvisioningCertificate, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3ProvisioningCertificateGet'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/provisioning-certificate',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
}

