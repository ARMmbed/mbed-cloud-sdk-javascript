/**
 * Firmware Catalog API
 * This is the API Documentation for the mbed firmware catalog service which is part of the update service.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================

/* tslint:disable:no-unused-variable */

import superagent = require('superagent');
import { ApiBase } from "../common/apiBase";

export interface FirmwareImageSerializer {
    /**
     * API Resource name
     */
    "object"?: string;
    /**
     * Whether there are more results to display
     */
    "has_more"?: boolean;
    /**
     * Total number of records
     */
    "total_count"?: number;
    /**
     * Entity id for fetch after it
     */
    "after"?: string;
    /**
     * The number of results to return
     */
    "limit"?: number;
    "data"?: Array<FirmwareImageSerializerData>;
    /**
     * Order of returned records
     */
    "order"?: string;
}

export interface FirmwareImageSerializerData {
    /**
     * The binary file of firmware image
     */
    "datafile": string;
    /**
     * The description of the object
     */
    "description": string;
    /**
     * The time the object was created
     */
    "created_at": Date;
    /**
     * The API resource entity
     */
    "object": string;
    /**
     * The time the object was updated
     */
    "updated_at": Date;
    /**
     * DEPRECATED: The ID of the firmware image
     */
    "image_id": string;
    /**
     * The entity instance signature
     */
    "etag": Date;
    /**
     * Checksum generated for the datafile
     */
    "datafile_checksum": string;
    /**
     * The ID of the firmware image
     */
    "id": string;
    /**
     * The name of the object
     */
    "name": string;
}

export interface FirmwareManifestSerializerData {
    "datafile"?: string;
    /**
     * DEPRECATED: The ID of the firmware manifest
     */
    "manifest_id"?: string;
    /**
     * The description of the object
     */
    "description"?: string;
    /**
     * The version of the firmware manifest (as a timestamp)
     */
    "timestamp"?: Date;
    /**
     * The time the object was created
     */
    "created_at"?: Date;
    /**
     * The API resource entity
     */
    "object"?: string;
    /**
     * The time the object was updated
     */
    "updated_at"?: Date;
    /**
     * The contents of the manifest
     */
    "manifest_contents"?: any;
    /**
     * The entity instance signature
     */
    "etag"?: Date;
    /**
     * The class of device
     */
    "device_class"?: string;
    /**
     * The ID of the firmware manifest
     */
    "id"?: string;
    /**
     * The name of the object
     */
    "name"?: string;
}

export interface ManifestSerializer {
    /**
     * API Resource name
     */
    "object": string;
    /**
     * Whether there are more results to display
     */
    "has_more"?: boolean;
    /**
     * Total number of records
     */
    "total_count"?: number;
    /**
     * Entity id for fetch after it
     */
    "after"?: string;
    /**
     * The number of results to return
     */
    "limit"?: number;
    "data"?: Array<FirmwareManifestSerializerData>;
    /**
     * Order of returned records
     */
    "order"?: string;
}

/**
 * DefaultApi
 */
export class DefaultApi extends ApiBase {

    /** 
     * &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
     */
    deployInfoGET (callback?: (error:any, data?:any, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/fc_deploy_info',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Create firmware image&lt;/p&gt;&lt;pre&gt;YAMLError:  while scanning a simple key   in \&quot;&lt;unicode string&gt;\&quot;, line 16, column 9:             Cannot validate the data used to ...              ^ could not find expected &#39;:&#39;   in \&quot;&lt;unicode string&gt;\&quot;, line 17, column 5:         - code: 401         ^&lt;/pre&gt;
     * @param datafile The binary file of firmware image
     * @param name The name of the object
     * @param description The description of the object
     * @param updatingRequestId 
     * @param updatingIpAddress 
     * @param name2 
     * @param description2 
     * @param createdAt 
     * @param updatedAt 
     * @param datafileChecksum 
     * @param etag 
     * @param imageId 
     * @param object 
     */
    firmwareImageCreate (datafile: any, name: string, description?: string, updatingRequestId?: string, updatingIpAddress?: string, name2?: string, description2?: string, createdAt?: string, updatedAt?: string, datafileChecksum?: string, etag?: string, imageId?: string, object?: string, callback?: (error:any, data?:FirmwareImageSerializerData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "datafile" is set
        if (datafile === null || datafile === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'datafile' missing when calling 'firmwareImageCreate'."));
            }
            return;
        }
        // verify required parameter "name" is set
        if (name === null || name === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'name' missing when calling 'firmwareImageCreate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};
        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }
        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }
        if (name2 !== undefined) {
            queryParameters['name'] = name2;
        }
        if (description2 !== undefined) {
            queryParameters['description'] = description2;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (imageId !== undefined) {
            queryParameters['image_id'] = imageId;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }

        let useFormData = false;
        let formParams: any = {};
        if (datafile !== undefined) {
            formParams['datafile'] = datafile;
        }
        useFormData = true;

        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }


        return this.request({
            url: '/v3/firmware-images/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Delete firmware image&lt;/p&gt;
     * @param imageId The ID of the firmware image
     * @param updatingRequestId 
     * @param updatingIpAddress 
     * @param name 
     * @param description 
     * @param createdAt 
     * @param updatedAt 
     * @param datafileChecksum 
     * @param etag 
     * @param object 
     */
    firmwareImageDestroy (imageId: number, updatingRequestId?: string, updatingIpAddress?: string, name?: string, description?: string, createdAt?: string, updatedAt?: string, datafileChecksum?: string, etag?: string, object?: string, callback?: (error:any, data?:FirmwareImageSerializer, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "imageId" is set
        if (imageId === null || imageId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'imageId' missing when calling 'firmwareImageDestroy'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};
        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }
        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        if (description !== undefined) {
            queryParameters['description'] = description;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/firmware-images/{image_id}/'.replace('{' + 'image_id' + '}', String(imageId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;List all firmware images. The result will be paged into pages of 100.&lt;/p&gt;
     * @param limit 
     * @param order 
     * @param after 
     * @param include 
     */
    firmwareImageList (limit?: number, order?: string, after?: string, include?: string, callback?: (error:any, data?:FirmwareImageSerializer, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/firmware-images/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating firmware images.  &lt;/p&gt; &lt;p&gt;Retrieve firmware image&lt;/p&gt;
     * @param imageId The ID of the firmware image
     * @param updatingRequestId 
     * @param updatingIpAddress 
     * @param name 
     * @param description 
     * @param createdAt 
     * @param updatedAt 
     * @param datafileChecksum 
     * @param etag 
     * @param object 
     */
    firmwareImageRetrieve (imageId: number, updatingRequestId?: string, updatingIpAddress?: string, name?: string, description?: string, createdAt?: string, updatedAt?: string, datafileChecksum?: string, etag?: string, object?: string, callback?: (error:any, data?:FirmwareImageSerializer, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "imageId" is set
        if (imageId === null || imageId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'imageId' missing when calling 'firmwareImageRetrieve'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};
        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }
        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        if (description !== undefined) {
            queryParameters['description'] = description;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/firmware-images/{image_id}/'.replace('{' + 'image_id' + '}', String(imageId)),
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Create firmware manifest&lt;/p&gt;
     * @param datafile The manifest file to create
     * @param name The name of the object
     * @param description The description of the object
     */
    firmwareManifestCreate (datafile: any, name: string, description?: string, callback?: (error:any, data?:FirmwareManifestSerializerData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "datafile" is set
        if (datafile === null || datafile === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'datafile' missing when calling 'firmwareManifestCreate'."));
            }
            return;
        }
        // verify required parameter "name" is set
        if (name === null || name === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'name' missing when calling 'firmwareManifestCreate'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};
        if (datafile !== undefined) {
            formParams['datafile'] = datafile;
        }
        useFormData = true;

        if (description !== undefined) {
            formParams['description'] = description;
        }

        if (name !== undefined) {
            formParams['name'] = name;
        }


        return this.request({
            url: '/v3/firmware-manifests/',
            method: 'POST',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Delete firmware manifest&lt;/p&gt;
     * @param manifestId The ID of the firmware manifest
     */
    firmwareManifestDestroy (manifestId: number, callback?: (error:any, data?:FirmwareManifestSerializerData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "manifestId" is set
        if (manifestId === null || manifestId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'manifestId' missing when calling 'firmwareManifestDestroy'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/firmware-manifests/{manifest_id}/'.replace('{' + 'manifest_id' + '}', String(manifestId)),
            method: 'DELETE',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;List all firmware manifests&lt;/p&gt;
     * @param limit 
     * @param order 
     * @param after 
     * @param include 
     */
    firmwareManifestList (limit?: number, order?: string, after?: string, include?: string, callback?: (error:any, data?:ManifestSerializer, response?: superagent.Response) => any): superagent.SuperAgentRequest {

        let headerParams: any = {};

        let queryParameters: any = {};
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (order !== undefined) {
            queryParameters['order'] = order;
        }
        if (after !== undefined) {
            queryParameters['after'] = after;
        }
        if (include !== undefined) {
            queryParameters['include'] = include;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/firmware-manifests/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * &lt;p&gt;The APIs for creating and manipulating firmware manifests.  &lt;/p&gt; &lt;p&gt;Retrieve firmware manifest&lt;/p&gt;
     * @param manifestId The ID of the firmware manifest
     * @param updatingRequestId 
     * @param updatingIpAddress 
     * @param name 
     * @param description 
     * @param createdAt 
     * @param updatedAt 
     * @param datafileChecksum 
     * @param deviceClass 
     * @param etag 
     * @param object 
     * @param timestamp 
     */
    firmwareManifestRetrieve (manifestId: number, updatingRequestId?: string, updatingIpAddress?: string, name?: string, description?: string, createdAt?: string, updatedAt?: string, datafileChecksum?: string, deviceClass?: string, etag?: string, object?: string, timestamp?: string, callback?: (error:any, data?:FirmwareManifestSerializerData, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "manifestId" is set
        if (manifestId === null || manifestId === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'manifestId' missing when calling 'firmwareManifestRetrieve'."));
            }
            return;
        }

        let headerParams: any = {};

        let queryParameters: any = {};
        if (updatingRequestId !== undefined) {
            queryParameters['updating_request_id'] = updatingRequestId;
        }
        if (updatingIpAddress !== undefined) {
            queryParameters['updating_ip_address'] = updatingIpAddress;
        }
        if (name !== undefined) {
            queryParameters['name'] = name;
        }
        if (description !== undefined) {
            queryParameters['description'] = description;
        }
        if (createdAt !== undefined) {
            queryParameters['created_at'] = createdAt;
        }
        if (updatedAt !== undefined) {
            queryParameters['updated_at'] = updatedAt;
        }
        if (datafileChecksum !== undefined) {
            queryParameters['datafile_checksum'] = datafileChecksum;
        }
        if (deviceClass !== undefined) {
            queryParameters['device_class'] = deviceClass;
        }
        if (etag !== undefined) {
            queryParameters['etag'] = etag;
        }
        if (object !== undefined) {
            queryParameters['object'] = object;
        }
        if (timestamp !== undefined) {
            queryParameters['timestamp'] = timestamp;
        }

        let useFormData = false;
        let formParams: any = {};
        if (manifestId !== undefined) {
            formParams['manifest_id'] = manifestId;
        }


        return this.request({
            url: '/v3/firmware-manifests/{manifest_id}/',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
}

