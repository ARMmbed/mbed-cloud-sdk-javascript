/**
 * mbed Cloud Connector Statistics REST API
 * mbed Cloud Connector Statistics REST API provides statistics about other cloud services through defined counters.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================

/* tslint:disable:no-unused-variable */

import superagent = require('superagent');
import { ApiBase } from "../common/apiBase";

export interface Data {
    /**
     * Number of successful bootstrap certificate create requests account has used.
     */
    "bootstrap_certificate_create"?: number;
    /**
     * Number of suuccessful connector rest API requests account has used.
     */
    "connector_ca_rest_api_count"?: number;
    /**
     * Number of failed bootstraps account has used.
     */
    "bootstraps_failed"?: number;
    /**
     * Number of failed connector rest API requests account has used.
     */
    "connector_ca_rest_api_error_count"?: number;
    /**
     * Number of successful connector full credentials get requests account has used.
     */
    "connector_full_credentials_get"?: number;
    /**
     * Number of successful bootstrap certificate delete requests account has used.
     */
    "bootstrap_certificate_delete"?: number;
    /**
     * UTC time in RFC3339 format
     */
    "timestamp"?: string;
    /**
     * Number of pending bootstraps account has used.
     */
    "bootstraps_pending"?: number;
    /**
     * Number of successful connector certificate create requests account has used.
     */
    "connector_certificate_create"?: number;
    /**
     * Number of successful bootstrap full credentials get requests account has used.
     */
    "bootstrap_full_credentials_get"?: number;
    /**
     * Number of successful connector certificate create requests account has used.
     */
    "connector_certificate_delete"?: number;
    /**
     * Number of successful connector credentials get requests account has used.
     */
    "connector_credentials_get"?: number;
    /**
     * Number of successful bootstrap credentials get requests account has used.
     */
    "bootstrap_credentials_get"?: number;
    /**
     * Number of successful bootstraps account has used.
     */
    "bootstraps_successful"?: number;
}

export interface ErrorResponse {
    /**
     * http response code.
     */
    "code"?: number;
    "fields"?: FieldsArray;
    /**
     * response type, always \"error\"
     */
    "object"?: string;
    /**
     * request id for the request.
     */
    "request_id"?: string;
    /**
     * description of the error.
     */
    "message"?: string;
    /**
     * type of error.
     */
    "type"?: string;
}

export interface Field {
    /**
     * error description
     */
    "message"?: string;
    /**
     * field name in the request for which validation is failed
     */
    "name"?: string;
}

export interface FieldsArray extends Array<Field> {
}

export interface SuccessfulResponse extends Array<Data> {
}

/**
 * AccountApi
 */
export class AccountApi extends ApiBase {

    /** 
     * provides account specific statistics for other cloud services
     * This REST API will be used to get account specific statistics
     * @param include Comma-separated list of requested metrics. Supported values are bootstraps_successful, bootstraps_failed, bootstraps_pending, bootstrap_certificate_create, bootstrap_certificate_delete, connector_certificate_create,  connector_certificate_delete, bootstrap_credentials_get, bootstrap_full_credentials_get, connector_credentials_get, connector_full_credentials_get, connector_ca_rest_api_count, connector_ca_rest_api_error_count
     * @param start UTC time/year/date in RFC3339 format. Fetch data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The parameter is not mandatory, if period specified. 
     * @param end UTC time / year / date in RFC3339 format. Fetch data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207.The parameter is not mandatory, if period specified. 
     * @param period Period. Fetch data for the period in days, weeks or hours. Sample values: 2h, 3w, 4d. The parameter is not mandatory, if start and end time are specified. 
     * @param interval Group data by this interval in days, weeks or hours. Sample values: 2h, 3w, 4d. 
     * @param authorization Bearer {Access Token}. A valid ApiGateway access token. The token is validated and the associated account identifier is used to retrieve account specific statistics. 
     */
    v3MetricsGet (include: string, start: string, end: string, period: string, interval: string, authorization: string, callback?: (error:any, data?:SuccessfulResponse, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'include' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "start" is set
        if (start === null || start === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'start' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "end" is set
        if (end === null || end === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'end' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "period" is set
        if (period === null || period === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'period' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'interval' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3MetricsGet'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/metrics',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
}

/**
 * AdminApi
 */
export class AdminApi extends ApiBase {

    /** 
     * provides global statistics for other cloud services
     * This REST API will be used to get global statistics
     * @param include Comma-separated list of requested metrics. Supported values are bootstraps_successful, bootstraps_failed, bootstraps_pending, bootstrap_certificate_create, bootstrap_certificate_delete, connector_certificate_create,  connector_certificate_delete, bootstrap_credentials_get, bootstrap_full_credentials_get, connector_credentials_get, connector_full_credentials_get, connector_ca_rest_api_count, connector_ca_rest_api_error_count
     * @param start UTC time/year/date in RFC3339 format. Fetch data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The parameter is not mandatory, if period specified. 
     * @param end UTC time / year / date in RFC3339 format. Fetch data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207.The parameter is not mandatory, if period specified. 
     * @param period Period. Fetch data for the period in days, weeks or hours. Sample values: 2h, 3w, 4d. The parameter is not mandatory, if start and end time are specified. 
     * @param interval Group data by this interval in days, weeks or hours. Sample values: 2h, 3w, 4d. 
     * @param authorization Bearer {Access Token}. A valid ApiGateway access token. The token is validated and the associated account identifier is used to retrieve account specific statistics. 
     */
    v3MetricsGlobalGet (include: string, start: string, end: string, period: string, interval: string, authorization: string, callback?: (error:any, data?:SuccessfulResponse, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'include' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "start" is set
        if (start === null || start === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'start' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "end" is set
        if (end === null || end === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'end' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "period" is set
        if (period === null || period === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'period' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'interval' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/metrics/global',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
}

/**
 * StatisticsApi
 */
export class StatisticsApi extends ApiBase {

    /** 
     * provides account specific statistics for other cloud services
     * This REST API will be used to get account specific statistics
     * @param include Comma-separated list of requested metrics. Supported values are bootstraps_successful, bootstraps_failed, bootstraps_pending, bootstrap_certificate_create, bootstrap_certificate_delete, connector_certificate_create,  connector_certificate_delete, bootstrap_credentials_get, bootstrap_full_credentials_get, connector_credentials_get, connector_full_credentials_get, connector_ca_rest_api_count, connector_ca_rest_api_error_count
     * @param start UTC time/year/date in RFC3339 format. Fetch data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The parameter is not mandatory, if period specified. 
     * @param end UTC time / year / date in RFC3339 format. Fetch data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207.The parameter is not mandatory, if period specified. 
     * @param period Period. Fetch data for the period in days, weeks or hours. Sample values: 2h, 3w, 4d. The parameter is not mandatory, if start and end time are specified. 
     * @param interval Group data by this interval in days, weeks or hours. Sample values: 2h, 3w, 4d. 
     * @param authorization Bearer {Access Token}. A valid ApiGateway access token. The token is validated and the associated account identifier is used to retrieve account specific statistics. 
     */
    v3MetricsGet (include: string, start: string, end: string, period: string, interval: string, authorization: string, callback?: (error:any, data?:SuccessfulResponse, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'include' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "start" is set
        if (start === null || start === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'start' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "end" is set
        if (end === null || end === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'end' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "period" is set
        if (period === null || period === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'period' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'interval' missing when calling 'v3MetricsGet'."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3MetricsGet'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/metrics',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
    /** 
     * provides global statistics for other cloud services
     * This REST API will be used to get global statistics
     * @param include Comma-separated list of requested metrics. Supported values are bootstraps_successful, bootstraps_failed, bootstraps_pending, bootstrap_certificate_create, bootstrap_certificate_delete, connector_certificate_create,  connector_certificate_delete, bootstrap_credentials_get, bootstrap_full_credentials_get, connector_credentials_get, connector_full_credentials_get, connector_ca_rest_api_count, connector_ca_rest_api_error_count
     * @param start UTC time/year/date in RFC3339 format. Fetch data with timestamp greater than or equal to this value. Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207. The parameter is not mandatory, if period specified. 
     * @param end UTC time / year / date in RFC3339 format. Fetch data with timestamp less than this value.Sample values: 20170207T092056990Z / 2017-02-07T09:20:56.990Z / 2017 / 20170207.The parameter is not mandatory, if period specified. 
     * @param period Period. Fetch data for the period in days, weeks or hours. Sample values: 2h, 3w, 4d. The parameter is not mandatory, if start and end time are specified. 
     * @param interval Group data by this interval in days, weeks or hours. Sample values: 2h, 3w, 4d. 
     * @param authorization Bearer {Access Token}. A valid ApiGateway access token. The token is validated and the associated account identifier is used to retrieve account specific statistics. 
     */
    v3MetricsGlobalGet (include: string, start: string, end: string, period: string, interval: string, authorization: string, callback?: (error:any, data?:SuccessfulResponse, response?: superagent.Response) => any): superagent.SuperAgentRequest {
        // verify required parameter "include" is set
        if (include === null || include === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'include' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "start" is set
        if (start === null || start === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'start' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "end" is set
        if (end === null || end === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'end' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "period" is set
        if (period === null || period === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'period' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "interval" is set
        if (interval === null || interval === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'interval' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }
        // verify required parameter "authorization" is set
        if (authorization === null || authorization === undefined) {
            if (callback) {
                callback(new Error("Required parameter 'authorization' missing when calling 'v3MetricsGlobalGet'."));
            }
            return;
        }

        let headerParams: any = {};
        headerParams['Authorization'] = authorization;

        let queryParameters: any = {};
        if (include !== undefined) {
            queryParameters['include'] = include;
        }
        if (start !== undefined) {
            queryParameters['start'] = start;
        }
        if (end !== undefined) {
            queryParameters['end'] = end;
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (interval !== undefined) {
            queryParameters['interval'] = interval;
        }

        let useFormData = false;
        let formParams: any = {};

        return this.request({
            url: '/v3/metrics/global',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    }
}

