general:
  artifacts:
    - ~/docs
    - ~/reports

machine:
  node:
    version: 4.8.0
  services:
    - docker
  environment:
    PROJECT_NAME: ${CIRCLE_PROJECT_REPONAME}
    PROJECT_TAG: ${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
    PROJECT_LIVE_BRANCH: build
    PROJECT_DOCS: ${HOME}/docs
    PROJECT_REPORTS: ${HOME}/reports
    COVERAGE_REPORTS: ${PROJECT_REPORTS}/coverage
    FILE_UNITTESTS: ${PROJECT_REPORTS}/unittests.html
    FILE_INTTESTS: ${PROJECT_REPORTS}/results.xml
    FILE_RAW: ${PROJECT_REPORTS}/raw.txt

# Install dependencies for CI; latest npm, latest chrome, code coverage, html output and testrunner reqs
dependencies:
  pre:
    - npm install -g npm@latest
    - npm install -g codecov ansi-html-stream
    - curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - sudo dpkg -i google-chrome.deb
    - sudo sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox|g' /opt/google/chrome/google-chrome
    - |
      login="$(aws ecr get-login)"
      ${login}
      login="$(aws ecr get-login --no-include-email)"
      ${login}
    - docker pull ${TESTRUNNER_DOCKER_IMAGE}

compile:
  override:
    - npm run gulp
    - mkdir -p ${PROJECT_DOCS}
    - cp -r docs/* ${PROJECT_DOCS}/
    - npm run tpip
    - mkdir -p ${PROJECT_REPORTS}
    - cp tpip.csv ${PROJECT_REPORTS}/

test:
  override:
    - |
      if [ $CIRCLE_BRANCH = $PROJECT_LIVE_BRANCH ]; then
        echo export MBED_CLOUD_HOST='' >> $HOME/.circlerc;
        echo export MBED_CLOUD_API_KEY=$MBED_CLOUD_API_KEY_PROD >> $HOME/.circlerc;
      fi
    - echo "<h1>${PROJECT_NAME} unit tests (build ${CIRCLE_BUILD_NUM})</h1>" >> ${FILE_UNITTESTS}
    - set -o pipefail && npm test 2>&1 | tee /dev/tty | grep -v '^Tunnel d' | ansi-html >> ${FILE_UNITTESTS}
    - cat ${FILE_UNITTESTS} | grep 'TOTAL' >> ${FILE_RAW}
    - bash run.sh:
        pwd: tests
    - cat ${FILE_INTTESTS} | grep 'testsuite' >> ${FILE_RAW}
    - mkdir -p ${COVERAGE_REPORTS}
    - cp -r reports/* ${COVERAGE_REPORTS}
    - cat ${COVERAGE_REPORTS}/cobertura-coverage.xml | grep '<coverage' >> ${FILE_RAW}
    - codecov ${COVERAGE_REPORTS}/lcov.info
    - mkdir -p ${CIRCLE_TEST_REPORTS}/junit
    - cp junit.xml ${CIRCLE_TEST_REPORTS}/junit/test-results.xml

deployment:
  staging:
    branch: master
    commands:
      - echo Syncing ${PROJECT_NAME} to S3...
      - aws s3 sync --delete --cache-control max-age=3600 docs/ s3://${PROJECT_NAME}
      - echo Syncing ${PROJECT_NAME} to ${PROJECT_LIVE_BRANCH} on GitHub...
      - git add --force bundles docs lib types
      - git stash save
      - git checkout ${PROJECT_LIVE_BRANCH}
      - git merge master --no-commit
      - git checkout stash -- .
      - git commit --allow-empty --message "Automatic Deployment"
      - git push
  release:
    branch: /[0-9]+\.[0-9]+.*/
    commands:
      - echo Tagging ${PROJECT_NAME} in GitHub...
      - git tag ${PROJECT_TAG}
      - git push --tags
