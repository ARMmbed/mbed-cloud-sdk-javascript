{"version":3,"sources":["_tests/tlvDecode.ts"],"names":["Buffer","Object","defineProperty","exports","value","_a","intern","getInterface","suite","test","assert","getPlugin","tlvDecoder_1","require","decode","payload","atob","toString","result","decodeTlv","deepEqual","tlv","/0","/1","/11/0","/13","/16","/17","/18","/2","/21"],"mappings":"0cAAA,SAAAA;;;;;;;;;;;;;;;;AAkBQC,OAAAC,eAAAC,EAAA,cAAoCC,OAAA,GAE5C,IAAAC,GAAAC,OAAAC,aAAA,OAAAC,EAAAH,EAAAG,MAAiDC,EAAAJ,EAAAI,KAEjDC,EAAMJ,OAAaK,UAAA,QAAAD,OAEfE,EAAAC,EAAuB,sCACR,mBAAqBC,GAAOC,GACvC,MAAkB,kBAAPC,MACdA,KAAAD,GAEI,GAAAf,GAAAe,EAAyB,UAAAE,SAAA,YAE1B,wBAAyB,WAC1B,GAAAC,GAAAN,EAAAO,UAAA,GAECT,GAACU,UAAAF,UAED,uBAA2B,WAE3B,GAEAG,GAAOP,EAFQ,QAGXI,EAAQN,EAAAO,UAAAE,KACTD,UAAAF,GACJI,KAAA,SAIC,wBAA4B,WAE5B,GAEAD,GAAOP,EAFQ,wKAGXI,EAAON,EAAAO,UAAAE,KACPD,UAAOF,GACPI,KAAA,EACAC,KAAK,EACLC,QAAO,EACPC,MAAO,WACPC,MAAO,IACPC,MAAM,kBACNC,MAAO,uBACRC,KAAA,IACJC,MAAA","file":"tlvDecode.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { decodeTlv } from \"../common/tlvDecoder\";\n\nsuite(\"decodeTlv\", () => {\n\n    function decode(payload) {\n        if (typeof atob === \"function\") return atob(payload);\n        return new Buffer(payload, \"base64\").toString(\"binary\");\n    }\n\n    test(\"should decode nothing\", () => {\n        const result = decodeTlv(\"\");\n        assert.deepEqual(result, {});\n    });\n\n    test(\"should decode simple\", () => {\n        const payload = \"AAA=\";\n        const tlv = decode(payload);\n\n        const result = decodeTlv(tlv);\n\n        assert.deepEqual(result, {\n            \"/0\": \"\"\n        });\n    });\n\n    test(\"should decode complex\", () => {\n        const payload = \"iAsLSAAIAAAAAAAAAADBEFXIABAAAAAAAAAAAAAAAAAAAAAAyAEQAAAAAAAAAAAAAAAAAAAAAMECMMgRD2Rldl9kZXZpY2VfdHlwZcgSFGRldl9oYXJkd2FyZV92ZXJzaW9uyBUIAAAAAAAAAADIDQgAAAAAWdH0Bw==\";\n        const tlv = decode(payload);\n\n        const result = decodeTlv(tlv);\n\n        assert.deepEqual(result, {\n            \"/0\": 0,\n            \"/1\": 0,\n            \"/11/0\": 0,\n            \"/13\": 1506931719,\n            \"/16\": \"U\",\n            \"/17\": \"dev_device_type\",\n            \"/18\": \"dev_hardware_version\",\n            \"/2\": \"0\",\n            \"/21\": 0\n        });\n    });\n});\n"]}