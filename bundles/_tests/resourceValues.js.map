{"version":3,"sources":["../../src/_tests/resourceValues.ts"],"names":["mockNotify","subscribe","deviceId","path","payload","forEach","item","notifyResourceValues","Object","defineProperty","exports","value","_a","intern","getInterface","suite","test","assert","getPlugin","subscribe_1","require","Subscribe","observer","resourceValues","resourcePaths","presub","deepEqual","localPresubscriptions","presubs","items","addListener","res","push","lengthOf"],"mappings":"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","file":"resourceValues.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\nimport { Subscribe } from \"../subscribe/subscribe\";\nimport { PresubscriptionObject, NotificationData } from \"../connect/types\";\n\nsuite(\"testResourceValues\", () => {\n\n    test(\"presubscriptionConstruction\", () => {\n        const subscribe = new Subscribe();\n        const observer = subscribe.resourceValues({ deviceId: \"2\", resourcePaths: [ \"3/0/*\", \"4/0/1\" ] });\n        const presub: PresubscriptionObject = { deviceId: \"2\", resourcePaths: [ \"3/0/*\", \"4/0/1\" ] };\n        assert.deepEqual(presub, observer.localPresubscriptions[0]);\n    });\n\n    test(\"multiplePresubscriptionConstruction\", () => {\n        const subscribe = new Subscribe();\n        const observer = subscribe.resourceValues({ deviceId: [ \"2\", \"3\" ], resourcePaths: [ \"3/0/*\", \"4/0/1\" ] });\n        const presubs: Array<PresubscriptionObject> = [ { deviceId: \"2\", resourcePaths: [ \"3/0/*\", \"4/0/1\" ] }, { deviceId: \"3\", resourcePaths: [ \"3/0/*\", \"4/0/1\" ] } ];\n        assert.deepEqual(presubs, observer.localPresubscriptions);\n    });\n\n    test(\"subscribingToOneDevice\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ deviceId: \"1\" });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 3);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 6);\n    });\n\n    test(\"subscribingToMultipleDevices\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ deviceId: [ \"1\", \"2\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 6);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 12);\n    });\n\n    test(\"subscribingToResourcePath\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ resourcePaths: [ \"/3/0/0\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 5);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 10);\n    });\n\n    test(\"subscribingToOneDeviceAndResourcePath\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ deviceId: \"2\", resourcePaths: [ \"/3/0/0\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 1);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 2);\n    });\n\n    test(\"subscribingToOneDeviceAndResourcePaths\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ deviceId: \"2\", resourcePaths: [ \"/3/0/0\", \"/3/0/1\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 2);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 4);\n    });\n\n    test(\"subscribingToMultipleDevicesAndResourcePath\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ deviceId: [ \"2\", \"3\" ], resourcePaths: [ \"/3/0/0\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 2);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 4);\n    });\n\n    test(\"subscribingToMultipleDevicesAndResourcePaths\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ deviceId: [ \"2\", \"3\" ], resourcePaths: [ \"/3/0/0\", \"/3/0/1\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 4);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 8);\n    });\n\n    test(\"subscribingToOneDeviceWildcard\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ deviceId: \"*\" });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 15);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 30);\n    });\n\n    test(\"subscribingToOneDeviceAndResourcePathWildcard\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<NotificationData> = [];\n        const observer = subscribe.resourceValues({ deviceId: \"2\", resourcePaths: [ \"/3/*\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 3);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 6);\n    });\n});\n\nexport function mockNotify(subscribe: Subscribe): void {\n    const notificationList: Array<NotificationData> = [\n        { deviceId: \"1\", path: \"/3/0/0\", payload: \"SGK=\" },\n        { deviceId: \"1\", path: \"/3/0/1\", payload: \"SGK=\" },\n        { deviceId: \"1\", path: \"/3/0/2\", payload: \"SGK=\" },\n        { deviceId: \"2\", path: \"/3/0/0\", payload: \"SGK=\" },\n        { deviceId: \"2\", path: \"/3/0/1\", payload: \"SGK=\" },\n        { deviceId: \"2\", path: \"/3/0/2\", payload: \"SGK=\" },\n        { deviceId: \"3\", path: \"/3/0/0\", payload: \"SGK=\" },\n        { deviceId: \"3\", path: \"/3/0/1\", payload: \"SGK=\" },\n        { deviceId: \"3\", path: \"/3/0/2\", payload: \"SGK=\" },\n        { deviceId: \"4\", path: \"/3/0/0\", payload: \"SGK=\" },\n        { deviceId: \"4\", path: \"/3/0/1\", payload: \"SGK=\" },\n        { deviceId: \"4\", path: \"/3/0/2\", payload: \"SGK=\" },\n        { deviceId: \"5\", path: \"/3/0/0\", payload: \"SGK=\" },\n        { deviceId: \"5\", path: \"/3/0/1\", payload: \"SGK=\" },\n        { deviceId: \"5\", path: \"/3/0/2\", payload: \"SGK=\" }\n    ];\n\n    notificationList.forEach(item => subscribe.notifyResourceValues(item));\n}\n"],"sourceRoot":"../../lib"}