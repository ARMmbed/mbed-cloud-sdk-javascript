{"version":3,"sources":["_tests/apiResponse.ts"],"names":["Object","defineProperty","exports","value","_a","intern","getInterface","suite","test","beforeEach","assert","getPlugin","apiBase_1","require","Api","_super","apply","this","arguments","__extends","prototype","complete","error","response","json","callback","call","ApiBase","api","_error","_data","body","text","data","strictEqual","birthday","typeOf","getDate","getMonth","getFullYear","date","notEqual","message","details"],"mappings":"ycAAA;;;;;;;;;;;;;;;;sUAiBMA,QAAAC,eAAAC,EAAA,cAAEC,OAAK,GACL,IAAAC,GAAAC,OAAAC,aAAA,OAAAC,EAAoCH,EAAAG,MAAAC,EAAAJ,EAAAI,KAAAC,EAAAL,EAAAK,WAE5CC,EAAAL,OAAAM,UAAA,QAAAD,OAGAE,EAAAC,EAAA,qBAAkBC,EAAA,SAAOC,gBAIxB,MAAA,QAAAA,GAAAA,EAAAC,MAAAC,KAAAC,YAAAD,KAJiB,MAAlBE,GAAAL,EAAAC,KAEQK,UAAOC,SAAA,SAAMC,EAAQC,EAACC,EAAOC,GAChC,MAAAV,GAAAK,UAAAC,SAAAK,KAAAT,KAAAK,EAAAC,EAAAC,EAAAC,IAHaX,GAMlBF,EAAMe,WAEF,UAAa,WAEb,GAAAC,KACU,WACPA,EAAA,GAAAd,OAIC,0BAAyB,aACrBO,SAAO,KAAM,MAAA,EAAA,SAAAQ,EAAAC,GACdpB,GAAA,SAKH,qBAAoB,aAIhBW,SAAM,MACNU,KAJS,OAKVC,KAHC,WAIM,SAACH,EAAgBI,GACxBvB,EAAAwB,YAAAD,EAPU,cAYb,qBAAoB,aAGhBZ,SAAM,MACPW,KAFC,WAGM,SAACH,EAAgBI,GACxBvB,EAAAwB,YAAAD,EAJC,cASJ,mBAAa,aAGTZ,SAAM,YAELc,SAHD,gCAKA,SAAcN,EAAKI,GACnBvB,EAAO0B,OAAAH,EAAYE,SAAK,QACxBzB,EAAOwB,YAAYD,EAAKE,SAASE,UAAU,IAC3C3B,EAAOwB,YAAYD,EAAKE,SAASG,WAAW,GAC7C5B,EAAAwB,YAAAD,EAAAE,SAAAI,cAAA,YAKH,iCAAqC,WAErC,GAAIC,GAAA,2BACAnB,SAAM,YAELc,SAAAK,OAED,SAAcX,EAAKI,GACnBvB,EAAO0B,OAAAH,EAAYE,SAAK,UACzBzB,EAAAwB,YAAAD,EAAAE,SAAAK,SAKH,oCAAsC,WAEtC,GAAIA,GAAA,2BACAnB,SAAM,YAELc,SAAAK,OAEK,SAAQX,EAAKI,GACnBvB,EAAO0B,OAAAH,EAASE,SAAY,UAC7BzB,EAAA+B,SAAAR,EAAAO,SAKH,qBAAyB,aAGrBnB,UACDqB,QAFU,gBAGT,EAAO,SAAYpB,GACpBZ,EAAAwB,YAAAZ,EAAAoB,QAJU,gBASb,4BAAyB,aAIrBrB,UACDqB,QAJa,WAMbX,KAJU,mBAKH,SAACT,GACPZ,EAAOwB,YAAYZ,EAAMoB,QARb,UASbhC,EAAAwB,YAAAZ,EAAAqB,QAPU,sBAYb,mCAAyB,aAKrBtB,UACDqB,QALG,WAOFX,KAJS,sBAMRW,QARW,cAUN,SAACpB,GACPZ,EAAOwB,YAAYZ,EAAMoB,QAXb,UAYbhC,EAAAwB,YAAAZ,EAAAqB,QAVU,sBAeb,+BAAyB,aAIrBtB,UACDqB,QAJY,iBAOVA,QALQ,cAOH,SAACpB,GACRZ,EAAAwB,YAAAZ,EAAAoB,QARU,gBAab,uCAAyB,aAIrBrB,UACDqB,QAJY,0BAQNpB,MANI,eASH,SAACA,GACRZ,EAAAwB,YAAAZ,EAAAoB,QAVU","file":"apiResponse.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test, beforeEach } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { ApiBase } from \"../common/apiBase\";\nimport { SDKError } from \"../common/sdkError\";\n\nclass Api extends ApiBase {\n    public complete(error: any, response: any, json: boolean, callback?: (sdkError: SDKError, data) => any) {\n        return super.complete(error, response, json, callback);\n    }\n}\n\nsuite(\"apiBase\", () => {\n\n    let api: Api;\n\n    beforeEach(() => {\n        api = new Api();\n    });\n\n    test(\"should execute callback\", () => {\n\n        api.complete(null, null, false, (_error, _data) => {\n            assert(true);\n        });\n    });\n\n    test(\"should return body\", () => {\n\n        const body = \"body\";\n        const text = \"text\";\n\n        api.complete(null, {\n            body: body,\n            text: text\n        }, false, (_error, data) => {\n            assert.strictEqual(data, body);\n        });\n    });\n\n    test(\"should return text\", () => {\n\n        const text = \"text\";\n\n        api.complete(null, {\n            text: text\n        }, false, (_error, data) => {\n            assert.strictEqual(data, text);\n        });\n    });\n\n    test(\"should make date\", () => {\n\n        const date = \"1977-01-12T14:49:20.869Z\";\n\n        api.complete(null, {\n            body: {\n                birthday: date\n            }\n        }, true, (_error, data) => {\n            assert.typeOf(data.birthday, \"date\");\n            assert.strictEqual(data.birthday.getDate(), 12);\n            assert.strictEqual(data.birthday.getMonth(), 0);\n            assert.strictEqual(data.birthday.getFullYear(), 1977);\n        });\n    });\n\n    test(\"should not make date with json\", () => {\n\n        const date = \"nineteen-seventy-seven\";\n\n        api.complete(null, {\n            body: {\n                birthday: date\n            }\n        }, true, (_error, data) => {\n            assert.typeOf(data.birthday, \"string\");\n            assert.strictEqual(data.birthday, date);\n        });\n    });\n\n    test(\"should not make date without json\", () => {\n\n        const date = \"nineteen-seventy-seven\";\n\n        api.complete(null, {\n            body: {\n                birthday: date\n            }\n        }, false, (_error, data) => {\n            assert.typeOf(data.birthday, \"string\");\n            assert.notEqual(data, date);\n        });\n    });\n\n    test(\"should raise error\", () => {\n\n        const message = \"abort!\";\n\n        api.complete({\n            message: message\n        }, null, false, error => {\n            assert.strictEqual(error.message, message);\n        });\n    });\n\n    test(\"should have error details\", () => {\n\n        const message = \"abort!\";\n        const details = \"more details\";\n\n        api.complete({\n            message: message\n        }, {\n            body: details\n        }, false, error => {\n            assert.strictEqual(error.message, message);\n            assert.strictEqual(error.details, details);\n        });\n    });\n\n    test(\"should raise error from response\", () => {\n\n        const message = \"abort!\";\n        const responseError = \"error!\";\n        const details = \"more details\";\n\n        api.complete({\n            message: message\n        }, {\n            body: details,\n            error: {\n                message: responseError\n            }\n        }, false, error => {\n            assert.strictEqual(error.message, responseError);\n            assert.strictEqual(error.details, details);\n        });\n    });\n\n    test(\"should raise error from body\", () => {\n\n        const message = \"abort!\";\n        const bodyError = \"error!\";\n\n        api.complete({\n            message: message\n        }, {\n            body: {\n                message: bodyError\n            }\n        }, false, error => {\n            assert.strictEqual(error.message, bodyError);\n        });\n    });\n\n    test(\"should raise error from body message\", () => {\n\n        const message = \"abort!\";\n        const bodyError = \"error!\";\n\n        api.complete({\n            message: message\n        }, {\n            body: {\n                message: {\n                    error: bodyError\n                }\n            }\n        }, false, error => {\n            assert.strictEqual(error.message, bodyError);\n        });\n    });\n});\n"]}