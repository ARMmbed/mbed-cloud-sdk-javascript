{"version":3,"sources":["../../src/_tests/subscribe.ts"],"names":["mockNotify","subscribe","id","event","forEach","item","notifyDeviceEvents","Object","defineProperty","exports","value","_a","intern","getInterface","suite","test","assert","getPlugin","subscribe_1","require","Subscribe","items","deviceStateChanges","addListener","res","push","lengthOf"],"mappings":"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","file":"subscribe.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { Subscribe } from \"../subscribe/subscribe\";\nimport { DeviceEvent } from \"../connect/types\";\nimport { Resource } from \"../connect/models/resource\";\n\nsuite(\"testSubscribe\", () => {\n\n    test(\"allEvents\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<DeviceEvent<Resource>> = [];\n        const observer = subscribe.deviceStateChanges();\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 36);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 72);\n    });\n\n    test(\"oneDeviceId\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<DeviceEvent<Resource>> = [];\n        const observer = subscribe.deviceStateChanges({ id: \"1\" });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 8);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 16);\n    });\n\n    test(\"multipleDeviceId\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<DeviceEvent<Resource>> = [];\n        const observer = subscribe.deviceStateChanges({ id: [ \"1\", \"2\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 16);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 32);\n    });\n\n    test(\"oneState\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<DeviceEvent<Resource>> = [];\n        const observer = subscribe.deviceStateChanges({ event: \"registration\" });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 9);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 18);\n    });\n\n    test(\"multipleStates\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<DeviceEvent<Resource>> = [];\n        const observer = subscribe.deviceStateChanges({ event: [ \"registration\", \"deregistration\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 18);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 36);\n    });\n\n    test(\"specific\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<DeviceEvent<Resource>> = [];\n        const observer = subscribe.deviceStateChanges({ id: \"1\", event: \"registration\" });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 2);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 4);\n    });\n\n    test(\"multipleSpecific\", () => {\n        const subscribe = new Subscribe();\n        const items: Array<DeviceEvent<Resource>> = [];\n        const observer = subscribe.deviceStateChanges({ id: [ \"1\", \"3\" ], event: [ \"registration\", \"deregistration\" ] });\n        observer.addListener(res => items.push(res));\n        mockNotify(subscribe);\n        assert.lengthOf(items, 8);\n        mockNotify(subscribe);\n        assert.lengthOf(items, 16);\n    });\n});\n\nexport function mockNotify(subscribe: Subscribe): void {\n    const regList: Array<DeviceEvent<Resource>> = [\n        { id: \"1\", event: \"registration\" },\n        { id: \"1\", event: \"registration\" },\n        { id: \"2\", event: \"registration\" },\n        { id: \"2\", event: \"registration\" },\n        { id: \"3\", event: \"registration\" },\n        { id: \"3\", event: \"registration\" },\n        { id: \"4\", event: \"registration\" },\n        { id: \"4\", event: \"registration\" },\n        { id: \"5\", event: \"registration\" },\n        { id: \"1\", event: \"reregistration\" },\n        { id: \"1\", event: \"reregistration\" },\n        { id: \"2\", event: \"reregistration\" },\n        { id: \"2\", event: \"reregistration\" },\n        { id: \"3\", event: \"reregistration\" },\n        { id: \"3\", event: \"reregistration\" },\n        { id: \"4\", event: \"reregistration\" },\n        { id: \"4\", event: \"reregistration\" },\n        { id: \"5\", event: \"reregistration\" },\n        { id: \"1\", event: \"deregistration\" },\n        { id: \"1\", event: \"deregistration\" },\n        { id: \"2\", event: \"deregistration\" },\n        { id: \"2\", event: \"deregistration\" },\n        { id: \"3\", event: \"deregistration\" },\n        { id: \"3\", event: \"deregistration\" },\n        { id: \"4\", event: \"deregistration\" },\n        { id: \"4\", event: \"deregistration\" },\n        { id: \"5\", event: \"deregistration\" },\n        { id: \"1\", event: \"expired\" },\n        { id: \"1\", event: \"expired\" },\n        { id: \"2\", event: \"expired\" },\n        { id: \"2\", event: \"expired\" },\n        { id: \"3\", event: \"expired\" },\n        { id: \"3\", event: \"expired\" },\n        { id: \"4\", event: \"expired\" },\n        { id: \"4\", event: \"expired\" },\n        { id: \"5\", event: \"expired\" },\n    ];\n\n    regList.forEach(item => subscribe.notifyDeviceEvents(item));\n}\n"],"sourceRoot":"../../lib"}