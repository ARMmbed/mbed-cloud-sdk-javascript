{"version":3,"sources":["../../src/_tests/functions.ts"],"names":["Object","defineProperty","exports","value","_a","intern","getInterface","suite","test","assert","getPlugin","functions_1","require","match","matchWithWildcard","isTrue","undefined","wildcard","isFalse","payload","decodeBase64","isString","isNumber","deepEqual","/0","date","Date","string","dateToBillingMonth","strictEqual"],"mappings":"udAAA;;;;;;;;;;;;;;;;AAiBMA,OAAAC,eAAAC,EAAA,cAAEC,OAAK,GACL,IAAAC,GAAAC,OAAAC,aAAA,OAAAC,EAAoCH,EAAAG,MAAAC,EAAAJ,EAAAI,KAC5CC,EAAAJ,OAAAK,UAAA,QAAAD,OAEAE,EAAMC,EAAiB,yBAEnB,gBAAK,aACD,qBAAsB,WACtB,GACAC,GAAOF,EAAcG,kBADP,KACO,QACtBL,GAAAM,OAAAF,OAGC,0BAA2B,WAC3B,GACAA,GAAOF,EAAcG,sBADPE,GACO,QACtBP,GAAAM,OAAAF,OAGC,sBAAoB,WACpB,GACAA,GAAOF,EAAcG,kBADP,GACO,QACtBL,GAAAM,OAAAF,OAGC,wBAAyB,WACzB,GACAA,GAAOF,EAAcG,kBADP,QACO,QACtBL,GAAAM,OAAAF,OAGC,iBAAe,WACf,GAAII,GAAQ,MACZJ,EAAOF,EAAcG,kBAAAG,EAAA,QAErBR,GAAAM,OAAWF,GACXI,EAAQ,QACRJ,EAAOF,EAAaG,kBAACG,EAAA,SAErBR,EAAAM,OAAWF,GACXI,EAAQ,QACRJ,EAAOF,EAAaG,kBAAEG,EAAA,SAEtBR,EAAAS,QAAeL,GACfI,EAAQ,IACRJ,EAAOF,EAAaG,kBAACG,EAAA,SACtBR,EAAAM,OAAAF,SAMH,sBAAe,aACX,SAAa,WACb,GAAAM,GAAOR,EAAkBS,aAAA,WAAA,aAC1BX,GAAAY,SAAAF,OAGC,SAAa,WACb,GAAAA,GAAOR,EAAkBS,aAAA,OAAA,aAC1BX,GAAAa,SAAAH,OAGC,MAAM,WACN,GAAAA,GAAOR,EAAmBS,aAAA,OAAA,SACtBG,UAAQJ,GACTK,KAAA,WAKP,mBAAK,aACD,mBAAsB,WACtB,GAAMC,GAAM,GAAGC,MAAA,KAAA,GACfC,EAAOhB,EAAYiB,mBAAmBH,EACvChB,GAAAoB,YAAA,UAAAF,OAGC,mBAAsB,WACtB,GAAMF,GAAM,GAAGC,MAAA,KAAA,IACfC,EAAOhB,EAAYiB,mBAAmBH,EACvChB,GAAAoB,YAAA,UAAAF","file":"functions.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\nimport { matchWithWildcard, decodeBase64, dateToBillingMonth } from \"../common/functions\";\n\nsuite(\"testFunctions\", () => {\n\n    test(\"nullWildcardString\", () => {\n        const wildcard = null;\n        const match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n    });\n\n    test(\"undefinedWildcardString\", () => {\n        const wildcard = undefined;\n        const match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n    });\n\n    test(\"emptyWildcardString\", () => {\n        const wildcard = \"\";\n        const match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n    });\n\n    test(\"correctWildcarsString\", () => {\n        const wildcard = \"3/0/0\";\n        const match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n    });\n\n    test(\"wildcardString\", () => {\n        let wildcard = \"3/*\";\n        let match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n\n        wildcard = \"3/0/*\";\n        match = matchWithWildcard(wildcard, \"3/0/0\");\n        assert.isTrue(match);\n\n        wildcard = \"3/0/*\";\n        match = matchWithWildcard(wildcard, \"3/1/0\");\n        assert.isFalse(match);\n\n        wildcard = \"*\";\n        match = matchWithWildcard(wildcard, \"3/1/0\");\n        assert.isTrue(match);\n    });\n\n});\n\nsuite(\"testPayloadDecoding\", () => {\n\n    test(\"string\", () => {\n        const payload = decodeBase64(\"dGVzdA==\", \"text/plain\");\n        assert.isString(payload);\n    });\n\n    test(\"number\", () => {\n        const payload = decodeBase64(\"NQ==\", \"text/plain\");\n        assert.isNumber(payload);\n    });\n\n    test(\"tlv\", () => {\n        const payload = decodeBase64(\"AAA=\", \"tlv\");\n        assert.deepEqual(payload, {\n            \"/0\": \"\"\n        });\n    });\n});\n\nsuite(\"testBillingMonth\", () => {\n    test(\"singleDigitMonth\", () => {\n        const date = new Date(2018, 4);\n        const string = dateToBillingMonth(date);\n        assert.strictEqual(\"2018-05\", string);\n    });\n\n    test(\"doubleDigitMonth\", () => {\n        const date = new Date(2018, 11);\n        const string = dateToBillingMonth(date);\n        assert.strictEqual(\"2018-12\", string);\n    });\n});\n"],"sourceRoot":"../../lib"}