{"version":3,"sources":["../../src/_tests/observers.ts"],"names":["Object","defineProperty","exports","value","_a","intern","getInterface","suite","test","assert","getPlugin","observer_1","require","observer","Observer","a","once","b","notify","notEqual","then","res","strictEqual","c","d","e","x","addListener","f","g","sameOrderedMembers","listeners","removeListener","index","items","getNotificationQueue","forEach","item","push","Array","apply","length","map","Function","call","Number","addLocalFilter","num"],"mappings":"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","file":"observers.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { Observer } from \"../subscribe/observers/observer\";\n\nsuite(\"testObserver\", () => {\n\n    test(\"subscribeFirst\", () => {\n        const observer = new Observer<string>();\n        const a = observer.once();\n        const b = observer.once();\n        observer.notify(\"a\");\n        observer.notify(\"b\");\n        observer.notify(\"c\");\n        assert.notEqual(a, b);\n        a.then(res => assert.strictEqual(res, \"a\"));\n        b.then(res => assert.strictEqual(res, \"b\"));\n    });\n\n    test(\"subscribeFirstCallback\", () => {\n        const observer = new Observer<string>();\n        observer.once(res => assert.strictEqual(res, \"a\"));\n        observer.once(res => assert.strictEqual(res, \"b\"));\n        observer.notify(\"a\");\n        observer.notify(\"b\");\n        observer.notify(\"c\");\n    });\n\n    test(\"notifyFirst\", () => {\n        const observer = new Observer<string>();\n        observer.notify(\"a\");\n        observer.notify(\"b\");\n        observer.notify(\"c\");\n        const a = observer.once();\n        const b = observer.once();\n        assert.notEqual(a, b);\n        a.then(res => assert.strictEqual(res, \"a\"));\n        b.then(res => assert.strictEqual(res, \"b\"));\n    });\n\n    test(\"notifyFirstCallback\", () => {\n        const observer = new Observer<string>();\n        observer.notify(\"a\");\n        observer.notify(\"b\");\n        observer.notify(\"c\");\n        observer.once(res => assert.strictEqual(res, \"a\"));\n        observer.once(res => assert.strictEqual(res, \"b\"));\n    });\n\n    test(\"interleaved\", () => {\n        const observer = new Observer<string>();\n        observer.notify(\"a\");\n        const a = observer.once();\n        const b = observer.once();\n        const c = observer.once();\n        observer.notify(\"b\");\n        const d = observer.once();\n        observer.notify(\"c\");\n        observer.notify(\"d\");\n        observer.notify(\"e\");\n        const e = observer.once();\n        a.then(res => assert.strictEqual(res, \"a\"));\n        b.then(res => assert.strictEqual(res, \"b\"));\n        c.then(res => assert.strictEqual(res, \"c\"));\n        d.then(res => assert.strictEqual(res, \"d\"));\n        e.then(res => assert.strictEqual(res, \"e\"));\n    });\n\n    test(\"interleavedCallback\", () => {\n        const observer = new Observer<string>();\n        observer.notify(\"a\");\n        observer.once(res => assert.strictEqual(res, \"a\"));\n        observer.once(res => assert.strictEqual(res, \"b\"));\n        observer.once(res => assert.strictEqual(res, \"c\"));\n        observer.notify(\"b\");\n        observer.once(res => assert.strictEqual(res, \"d\"));\n        observer.notify(\"c\");\n        observer.notify(\"d\");\n        observer.notify(\"e\");\n        observer.once(res => assert.strictEqual(res, \"e\"));\n    });\n\n    test(\"callback\", () => {\n        const observer = new Observer<number>();\n        let x = 1;\n        observer.addListener(res => x += res);\n        observer.addListener(res => x += (res * 2));\n        observer.notify(3);\n        assert.strictEqual(x, 10);\n    });\n\n    test(\"addRemoveCallbacks\", () => {\n        const observer = new Observer<string>();\n        // tslint:disable-next-line:no-empty\n        const f = () => { };\n        // tslint:disable-next-line:no-empty\n        const g = () => { };\n        observer.addListener(f);\n        observer.addListener(g);\n        assert.sameOrderedMembers(observer.listeners(), [ f, g ]);\n        observer.removeListener(f);\n        assert.sameOrderedMembers(observer.listeners(), [ g ]);\n        observer.removeListener(g);\n        assert.sameOrderedMembers(observer.listeners(), []);\n    });\n\n    test(\"collection\", () => {\n        const observer = new Observer<number>();\n        for (let index = 0; index < 10; index++) {\n            observer.notify(index);\n        }\n        const items = [];\n        observer.getNotificationQueue().forEach(item => items.push(item));\n        assert.sameOrderedMembers(items, Array.apply(null, { length: 10 }).map(Function.call, Number));\n    });\n\n    test(\"localFilter\", () => {\n        let x = 0;\n        const observer = new Observer<number>()\n            .addLocalFilter(num => num >= 5)\n            .addListener(res => x += res);\n        observer.notify(4);\n        observer.notify(5);\n        assert.strictEqual(x, 5);\n    });\n});\n"],"sourceRoot":"../../lib"}