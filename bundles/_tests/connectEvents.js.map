{"version":3,"sources":["_tests/connectEvents.ts"],"names":["apiBase_1","require","sdkError_1","DefaultApi","_super","apply","this","arguments","prototype","deviceCreate","device","callback","undefined","SDKError","headerParams","queryParameters","formParams","contentTypes","acceptTypes","request","url","method","headers","query","useFormData","body","deviceDestroy","id","replace","String","deviceEventList","limit","order","after","filter","include","deviceEventRetrieve","deviceEventId","deviceList"],"mappings":"ycAAA,oYAiBM,IAAAA,GAAAC,EAAA,qBACEC,EAAAD,EAAA,sBAQJE,EAAW,SAAAC,WAEHD,WACD,QAAAC,GAAAA,EAAAC,MAAAC,KAAAC,YAAAD,cAFGH,EAAIC,KAWHI,UAAUC,aAAC,SAAAC,EAAAC,GAElB,GAAO,OAAHD,OAAcE,KAAXF,EAIH,YAHAC,GACDA,EAAA,GAAAT,GAAAW,SAAA,yCAIH,IAAIC,MACAC,KAGAC,KAGAC,KAEDC,GACJ,mBAIC,OAASZ,MAAGa,SAERC,IAAG,eACHC,OAAO,OACRC,QAAAR,EACCS,MAAGR,EACHC,WAAOA,EACPQ,aAlBG,EAmBJP,aAAAA,EACCC,YAAGA,EACHO,KAAMf,GACPC,MAMAH,UAAAkB,cAAA,SAAAC,EAAAhB,MAGC,OAAAgB,OAAuBf,KAARe,EAMb,YALHhB,GACJA,EAAA,GAAAT,GAAAW,SAAA,yCAOKC,MACDC,KAGAC,KAECC,KAEDC,GACC,mBAEJ,OAAGZ,MAAAa,SACCC,IAAG,oBAAAQ,QAAW,OAAeC,OAAAF,IAC7BN,OAAO,SACRC,QAAAR,EAECS,MAAOR,EACPC,WAAAA,EACDQ,aAfe,EAgBnBP,aAAAA,EAEEC,YAAAA,GAEDP,MAWOH,UAAAsB,gBAAW,SAAAC,EAAoBC,EAAEC,EAAEC,EAAAC,EAAAxB,MACtCG,MACAC,SACDH,KAAAmB,IACChB,EAAG,MAAWgB,OAEfnB,KAAAoB,IAECjB,EAAO,MAAAiB,OAERpB,KAAAqB,IACJlB,EAAA,MAAAkB,OAIiBrB,KAAVsB,IAEFnB,EAAG,OAAWmB,OAEftB,KAAAuB,IACCpB,EAAG,QAAWoB,EAGlB,IACInB,MAEAC,KAEDC,GACC,0BAEGZ,MAACa,SACLC,IAAA,qBAECC,OAAO,MACPC,QAAAR,EACDS,MAAAR,EACJC,WAAAA,EAEEQ,aAhBM,EAkBDP,aAAaA,EACfC,YAAAA,SAQKV,UAAO4B,oBAAY,SAAmBC,EAAA1B,MAG7B,OAAd0B,OAAczB,KAAAyB,EAIf,YAHA1B,GACIA,EAAA,GAAAT,GAAWW,SAAA,oDAIdC,MACDC,KAGAC,KAECC,KAGAC,GACL,mBAGD,OAAAZ,MAAAa,SAEkBC,IAAA,uCAAAQ,QAAA,oBAAAC,OAAAQ,IAEpBhB,OAAgB,MACRC,QAAOR,EAAqBS,MAAOR,EACvCC,WAAWA,EACdQ,aAjBqB,EAmBtBP,aAAWA,EACJC,YAAOA,SAcNV,UAAO8B,WAAmB,SAASP,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxB,MACnCG,MACFC,SAEFH,KAAAmB,IACIhB,EAAgB,MAAUgB,OAG1BnB,KAAAoB,MACgB,MAAAA,OAEZpB,WACD,MAAAqB,OAERrB,KAAAsB,IAEEnB,EAA2B,OAAAmB,OAGZtB,KAAVuB,IACApB,EAAyB,QAAAoB,MAK3BnB,MAGJC,KAGIC,GACA,gCAEIC,aACH,eACFE,OAAA,MACJC,QAAAR,EACJS,MAAAR,4BAdgB","file":"connectEvents.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test, beforeEach } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { ConnectApi } from \"../connect/connectApi\";\n\nsuite(\"connectEvents\", () => {\n\n    let api: ConnectApi;\n\n    beforeEach(() => {\n        api = new ConnectApi({\n            apiKey: \"key\"\n        });\n    });\n\n    test(\"should emit notification\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            notifications: [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            registrations: [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit re-registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            \"reg-updates\": [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit de-registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, id => {\n            assert.strictEqual(id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            \"de-registrations\": [ \"device-id\" ]\n        });\n    });\n\n    test(\"should emit expired\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, id => {\n            assert.strictEqual(id, \"device-id\");\n            dfd.resolve();\n        });\n\n        api.notify({\n            \"registrations-expired\": [ \"device-id\" ]\n        });\n    });\n\n    test(\"should emit multiple\", ctx => {\n\n        const notifications = {\n            \"notifications\": [ \"1\", \"2\" ],\n            \"registrations\": [ \"1\", \"2\" ],\n            \"reg-updates\": [ \"1\", \"2\" ],\n            \"de-registrations\": [ \"1\", \"2\" ],\n            \"registrations-expired\": [ \"1\", \"2\" ]\n        };\n\n        const notificationCount = Object.keys(notifications).length * 2;\n        const dfd = ctx.async(1000, notificationCount);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            dfd.resolve();\n        });\n\n        api.notify(notifications);\n    });\n});\n\nsuite(\"notifications\", () => {\n\n    let api: ConnectApi;\n\n    function encode(payload) {\n        if (typeof btoa === \"function\") return btoa(payload);\n        return new Buffer(payload).toString(\"base64\");\n    }\n\n    beforeEach(() => {\n        api = new ConnectApi({\n            apiKey: \"key\"\n        });\n    });\n\n    test(\"should notify\", ctx => {\n\n        const dfd = ctx.async(1000);\n        const deviceId = \"device-id\";\n        const devicePath = \"test\";\n        const payload = \"test-payload\";\n        const notifyFns = {};\n\n        notifyFns[`${deviceId}${devicePath}`] = value => {\n            assert.strictEqual(value, payload);\n            dfd.resolve();\n        };\n\n        // tslint:disable-next-line:no-string-literal\n        api[\"_notifyFns\"] = notifyFns;\n\n        api.notify({\n            notifications: [ {\n                ep: deviceId,\n                path: devicePath,\n                payload: encode(payload)\n            } ]\n        });\n    });\n\n    test(\"should respond to async\", ctx => {\n\n        const dfd = ctx.async(1000);\n        const asyncId = \"async-id\";\n        const payload = \"test-payload\";\n        const asyncFns = {};\n\n        asyncFns[asyncId] = (_error, value) => {\n            assert.strictEqual(value, payload);\n            dfd.resolve();\n        };\n\n        // tslint:disable-next-line:no-string-literal\n        api[\"_asyncFns\"] = asyncFns;\n\n        api.notify({\n            \"async-responses\": [ {\n                id: asyncId,\n                payload: encode(payload)\n            } ]\n        });\n    });\n});\n"]}