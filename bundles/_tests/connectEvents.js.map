{"version":3,"sources":["../../src/_tests/connectEvents.ts"],"names":["apiBase_1","require","sdkError_1","DefaultApi","_super","apply","this","arguments","prototype","deviceCreate","device","callback","requestOptions","undefined","SDKError","headerParams","queryParameters","formParams","contentTypes","acceptTypes","request","url","method","headers","query","useFormData","body","deviceDestroy","id","replace","String","deviceEventList","limit","order","after","filter","include","deviceEventRetrieve","deviceEventId","deviceList"],"mappings":"udAAA,oYAiBM,IAAAA,GAAAC,EAAA,qBACEC,EAAAD,EAAA,sBAQJE,EAAW,SAAAC,WAEHD,WACD,QAAAC,GAAAA,EAAAC,MAAAC,KAAAC,YAAAD,cAFGH,EAAIC,KAYPI,UAAAC,aAAA,SAAAC,EAAAC,EAAAC,MAEQ,OAAPF,OAAcG,KAAAH,EAIf,YAHAC,GACIA,EAAA,GAAAT,GAAWY,SAAA,6CAIdC,MACDC,KAGAC,KAGCC,KAELC,GAEE,mBAID,OAAOb,MAAAc,SACHC,IAAA,eACDC,OAAA,OACCC,QAAGR,EACHS,MAAOR,EACPC,WAAWA,EACZQ,aAlBe,EAmBdP,aAAGA,EACHC,YAAaA,EACdP,eAAAA,EACCc,KAAGhB,SASJF,UAAAmB,cAAA,SAAAC,EAAAjB,EAAAC,GAGH,GAAC,OAAAgB,OAAAf,KAAAe,EAME,YAJMjB,GAEFA,EAAA,GAAAT,GAAWY,SAAA,yCAIdC,MACDC,KAGCC,KAEAC,KAEDC,GACC,mBAEJ,OAAGb,MAAAc,SAECC,IAAA,oBAAOQ,QAAA,OAAAC,OAAAF,IACPN,OAAA,SACDC,QAAAR,EACJS,MAAAR,EAEEC,WAAAA,EAEKQ,aAjBK,EAmBPP,aAAGA,EACHC,YAAaA,EACdP,eAAAA,GACAD,MAWCH,UAAauB,gBAAC,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzB,EAAAC,GAClB,GAAGG,MAECC,SACAH,KAAAmB,IACDhB,EAAA,MAAAgB,OAGFnB,KAAAoB,IAEKjB,EAAsB,MAAAiB,OAGjBpB,KAAPqB,IACDlB,EAAA,MAAAkB,OAEQrB,KAAPsB,IACDnB,EAAA,OAAAmB,OAEatB,KAAZuB,IACDpB,EAAA,QAAAoB,EAGH,IACInB,MAEAC,KAGAC,GACA,mBAEL,OAAAb,MAAAc,SAEEC,IAAA,qBAEKC,OAAA,MACFC,QAAAR,EACAS,MAAAR,EACAC,WAAAA,EACAQ,aAjBD,EAkBCP,aAAAA,EACFC,YAAAA,EAEIP,eAAAA,GACND,MAQOH,UAAA6B,oBAAW,SAAAC,EAAsB3B,EAAAC,GAExC,GAAG,OAAA0B,OAAAzB,KAAAyB,EAIC,YAHG3B,GACCA,EAAS,GAACT,GAAAY,SAAA,gDAIlB,IAAGC,MAECC,KAINC,KAIFC,KACoCC,GAChC,mBAGJ,OAAWb,MAAAc,SACJC,IAAG,uCAAeQ,QAAA,oBAAAC,OAAAQ,IACjBhB,OAAQ,MACTC,QAAAR,EACJS,MAAAR,EAEEC,WAAeA,EAEVQ,aAnBX,EAoBWP,aAAWA,EACXC,YAAaA,EACbP,eAAUA,GAChBD,gBAcQ4B,WAAgB,SAAQP,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzB,EAAAC,YAE7BI,SACJH,KAAAmB,IAEEhB,EAAyB,MAAEgB,OAGZnB,KAAVoB,IACAjB,EAAU,MAAeiB,OAGtBpB,KAATqB,IACIlB,EAAmB,MAAOkB,OAE5BrB,KAAAsB,IAEFnB,EAAA,OAAAmB,OAGWtB,KAAPuB,IACApB,EAAqB,QAAAoB,MAItBnB,MAERC,6HAHY","file":"connectEvents.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nconst { suite, test, beforeEach } = intern.getInterface(\"tdd\");\nconst { assert } = intern.getPlugin(\"chai\");\n\nimport { ConnectApi } from \"../connect/connectApi\";\n\nsuite(\"connectEvents\", () => {\n\n    let api: ConnectApi;\n\n    beforeEach(() => {\n        api = new ConnectApi({\n            apiKey: \"key\"\n        });\n    });\n\n    test(\"should emit notification\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            notifications: [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            registrations: [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit re-registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, device => {\n            assert.strictEqual(device.id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            \"reg-updates\": [ { ep: \"device-id\" } ]\n        });\n    });\n\n    test(\"should emit de-registration\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, id => {\n            assert.strictEqual(id, \"device-id\");\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            assert(false);\n        });\n\n        api.notify({\n            \"de-registrations\": [ \"device-id\" ]\n        });\n    });\n\n    test(\"should emit expired\", ctx => {\n\n        const dfd = ctx.async(1000);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            assert(false);\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, id => {\n            assert.strictEqual(id, \"device-id\");\n            dfd.resolve();\n        });\n\n        api.notify({\n            \"registrations-expired\": [ \"device-id\" ]\n        });\n    });\n\n    test(\"should emit multiple\", ctx => {\n\n        const notifications = {\n            \"notifications\": [ \"1\", \"2\" ],\n            \"registrations\": [ \"1\", \"2\" ],\n            \"reg-updates\": [ \"1\", \"2\" ],\n            \"de-registrations\": [ \"1\", \"2\" ],\n            \"registrations-expired\": [ \"1\", \"2\" ]\n        };\n\n        const notificationCount = Object.keys(notifications).length * 2;\n        const dfd = ctx.async(1000, notificationCount);\n\n        api.on(ConnectApi.EVENT_NOTIFICATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_REREGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_DEREGISTRATION, () => {\n            dfd.resolve();\n        });\n        api.on(ConnectApi.EVENT_EXPIRED, () => {\n            dfd.resolve();\n        });\n\n        api.notify(notifications);\n    });\n});\n\nsuite(\"notifications\", () => {\n\n    let api: ConnectApi;\n\n    function encode(payload) {\n        if (typeof btoa === \"function\") return btoa(payload);\n        return new Buffer(payload).toString(\"base64\");\n    }\n\n    beforeEach(() => {\n        api = new ConnectApi({\n            apiKey: \"key\"\n        });\n    });\n\n    test(\"should notify\", ctx => {\n\n        const dfd = ctx.async(1000);\n        const deviceId = \"device-id\";\n        const devicePath = \"test\";\n        const payload = \"test-payload\";\n        const notifyFns = {};\n\n        notifyFns[`${deviceId}${devicePath}`] = value => {\n            assert.strictEqual(value, payload);\n            dfd.resolve();\n        };\n\n        // tslint:disable-next-line:no-string-literal\n        api[\"_notifyFns\"] = notifyFns;\n\n        api.notify({\n            notifications: [ {\n                ep: deviceId,\n                path: devicePath,\n                payload: encode(payload)\n            } ]\n        });\n    });\n\n    test(\"should respond to async\", ctx => {\n\n        const dfd = ctx.async(1000);\n        const asyncId = \"async-id\";\n        const payload = \"test-payload\";\n        const asyncFns = {};\n\n        asyncFns[asyncId] = (_error, value) => {\n            assert.strictEqual(value, payload);\n            dfd.resolve();\n        };\n\n        // tslint:disable-next-line:no-string-literal\n        api[\"_asyncFns\"] = asyncFns;\n\n        api.notify({\n            \"async-responses\": [ {\n                id: asyncId,\n                payload: encode(payload)\n            } ]\n        });\n    });\n});\n"],"sourceRoot":"../../lib"}