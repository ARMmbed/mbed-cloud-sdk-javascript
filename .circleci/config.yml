version: 2

references:
  main_branches_only: &main_branches_only
    filters:
      branches:
        only:
        - master
        - beta
  ignore_main_branches: &ignore_main_branches
    filters:
      branches:
        ignore:
        - master
        - beta
        - /dependabot.*/
  contract_repo_branch: &contract_repo_branch
    filters:
      branches:
        only:
        - /api-contract.*/

jobs:
  build:
    working_directory: ~/build
    environment:
      PIPENV_VENV_IN_PROJECT: TRUE
    docker:
      - image: circleci/python:3.7.0-stretch-node-browsers
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - restore_cache:
          key: v1-package-cache-{{ checksum "package.json" }}
      - run:
          name: Install Python Libraries
          # pipenv is currently poorly behaved when installing from remote subdirectory
          # so we simply use it as a proxy for the virtualenv
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: Install SDK dependencies
          command: npm install
      - save_cache:
          key: v1-package-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
            - .venv
      - run:
          name: Set version
          # set the version (dev)
          command: pipenv run auto_version --config=scripts/auto_version.toml --news
      - run:
          name: Build the SDK
          command: npm run build
      - store_artifacts:
          path: package.json
      - persist_to_workspace:
          root: ./
          paths:
            - bundles
            - lib
            - lib-es6
            - types
            - package.json
  tpip:
    working_directory: ~/build
    docker:
      - image: circleci/python:3.7.0-stretch-node-browsers
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: v0-package-cache-{{ checksum "package.json" }}
      - run:
          name: Install SDK dependencies
          command: npm install
      - run:
          name: Build the Third Party Intellectual Property file
          command: npm run tpip
      - store_artifacts:
          path: tpip.csv
  docs:
    working_directory: ~/build
    docker:
      - image: circleci/python:3.7.0-stretch-node-browsers
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: v0-package-cache-{{ checksum "package.json" }}
      - run:
          name: Install SDK dependencies
          command: npm install
      - run:
          name: Generate documentation
          command: npm run docs
      - store_artifacts:
          path: docs/docs
      - persist_to_workspace:
          root: ./
          paths:
            - docs/docs
  upload_docs:
    working_directory: ~/build
    docker:
      - image: circleci/python:3.7.0-stretch-node-browsers
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Installing aws cli
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install awscli
      - run:
          command: |
                  . venv/bin/activate
                  aws s3 sync --delete --cache-control max-age=3600 ~/build/docs/docs s3://mbed-cloud-sdk-javascript/${CIRCLE_BRANCH}/docs
          name: upload docs to s3
  news:
    working_directory: ~/build
    docker:
      - image: circleci/python:3.7.0-stretch-node-browsers
    steps:
      - checkout
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          # pipenv is currently poorly behaved when installing from remote subdirectory
          # so we simply use it as a proxy for the virtualenv
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: Set version
          # set the version as if this was a production release
          command: pipenv run auto_version --config=scripts/auto_version.toml --news --release
      - run:
          name: Generate changelog
          command: pipenv run towncrier --yes --name="" --version=$(cd ../../ && pipenv run auto_version --config=scripts/auto_version.toml --release)
          working_directory: docs/news
      - store_artifacts:
          path: CHANGELOG.md
  integration_test:
    working_directory: ~/build
    environment:
      TESTRUNNER_DOCKER_IMAGE: 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner
      PIPENV_VENV_IN_PROJECT: TRUE
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          key: v5-package-cache-{{ checksum "package.json" }}
      - run:
          name: Install python3
          command: sudo bash -c "yes | add-apt-repository ppa:jonathonf/python-3.6 && apt-get update && apt-get install -y python3.6"
      - run:
          name: Install node and python
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y nodejs openssl python3.6-dev libffi-dev libssl-dev
      - run:
          name: Update Python Installers
          command: sudo pip install -U setuptools pip pipenv
      - run:
          name: Install extra dependencies (python)
          command: pipenv install awscli --python=python3.6
      - run:
          name: Install SDK dependencies
          command: npm install
      - run:
          name: Install extra dependencies (node)
          command: npm install -g codecov ansi-html-stream --unsafe-perm
      - run:
          name: Configure Docker to use AWS
          command: |
            source $(pipenv --venv)/bin/activate
            login="$(aws ecr get-login --no-include-email)"
            ${login}
      - run:
          name: Fetch the test runner
          command: (docker pull 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:${CIRCLE_BRANCH}
              && docker tag 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:${CIRCLE_BRANCH}
              104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:latest)
              || (docker pull 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
              && docker tag 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
              104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:latest)
      - run:
          name: Run the tests
          command: set -o pipefail && bash run.sh 2>&1 | tee /dev/tty | ansi-html >> ~/build/integration.html
          working_directory: test/integration
      - run:
          name: Run any post-test result aggregators
          when: always
          command: |
            cp -r coverage/* reports
            cp integration.html reports
      - run:
          name: Upload to codecov
          command: codecov reports/lcov.info
      - store_artifacts:
          path: reports
      - persist_to_workspace:
          root: ./
          paths:
            - reports
  unit_test:
    working_directory: ~/build
    docker:
      - image: circleci/python:3.7.0-stretch-node-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: v0-package-cache-{{ checksum "package.json" }}
      - run:
          name: Install SDK dependencies
          command: npm install
      - run:
          name: Install extra dependencies (node)
          command: sudo npm install -g codecov ansi-html-stream --unsafe-perm
      - run:
          name: Run browser tests
          command: npm run test:browser
      - run:
          name: Run the tests
          command: set -o pipefail && npm run test:node 2>&1 | tee /dev/tty | grep -v '^Tunnel d' | ansi-html >> ~/build/unit_tests.html
      - store_artifacts:
          path: unit_tests.html
      - persist_to_workspace:
          root: ./
          paths:
            - unit_tests.html
            - coverage
  beta_release:
    working_directory: ~/build
    environment:
      PIPENV_VENV_IN_PROJECT: TRUE
    docker:
      - image: circleci/python:3.7.0-stretch-node-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          # pipenv is currently poorly behaved when installing from remote subdirectory
          # so we simply use it as a proxy for the virtualenv
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: Set version
          # set the version as if this was a production release
          command: pipenv run auto_version --config=scripts/auto_version_beta.toml
      - run:
          name: Generate changelog
          command: pipenv run towncrier --yes --name="" --version=$(cd ../../ && pipenv run auto_version --config=scripts/auto_version_beta.toml)
          working_directory: docs/news
      - run:
          name: Tag and Release
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            pipenv run python scripts/tag_and_release.py beta
  release:
    working_directory: ~/build
    environment:
      PIPENV_VENV_IN_PROJECT: TRUE
    docker:
      - image: circleci/python:3.7.0-stretch-node-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          # pipenv is currently poorly behaved when installing from remote subdirectory
          # so we simply use it as a proxy for the virtualenv
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: Set version
          # set the version as if this was a production release
          command: pipenv run auto_version --config=scripts/auto_version.toml --release
      - run:
          name: Generate changelog
          command: pipenv run towncrier --yes --name="" --version=$(cd ../../ && pipenv run auto_version --config=scripts/auto_version.toml --release)
          working_directory: docs/news
      - run:
          name: Tag and Release
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            pipenv run python scripts/tag_and_release.py
  build_documentation:
    docker:
      - image: circleci/node:jessie-browsers
    steps:
      - run:
          name: Trigger documentation build
          command: |
              curl -X POST --header "Content-Type: application/json" \
               -d '{"branch":"master"}' \
               https://circleci.com/api/v1.1/project/github/${ORGANISATION}/${DOCUMENTATION_PROJECT}/build?circle-token=${CIRCLE_TOKEN}
  build_sync:
    docker:
      - image: circleci/node:jessie-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: sync to build branch
          command: |
              git add --force lib lib-es6 bundles types package.json
              git stash save
              git checkout build/${CIRCLE_BRANCH}
              git merge ${CIRCLE_BRANCH} --no-commit
              git checkout stash -- .
              git commit --allow-empty --message "Sync Build [skip ci]"
              git push -q https://${GITHUB_TOKEN}@github.com/ARMmbed/${CIRCLE_PROJECT_REPONAME}.git build/${CIRCLE_BRANCH}
  create_build_branch:
    docker:
      - image: circleci/node:jessie-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: sync to build branch if exists or create new one
          command: |
              git add --force bundles lib lib-es6 types package.json
              git stash save
              git checkout -B build/${CIRCLE_BRANCH}
              git merge ${CIRCLE_BRANCH} --no-commit
              git checkout stash -- .
              git commit --allow-empty --message "Sync Build [skip ci]"
              git push -f -q https://${GITHUB_TOKEN}@github.com/ARMmbed/${CIRCLE_PROJECT_REPONAME}.git build/${CIRCLE_BRANCH}
  commit_back_generation:
    docker:
      - image: circleci/node:jessie-browsers
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run generator self tests
          command: npm run test:generator
      - run:
          name: Run generator
          command: npm run generate
      - run:
          name: Build
          command: npm run build
      - run:
          name: Test
          command: npm test
      - run:
          name: commit changes
          command: |
              git add src/foundation
              git commit --message "New Foundation Interface changes" || true
              git push -f -q https://${GITHUB_TOKEN}@github.com/ARMmbed/${CIRCLE_PROJECT_REPONAME}.git ${CIRCLE_BRANCH}

workflows:
  version: 2
  generation_workflow:
    jobs:
      - commit_back_generation:
          <<: *contract_repo_branch
  javascript_workflow:
    jobs:
      - build
      - tpip
      - news
      - docs
      - upload_docs:
          <<: *main_branches_only
          requires:
            - docs
      - build_documentation:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - beta
      - create_build_branch_gate:
          <<: *ignore_main_branches
          type: approval
          requires:
            - build
      - create_build_branch:
          <<: *ignore_main_branches
          requires:
            - create_build_branch_gate
      - unit_test:
          requires:
            - build
      - integration_test:
          requires:
            - unit_test
      - build_sync:
          <<: *main_branches_only
          requires:
            - unit_test
            - integration_test
      - beta_release_gate:
          type: approval
          filters:
            branches:
              only: beta
          requires:
            - integration_test
            - unit_test
      - beta_release:
          requires:
            - beta_release_gate
      - release_gate:
          type: approval
          filters:
            branches:
              only: master
          requires:
            - integration_test
            - unit_test
      - release:
          requires:
            - release_gate
