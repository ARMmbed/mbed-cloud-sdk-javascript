/**
 * List <%= method.returns %>s
 * @param options filter options
 */
public <%= method.methodName %>(options?: ListOptions): Paginator<<%= method.returns %>, ListOptions> {
const pageFunc = (pageOptions: ListOptions): Promise<ListResponse<<%= method.returns %>>> => {
return apiWrapper(resultsFn => {
const { limit, after, order, include } = pageOptions as ListOptions;
this.client._CallApi<<%= method.returns %>>({
url: "<%= method.path %>",
method: "<%= method.httpMethod %>",
query: { after, include, order, limit },
<% if (Object.keys(method.pathParams).length > 0) { -%>
    pathParams: {
    <% for (var key in method.pathParams){ -%>
        <%- unpackParams(key, method.pathParams[key]) %>,
    <% } -%>
    },
<% } -%>
paginated: true,
}, <%= method.returns %>, resultsFn);
}, (data: ListResponse<<%= method.returns %>>, done) => {
done(null, new ListResponse(data, data.data));
}, null, true);
};
return new Paginator(pageFunc, options);
}