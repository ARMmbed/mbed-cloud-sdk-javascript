import { EntityBase } from "../../../common/entityBase";
<% if (paginators) { %>
    import { Paginator } from "../../../../common/pagination";
    import { ListResponse } from "../../../../common/listResponse";
    import { ListOptions } from "../../../../common/interfaces";
<% } %>
<% if (clientCalls || paginators) { %>
    import { ConnectionOptions } from "../../../../common/interfaces";
    import { Config } from "../../../client/config";
    import { apiWrapper } from "../../../../common/functions";
    import { Client } from "../../../client/client";
<% } %>
<% filteredImports.forEach(function(fk) { %>
    import { <%= fk.type %> } from "../../index";
<% }); %>
/**
* <%= entity._key.pascal %>.
*/
export class <%= entity._key.pascal %> extends EntityBase {
<% if (entity.field_renames.length > 0) { %>
    public readonly _renames: { [key: string]: string } = {
    <% entity.field_renames.forEach(function(rename){ %>
        "<%= rename.api_fieldname %>": "<%= rename._key.lower_camel %>",
    <% }); %>
    };
<% } %>
<% if (foreignKeyTypes.length > 0) { %>
    public readonly _foreignKeys: { [key: string]: { [key: string]: any } } = {
    <% foreignKeyTypes.forEach(function(f) { %>
        <%= f.propName %>: {
        type: <%= f.type %>,
        array: true,
    <% }); %>
    }
    };
<% } %>
<% entity.fields.forEach(function(field) { %>
    <% if (field._key.name !== "id") {%>
        /**
        * <%= (field.description || field._key.lower_camel).replace('.','') %>.
        */
        public <%= field._key.lower_camel %>?: <%- types[field._key.lower_camel]%>;
    <% } %>
<%});%>
<% if (clientCalls || paginators) { %>
constructor(config?: ConnectionOptions | Config) {
super();
if (config instanceof Config) {
this.config = config;
} else {
this.config = new Config(config);
}
}
<% } %>
<% methods.forEach(function(method) { %>
    <% if (method.deferToForeignKey) { %>
        public <%= method.methodName %>(<% method.methodParams.forEach(function(param, i) {%><%= param.key %><% if (!param.required) { %>?<% } %>: <%- param.type %><% if (i < method.methodParams.length - 1) { %>,<% } %><% }); %>): Promise<<%= method.returns %>> {
        <% method.setForeignKeyProps.forEach(function(prop) { %>
            <%= method.deferedMethodCall.field%>.<%= prop.externalKey%> = this.<%= prop.selfKey %>;
        <% }); %>
        return <%= method.deferedMethodCall.field%>.<%= method.deferedMethodCall.method%>();
        }
    <% } else if (method.paginated) { %>
        /**
        * List <%= method.returns %>s
        * @param options filter options
        */
        public <%= method.methodName %>(options?: ListOptions): Paginator<<%= method.returns %>, ListOptions> {
        const pageFunc = (pageOptions: ListOptions): Promise<ListResponse<<%= method.returns %>>> => {
        return apiWrapper(resultsFn => {
        const { limit, after, order, include } = pageOptions as ListOptions;
        Client._CallApi<<%= method.returns %>>({
        url: "<%= method.path %>",
        method: "<%= method.httpMethod %>",
        query: { after, include, order, limit },
        <% if (Object.keys(method.pathParams).length > 0) { %>
            pathParams: {
            <% for (var key in method.pathParams){%>
                <%- unpackParams(key, method.pathParams[key]) %>,
            <% } %> },
        <% } %>
        config: this.config,
        paginated: true,
        }, new <%= method.returns %>(), resultsFn);
        }, (data: ListResponse<<%= method.returns %>>, done) => {
        done(null, new ListResponse(data, data.data));
        });
        };
        return new Paginator(pageFunc, options);
        }
    <% } else { %>
        /**
        * <%= method.methodName %>s a <%= method.returns %>.
        * @returns Promise containing <%= method.returns %>.
        */
        public <%= method.methodName %>(<% method.methodParams.forEach(function(param, i) {%><%= param.key %><% if (!param.required) { %>?<% } %>: <%- param.type %><% if (i < method.methodParams.length - 1) { %>,<% } %><% }); %>): Promise<<%= method.returns %>> {
        <% if (method.customMethodCall) { %>
            return <%= method.customMethodName %>();
            }
        <% } else { %>
            <% if (Object.keys(method.bodyParams).length > 0) { %>
                <% if (method.bodyParams[Object.keys(method.bodyParams)[0]].replaceBody ) { %>
                    const body = <% if (!method.bodyParams[Object.keys(method.bodyParams)[0]].external) { %>this.<% } %><%= method.bodyParams[Object.keys(method.bodyParams)[0]].key %>;
                <% } else { %>
                    const body = {
                    <% for (var key in method.bodyParams) { %>
                        <%= key %>: <% if (!method.bodyParams[key].external) { %>this.<% } %><%= method.bodyParams[key].key %>,
                    <% } %>
                    };
                <% } %>
            <% } %>
            return apiWrapper(resultsFn => {
            Client._CallApi<<%= method.returns %>>({
            url: "<%= method.path %>",
            method: "<%= method.httpMethod %>",
            <% if (Object.keys(method.queryParams).length > 0) { %>
                query: {
                <% for (var key in method.queryParams){%>
                    <%- unpackParams(key, method.queryParams[key]) %>,
                <% } %> },
            <% } %>
            <% if (Object.keys(method.pathParams).length > 0) { %>
                pathParams: {
                <% for (var key in method.pathParams){%>
                    <%- unpackParams(key, method.pathParams[key]) %>,
                <% } %> },
            <% } %>
            <% if (Object.keys(method.bodyParams).length > 0) { %>
                body: body,
            <% } %>
            config: this.config,
            }, this, resultsFn);
            }, (data, done) => {
            done(null, data);
            });
            }
        <% } %>
    <% } %>
<% }); %>
}
